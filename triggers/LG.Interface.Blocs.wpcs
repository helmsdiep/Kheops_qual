//
// Interfacage avec la base etiquettes TMA100280
// export XML ou fichier plat
// catalogue "C310-Blocs - Polystyrene blocks"
//

//
// technical utils functions
//

function addMapElement(mapEl, key, val) {
    getScriptByPath("/scripts/triggers/LG.Library.Utils")
          .getFunctionByName("addMapElement").invoke(mapEl, key, val);
}

function buildMapElementXML(mapEl) {
  return getScriptByPath("/scripts/triggers/LG.Library.Utils")
              .getFunctionByName("buildMapElementXML").invoke(mapEl);
}

function buildMapElementCSV(mapEl, processKey){
    return getScriptByPath("/scripts/triggers/LG.Library.Utils")
              .getFunctionByName("buildMapElementCSV").invoke(mapEl, processKey);
}

//
// functional utils functions
//

function getSimpleValue(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getSimpleValue").invoke(oitem, nodeName);
}

function getDateValue(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getDateValue").invoke(oitem, nodeName, "dd/MM/yyyy HH:mm:ss");
}

function getLkpValue(oItem,nodeName,lkpColumn) {
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getLkpValue").invoke(oItem,nodeName,lkpColumn);
}

function getLkpMultiValues(oItem,nodeName,lkpColumn) {
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getLkpMultiValues").invoke(oItem,nodeName,lkpColumn);
}

function getMultiValues(oItem,nodeName) {
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getMultiValues").invoke(oItem,nodeName);
}

function getItemLevel(oitem){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getItemLevel").invoke(oitem);
}

function getEn(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
               .getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,nodeName);
}

function getPublishingItemAtLevel(oitem,sLevel){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getPublishingItemAtLevel").invoke(oitem, sLevel);
}

// filtre des décimaux finissant par '.0' demandé par mail Roland Dominici 25/01/11
function filterDecimalZero(str){
     if(str.endsWith(".0")) {
       return  replace(str, ".0","");
     }
    return str;
}

// findSitePath
// @desc return the attribute path of a production site from its code
// @param oitem the item
// @param siteCode the site code in 02FR0063-ProductionSite
// @return the attribute path eg "ProductionSiteGroup#3"
function findSitePath(oitem, siteCode){
  var productionSiteGroup = getEn(oitem,"ProductionSiteGroup");
  if(productionSiteGroup==null) { return null; }
  for(var i=0; i<productionSiteGroup.size(); i++) {
    var fProductionSite = getEn(oitem,"ProductionSiteGroup#"+i+"/02FR0063-ProductionSite")[0].getEntryNodeValue();
    if (fProductionSite.contains(siteCode)){
      return "ProductionSiteGroup#"+i;
    }
  }
  return null; 
}

// Concatenates all the elements of a string array, using the specified separator between each element. 
function arrayJoin(array, separator){
  var str = "";
  for (var i=0; i<array.size(); i++){
     str = str + ((i==0) ? "" : separator ) + array[i];
  }
  return str;
}

//

function getDataSite(oitem, productionSiteGroupID){
	var parent = oitem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
	var parentBUnit = getPublishingItemAtLevel(oitem,"BUnit");
	var parentProd  = getPublishingItemAtLevel(oitem,"Prod" );
	var DATA = [];
	//
	var strMaterialNumber = getSimpleValue(oitem, "01AC0664-MaterialNumber");
	if(strMaterialNumber!=null && strMaterialNumber!=""){
		var iMaterialNumber = strMaterialNumber.length();
		for(var k=0;k<iMaterialNumber;k++) {
			var testzero=strMaterialNumber.startsWith("0");
			if(testzero==true) {
				strMaterialNumber=substring(strMaterialNumber,1,strMaterialNumber.length());
			}
		}
	}
	//
	// production site attributes
	var siteCode= getLkpValue(parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C01-Code");
	var siteSAPCode= getLkpValue(parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C07-SAP PlantCode");
	var productionLine= getLkpValue( parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C05-Process");
	// Order is not reliable: find the right path in Prod from SiteCode 
	var prodSitePath = findSitePath(parentProd, siteCode);
	var siteName= getLkpValue(parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C02-Libellé");

	addMapElement(DATA, "PROD_ID", getSimpleValue( oitem ,"01AC0044-ERPCode")) ; // same as oitem.getPrimaryKey()
	addMapElement(DATA, "CODE_GEMMS", strMaterialNumber);
	addMapElement(DATA, "ItemNumber", strMaterialNumber) ;
	addMapElement(DATA, "ItemCAMReference", strMaterialNumber) ;
	addMapElement(DATA, "CAMPackingCode", "");
	addMapElement(DATA, "CreationDate", getDateValue( oitem ,"01AC0006-CreationDate")) ;
	addMapElement(DATA, "LastUpdate", getDateValue( oitem ,"01AC0004-LastUpdate")) ;
	addMapElement(DATA, "Covering", getLkpValue( oitem ,"06DN0414-Covering","C01-Code")) ;
	var strTotalQuantityOfNextLowerLevel=checkString(getSimpleValue( oitem ,"06DN0407-TotalQuantityOfNextLowerLevel"),"1");
	addMapElement(DATA, "TotalQuantityOfNextLowerLevel",strTotalQuantityOfNextLowerLevel) ;
	addMapElement(DATA, "LabelName1", getSimpleValue( parentProd ,"01AC0017-LabelName1")) ;
	addMapElement(DATA, "LabelName2", getSimpleValue( parentProd ,"01AC0018-LabelName2")) ;
	addMapElement(DATA, "brandName", getLkpValue( parentProd ,"01AC0036-brandName","C07-Logo")) ;
	addMapElement(DATA, "RealThickness", filterDecimalZero(getSimpleValue( parentProd ,"04CP0082-RealThickness"))) ;
	addMapElement(DATA, "LongitudinalEdgeType", getLkpValue( parentProd ,"04CP0160-LongitudinalEdgeType","C02-Libellé court")) ;
	addMapElement(DATA, "InsulationType", getLkpValue( parentProd ,"04CP0172-InsulationType","C02-Type de la norme")) ;
	var acermis = getLkpMultiValues(parentProd, "05PC0253-InsulationACERMIReferences","C02-produit certifié");
	addMapElement(DATA, "InsulationACERMIReferences",(acermis.size()>0 ? acermis[0] : ""));
	addMapElement(DATA, "SCClassification", getLkpValue( parentProd ,"05PC0565-SCClassification","C02-Libellé")) ;
	addMapElement(DATA, "ThermalResistance", getSimpleValue( parentProd ,"05PC0300-ThermalResistance")) ;
	addMapElement(DATA, "EuroclasseClassification", getLkpValue( parentProd ,"05PC0305-EuroclasseClassification","C02-Libellé")) ;
	addMapElement(DATA, "ENReference", getLkpValue( parentProd ,"05PG0245-ENReference","C01-N° de norme")) ;
	addMapElement(DATA, "CECertified", getSimpleValue( parentProd ,"05PG0249-CECertified")) ;
	addMapElement(DATA, "ThermalConductivityLambda", getSimpleValue(parentProd ,"05PC0301-ThermalConductivityLambda")) ;
	addMapElement(DATA, "Width", filterDecimalZero(getSimpleValue(parentBUnit ,"04CP0095-Width"))) ;
	addMapElement(DATA, "Length", filterDecimalZero(getSimpleValue(parentBUnit ,"04CP0103-Length"))) ;
	addMapElement(DATA, "netWeight", filterDecimalZero(getSimpleValue(oitem ,"04CP0213-netWeight"))) ;
	addMapElement(DATA, "InsulationACERMICertified", getSimpleValue(parentProd ,"05PC0252-InsulationACERMICertified")) ;
	addMapElement(DATA, "netWeightUnit", getLkpValue(oitem ,"04CP0214-netWeightUnit","C03-Code unité non standard")) ;
	var productFunctions = getLkpMultiValues(parentProd, "03FN0068-ProductFunction","C03-Libellé");
	addMapElement(DATA, "ProductFunction1",(productFunctions.size()>0 ? productFunctions[0] : ""));
	addMapElement(DATA, "ProductFunction2",(productFunctions.size()>1 ? productFunctions[1] : ""));
	var productUses = getLkpMultiValues(parentProd, "07MO0442-ProductUse", "C02-Libellé");
	addMapElement(DATA, "ProductUse1",(productUses.size()>0 ? productUses[0] : ""));
	addMapElement(DATA, "ProductUse2",(productUses.size()>1 ? productUses[1] : ""));
	addMapElement(DATA, "ProductUse3",(productUses.size()>2 ? productUses[2] : ""));
	addMapElement(DATA, "GTIN", getSimpleValue(parentBUnit, "01AC0042-GTIN"));
	addMapElement(DATA, "ServiceabilityDeformationMaxi", filterDecimalZero(getSimpleValue( parentProd ,"05PC0651-ServiceabilityDeformationMaxi"))) ;
	addMapElement(DATA, "ServiceabilityDeformation", filterDecimalZero(getSimpleValue( parentProd ,"05PC0268-ServiceabilityDeformation"))) ;
	addMapElement(DATA, "ServiceabilityCompressionStrength", getSimpleValue( parentProd ,"05PC0267-ServiceabilityCompressionStrength")) ;
	addMapElement(DATA, "PRODUCTIONSITE", siteSAPCode);
	addMapElement(DATA, "PRODUCTIONSITENAME", siteName);
	if(productionLine=="BLOC"||productionLine=="GULL"){
	addMapElement(DATA, "PRODUCTIONLINE", productionLine);
	}else{
	addMapElement(DATA, "PRODUCTIONLINE", "Non concerné");
	}
	addMapElement(DATA, "LABELINGHEALTH", getLkpValue(parentProd,"08IE0653-LabelingHealth","C01-Classement"));
	addMapElement(DATA, "ACERMICERTIFIED", getSimpleValue(parentProd,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0657-ACERMICertified"));
	addMapElement(DATA, "ACERMICERTIFICATEREFERENCE", getLkpValue(parentProd,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0658-ACERMICertificateReference","C01-N° de certificat ACERMI isolant"));

	addMapElement(DATA, "YearOfFirstCEMarking", getSimpleValue(parentProd, "05PG0795-YearOfFirstCEMarking"));  
	addMapElement(DATA, "DOPNumber", getSimpleValue(parentProd, "05PG0767-DOPNumber"));
	addMapElement(DATA, "ProductTypeID", getSimpleValue(parentProd, "05PG0768-ProductTypeID"));
	addMapElement(DATA, "ProductUsage", getSimpleValue(parentProd, "05PG0770-ProductUsage"));
	addMapElement(DATA, "OrganismNotified", getSimpleValue(parentProd, "05PG0773-OrganismNotified"));
	addMapElement(DATA, "EmissionDangerousSubstances", getSimpleValue(parentProd, "07MO0483-EmissionDangerousSubstances"));
	addMapElement(DATA, "VolontarySafetyStatement", getSimpleValue(parentProd,"05PG0778-VolontarySafetyStatement"));
	addMapElement(DATA, "CombustionContinuousIncandescence", getSimpleValue(parentProd,"05PC0779-CombustionContinuousIncandescence"));
	addMapElement(DATA, "DynamicStiffness", getSimpleValue(parentProd,"05PC0780-DynamicStiffness"));
	addMapElement(DATA, "dLThickness", getSimpleValue(parentProd,"05PC0781-dLThickness"));
	addMapElement(DATA, "ThicknessTolerancesClass", getSimpleValue(parentProd,"05PC0782-ThicknessTolerancesClass"));
	addMapElement(DATA, "DurabilityThermalResistance", getSimpleValue(parentProd,"05PC0783-DurabilityThermalResistance"));
	addMapElement(DATA, "CreepCompression", getSimpleValue(parentProd,"05PC0784-CreepCompression"));
	addMapElement(DATA, "LongTermThicknessReduction", getSimpleValue(parentProd,"05PC0785-LongTermThicknessReduction"));
	addMapElement(DATA, "EffortResistanceCyclicCompression", getSimpleValue(parentProd,"05PC0786-EffortResistanceCyclicCompression"));
	addMapElement(DATA, "CompressiveStress5Strain", getSimpleValue(parentProd,"05PC0787-CompressiveStress5%Strain"));
	addMapElement(DATA, "CompressiveStress2Strain", getSimpleValue(parentProd,"05PC0788-CompressiveStress2%Strain"));
	addMapElement(DATA, "C05PC0789", "");
	addMapElement(DATA, "DurabilityOfReactionToFire", getSimpleValue(parentProd,"05PC0790-DurabilityOfReactionToFire"));
	addMapElement(DATA, "DurabilityOfThermalResistance", getSimpleValue(parentProd,"05PC0791-DurabilityOfThermalResistance"));
	addMapElement(DATA, "SustainabilityChemicalBiologicalAttacks", getSimpleValue(parentProd,"05PC0792-SustainabilityChemicalBiologicalAttacks"));
	addMapElement(DATA, "ThresholdFlexuralStrength", getSimpleValue(parentProd,"05PC0793-ThresholdFlexuralStrength"));
	addMapElement(DATA, "ClassFlexuralStrength", getSimpleValue(parentProd,"05PC0794-ClassFlexuralStrength"));
	addMapElement(DATA, "DOPUrl", getSimpleValue(parentProd, "05PG0769-DOPUrl"));
	addMapElement(DATA, "WaterVapourTransmission", getSimpleValue(parentProd, "05PC0298-WaterVapourTransmission"));
	addMapElement(DATA, "CompressiveStress", getSimpleValue(parentProd, "05PC0269-CompressiveStress"));
	addMapElement(DATA, "IT249", getSimpleValue(parentProd, "05PC0807-IT249"));
	addMapElement(DATA, "TensileStrengthPerpendicularToInsulation", getSimpleValue(parentProd, "05PC0286-TensileStrengthPerpendicularToInsulation"));

	return DATA;
}

function canExport(oitem){
    // Catalogue 
    if (!oitem.getPrimaryKey().substring(1,4).contains("310")) {
      return false;
    }

    // Que le PItem (?)
    if (!oitem.getPrimaryKey().contains("I") && !oitem.getPrimaryKey().contains("B")) {
      return false;
    }

	// Que les items éligibles à la publication dans SAP et possédant le material number
	var strMaterialNumber="";
	var oItemMaterialNumberEn = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,"01AC0664-MaterialNumber");
	if(oItemMaterialNumberEn!=null) {
		strMaterialNumber = checkString(oItemMaterialNumberEn[0].getEntryNodeValue(),"");
	}
	//
	var strPublishedIntoSAP="";
	var oItemPublishedIntoSAPEn = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,"01AC0775-PublishedIntoSAP");
	if(oItemPublishedIntoSAPEn!=null) {
		strPublishedIntoSAP = checkString(oItemPublishedIntoSAPEn[0].getEntryNodeValue(),"");
	}

	if((strPublishedIntoSAP=="true" && strMaterialNumber=="") || strPublishedIntoSAP=="false") {
      return false;
	}
	
    // Les items ayant le statut 01AC0548-Status = ACTIF 
    if (!getSimpleValue(oitem,"01AC0548-Status").contains("[ACTIVE] - Actif")) {
      return false;
    }

    return true;
}

///////
///////

function getData(oitem){
	var dataGrp = [];
	var parentProd  = getPublishingItemAtLevel(oitem,"Prod" );
	var productionSiteGroup = getEn(parentProd,"ProductionSiteGroup");
	if(productionSiteGroup==null) { 
		return dataGrp; 
	}
	var e;
	catchError(e) {
		for(var i=0; i<productionSiteGroup.size(); i++) {
			// var fProductionSite = getEn(oitem,"ProductionSiteGroup#"+i+"/02FR0063-ProductionSite")[0].getEntryNodeValue();
		    dataGrp.add(getDataSite(oitem, i));
		}
	}
	if (e!=null){
	    err.writeln("Error on "+oitem.getPrimaryKey()+", "+e); 
	}
	return dataGrp;
}

function getEtiquetteXML(oitem){
    if(!canExport(oitem)) {
      return "<!-- no blocs_etiquettes_export -->";
    }
    var dataGrp = getData(oitem);
    if(dataGrp==null ||dataGrp.size()<1 ) {
      return "<!-- no blocs_etiquettes_export -->";
    }
    var xml = "";
    for(var i=0; i<dataGrp.size(); i++) {
      xml = concat(xml,"<group name=\"blocs_etiquettes_export\">",buildMapElementXML(dataGrp[i]), "</group>");
    }
    var outWriter = createOtherOut("");
    outWriter.writeln(xml);
    outWriter.save("/test/Blocs._"+today().formatDate("yyyyMMdd_HHmmss")+".xml");
    return xml;
}

function getFullCSV(){
	var oitem;
    var csv = "";
    var headerDone = false;
    forEachCtgItem("C310-Blocs - Polystyrene blocks",oitem) {
	   var e;
		catchError(e) {
			if(!canExport(oitem)) {
				continue;
			}
			logDebug("Export "+oitem.getPrimaryKey());
			var dataGrp = getData(oitem);
			for(var i=0; i<dataGrp.size(); i++) {
				if (!headerDone){
					csv = csv + buildMapElementCSV(dataGrp[i], true);
					headerDone = true;
				}
				csv = csv + buildMapElementCSV(dataGrp[i], false);
			}
		} 
		if (e!=null) { 
			// out.writeln(oitem.getPrimaryKey()+" "+e);
			// e=null;
		}
    }
    return csv;
}

