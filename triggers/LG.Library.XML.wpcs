//////////////////////////////////////////////////////////////////
// @file:
//   LG.Library.XML
// @description: 
//   XML-related functions
//   The main function-to-call is getItemXML(hmGlobals,item)
// @ownership: 
//   CGA
/////////////////////////////////////////////////////////////////


function debug(txt){
    //out.writeln(txt);
}

// getParentItem
// @desc Returns the parent item of the item passed as parameter
// @param hmGlobals global values
// @param item base item
// @return item parent item
function getParentItem(hmGlobals,item){
    return item.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
}

// fnGetXMLOneValue
// @desc returns the <value> element of the xml output, for 1 value.
// @param sValue the "real" value of the attribute
// @param sType value type (STRING, INTEGER etc...)
// @param sColName column name in case the value is taken from a lookup table
// @returns a string for a single <value> element.
function fnGetXMLOneValue(oValue,sType,sColName){
    var sXML="";
    sXML = sXML + "<value";
    sXML = sXML + " type=\"" + sType + "\"";
    if (checkString(sColName,"")!="" ) {
        sXML = sXML + " col=\"" + sColName + "\"";
    }   
    if (checkString(oValue,"")=="") 
    {
        sXML = sXML + "/>";
    }
    else
    {
        sXML = sXML + ">";
        if (sType=="NUMBER" || sType=="INTEGER") 
        {
            var LOCALE=new Locale("en", "US");
            sXML = sXML + oValue.formatNumber("0.############",LOCALE);
        }
        else
        {
            if (sType=="DATE") 
            {
                sXML = sXML + oValue.formatDate("yyyy'-'MM'-'dd'T'HH:mm:ss");
            }
            else
            {
                sXML = sXML + "<![CDATA[" + oValue + "]]>";
            }
        }
        sXML = sXML + "</value>";
    }
    return sXML;
}

// fnGetXMLOneValue
// @desc returns the <value> element of the xml output, treating multi-value attributes
// and lookup values too.
// @param sType value type (STRING, INTEGER etc...)
// @param oNode node
// @param oEntryNode entrynode.
// @param hmGlobals script globals
// @returns a string for the <value> element.
function fnGetXMLValue(hmGlobals,sType,oNode,oEntryNode,locale){
    var sXML="";
    if (sType!="LOOKUP_TABLE")
    {
        if (sType!="RELATIONSHIP")
        {           
            if (sType=="STRING" && oEntryNode.getNodeFromEntryNode().getNodeAttributeValue("NON_PERSISTED")!=null && oEntryNode.getNodeFromEntryNode().getNodeAttributeValue("NON_PERSISTED")=="yes" && oEntryNode.getEntryNodeExactPath().contains("Associated"))
            {
                var sExactPath=oEntryNode.getEntryNodeExactPath();
                var sParentExactPath=getParentPath(sExactPath);
                if (sParentExactPath!="") {
                    var oParentEntryNode=oEntryNode.getEntry().getRootEntryNode().getEntryNode(sParentExactPath);
                    if (oParentEntryNode!=null && oParentEntryNode.getNodeFromEntryNode().getNodeAttributeValue("TYPE")=="GROUPING") {
                        var aEntryNodeChildren=oParentEntryNode.getEntryNodeChildren();
                        var iEntryNodeChildrenLen=aEntryNodeChildren.size();
                        for (var k=0; k<iEntryNodeChildrenLen;k++) {
                            var oEntryNodeTemp=aEntryNodeChildren[k];
                            if (oEntryNodeTemp.getNodeFromEntryNode().getNodeAttributeValue("TYPE")=="RELATIONSHIP") {
                                var w=oEntryNodeTemp.getEntry().getEntryRelationshipAttrib(oEntryNodeTemp.getEntryNodeExactPath());
                                if (w!=null)
                                {
                                    var relatedCatalog = getCtgByName(w[0]); 
                                    var relatedItemId = w[1];
                                    var relatedEntry = relatedCatalog.getEntryByPrimaryKey(relatedItemId);
                                    if (relatedEntry !=null) {
                                        var relatedItemName = relatedEntry.getCtgItemAttrib("SC000-GlobPrim/01AC0012-LongName");
                                        sXML = sXML + "<value>" + relatedItemName +"</value>";
                                    }
                                    else {
                                        sXML = sXML + "<value/>";
                                    }
                                }
                                else
                                {
                                    sXML = sXML + "<value/>";
                                }
                            }
                        }
                    }
                }
            }
            else {
                sXML = sXML + fnGetXMLOneValue(oEntryNode.getEntryNodeValue(),sType,"");
            }
        }
        else
        {
            var v=oEntryNode.getEntry().getEntryRelationshipAttrib(oEntryNode.getEntryNodeExactPath());
            if (v!=null)
            {
                sXML = sXML + "<value>" + v[1] +"</value>";
            }
            else
            {
                sXML = sXML + "<value/>";
            }
            
        }
    }
    else
    {
        var ctgname = oNode.getNodeLookupTableName();
        var hmLkp = hmGlobals["__XML_LKP_CACHE"][ctgname];
        // Let's cache some lookup table informations to speed up XML generation.
        if (hmLkp == null) {
            var lkp = getLkpByName(ctgname);
            var ctg = getCtgByName(ctgname);
            //debug("Caching lkp " + ctgname);
            var hmLkpTmp = [];
            hmLkpTmp["LOOKUP_TABLE"] = ctg;
            var LOCALE = locale;
            // default to fr_FR for backward compatibility...
            if (LOCALE==null){
                LOCALE=new Locale("fr", "FR");
            }
            
            var spc = ctg.getCtgSpec(true);
            var nodes = spc.getNodeByPath(spc.getSpecName()).getNodeChildren();
            var i;
            hmLkpTmp["LOOKUP_COLS"] = [];
            for (i = 0; i < nodes.size(); i++) {
                hmLkpTmp["LOOKUP_COLS"][i] = [];
                hmLkpTmp["LOOKUP_COLS"][i]["TYPE"] = nodes[i].getNodeAttributeValue("TYPE");
                hmLkpTmp["LOOKUP_COLS"][i]["COLNAME"] = substring(nodes[i].getNodeName(), 1, 3);
                hmLkpTmp["LOOKUP_COLS"][i]["ENTRY_PATH"] = nodes[i].getLocaleNode(LOCALE).getNodePath();
            }
            hmGlobals["__XML_LKP_CACHE"][ctgname] = hmLkpTmp;
            hmLkp = hmLkpTmp;
        }
        // End of the "cache" part.
        
        // Now we generate the values in the XML doc.
        // one value par column.        
        var sKey = oEntryNode.getEntryNodeValue();
        if (sKey != null) {
            var lkpItem = hmLkp["LOOKUP_TABLE"].getEntryByPrimaryKey(sKey);
            var i = 0;
            for (i = 0; i < hmLkp["LOOKUP_COLS"].size(); i++) {
                //var sValue = (i == 0 ? sKey : checkString(lkpValues[i - 1], ""));
                //debug(hmLkp["LOOKUP_COLS"][i]);
                var p = hmLkp["LOOKUP_COLS"][i]["ENTRY_PATH"];
                
                sXML = sXML + fnGetXMLOneValue(
                    lkpItem.getEntryAttrib(
                        hmLkp["LOOKUP_COLS"][i]["ENTRY_PATH"]),
                        hmLkp["LOOKUP_COLS"][i]["TYPE"],
                        hmLkp["LOOKUP_COLS"][i]["COLNAME"]);
            }
        }else{
            // backward compatibilty
            for (i = 0; i < hmLkp["LOOKUP_COLS"].size(); i++) {
                sXML = sXML + fnGetXMLOneValue("","STRING", hmLkp["LOOKUP_COLS"][i]["COLNAME"]);
            }
        }
        
    }

    return sXML;
}

// ------------------------------------------------------------------------------------------------------------------

// fnPrepareItemXMLRec
// @desc Pour chaque EntryNode
// 1. on calcul le sShortNodePath = NodePath sans la spec
// @param hmGlobals script globals
// @param oNodeEntry nodeentry
function fnPrepareItemXMLRec(hmGlobals,oNodeEntry){
    var sXML="";
//  debug(oNodeEntry.getEntryNodeExactPath());
    if (oNodeEntry!=null) 
    {
        var tNodeEntryChildren=oNodeEntry.getEntryNodeChildren();
        var iNodeEntryChildrenSize=tNodeEntryChildren.size();
    
        // Ecriture des enfants du noeud
        if (iNodeEntryChildrenSize>0) 
        {
            var i=0;
            while (i<iNodeEntryChildrenSize)
            {
                var oCurNode=tNodeEntryChildren[i].getNodeFromEntryNode();
                var eXML="";
                if (oCurNode!=null)
                {
//                  var iAttributeLevel=1;//recordNodeDepth(oCurNode,iLevel,hmLevels);
                    var sType=oCurNode.getNodeAttributeValue("TYPE");
                    var bMulti=(checkInt(oCurNode.getNodeAttributeValue("MAX_OCCURRENCE"),0)>1);
                    var iFirstEntryNode = i;
                    eXML="";                    
                    while (tNodeEntryChildren[i]!=null && tNodeEntryChildren[i].getNodeFromEntryNode()==oCurNode)
                    {
                        var j=i-iFirstEntryNode;
                        if (sType==null) 
                        {
                            eXML = eXML + fnPrepareItemXMLRec(hmGlobals,tNodeEntryChildren[i]);
                        }
                        else
                        {
                            if (sType=="GROUPING")
                            {
                                eXML = eXML + "<attrgroup occ=\""+j+"\">" +fnPrepareItemXMLRec(hmGlobals,tNodeEntryChildren[i]) +"</attrgroup>";
                            }
                            else
                            {
                                var gXML = "";
                                gXML=fnGetXMLValue(hmGlobals,sType,oCurNode,tNodeEntryChildren[i]);
                                if (bMulti) 
                                {
                                    eXML = eXML + "<valuegroup occ=\"" + j + "\">";
                                    eXML = eXML + gXML;
                                    eXML = eXML + "</valuegroup>";
                                }
                                else
                                {
                                    eXML = eXML + gXML;
                                }
                            }
                        }
                        i++;
                    }
                    if (sType!=null)
                    {
                        if (oCurNode!=null && sType=="GROUPING")
                        {
                            sXML = sXML + "<group name=\"" + getRidOfRootName(oCurNode.getNodePath()) + "\">";
                            sXML = sXML + eXML;
                            sXML = sXML + "</group>";
                        }
                        else
                        {
                            sXML = sXML + "<attribute type=\"" + (bMulti ? "MULTI" : "SIMPLE") + "\" name=\"" + getRidOfRootName(oCurNode.getNodePath()) + "\">";
                            sXML = sXML + eXML;
                            sXML = sXML + "</attribute>";
                        }
                    }
                    else
                    {
                        sXML = sXML + eXML;
                    }
                }
            }
        }
    }
    
    return sXML;
}
// ------------------------------------------------------------------------------------------------------------------

// fnPrepareItemXML
// @desc Pour chaque EntryNode
// 1. on calcul le sShortNodePath = NodePath sans la spec
// @param hmGlobals script globals
// @param item item
function fnPrepareItemXML(hmGlobals,item){
    var ctgName = item.getCatalog().getCtgName();
    if (ctgName.startsWith("CA")){
        ctgName = "C"+substring(ctgName,2);
    }
    var ctg=getCtgByName(ctgName);

    var oRootEntryNode=item.getRootEntryNode();
    var sXML=fnPrepareItemXMLRec(hmGlobals,oRootEntryNode); 

    // We add an extra attribute to list child items
    var itemFamily = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getChildItems").invoke(hmGlobals,item);
    var fnGetStatus=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getStatus");
    sXML = sXML + "<group name=\"99CTL101-ChildrenGroup\">";
    if(itemFamily.size()!=0) 
    {
        var i;
        for(i=0;i<itemFamily.size();i++) 
        {
            var childItem=ctg.getEntryByPrimaryKey(itemFamily[i]["itemPrimaryKey"]);
            if (childItem!=null)
            {
                sXML = sXML + "<attrgroup occ=\"" + i + "\">";
                sXML = sXML + "<attribute type=\"SIMPLE\" name=\"99CTL101-ChildrenGroup/01AC0044-ChildERPCode\">";
                sXML = sXML + "<value type=\"RELATIONSHIP\">";
                sXML = sXML + itemFamily[i]["itemPrimaryKey"];
                sXML = sXML + "</value>";
                sXML = sXML + "</attribute>";
                sXML = sXML + "<attribute type=\"SIMPLE\" name=\"99CTL101-ChildrenGroup/01AC0548-ChildStatus\">";
                sXML = sXML + "<value type=\"SIMPLE\">";
                sXML = sXML + fnGetStatus.invoke(childItem);
                sXML = sXML + "</value>";
                sXML = sXML + "</attribute>";
                sXML = sXML + "</attrgroup>";
            }
        }
    }

    sXML = sXML + "</group>";
    return sXML;

}
// fnWriteItemAndParentsXML
// @desc returns an array containing XML for each item including and above the item passed in parameter
// @param hmGlobals script globals
// @param item item
// @param sXML deeper XML.
function fnWriteItemAndParentsXML(hmGlobals,item,sXML){
    var pKey=item.getCtgItemPrimaryKey();
    var sCachedXML=hmGlobals["__XML_ITEM_CACHE"][pKey];
    var xmlBodyInterfaceSAP="";
    var xmlBodyInterfaceCavaillon="";
    var xmlBodyInterfaceIsolants="";
    var xmlBodyInterfaceRehausses="";
    var xmlBodyInterfaceEntrevous="";
    var xmlBodyInterfaceCloisonsEtiq="";
	var xmlBodyInterfacePapier="";
	var xmlBodyInterfaceBlocs="";
	var xmlBodyInterfacePrimitifsDoublages="";
	var xmlBodyInterfaceCelingAccessories="";
	var xmlBodyInterfaceFasteners="";
	var xmlBodyInterfaceFinishingAccessories="";
	var xmlBodyInterfacePartitionAccessories="";
	var xmlBodyInterfaceLiantsAdhesives="";
	var xmlBodyInterfaceJointingCompounds="";
	var xmlBodyInterfaceGypsumPlasters="";
	var xmlBodyInterfaceGypsumBlocks="";
	var xmlBodyInterfaceCollesAdhesives="";
    var log = hmGlobals["LOGGER"];
    
    if (sCachedXML==null) 
    {
        debug("Caching " + pKey);
        sCachedXML=fnPrepareItemXML(hmGlobals,item);
        //
        log.loggerDebug("BEGIN : Creation message interface JDE ");
        log.loggerDebug("TEST :"+item.getPrimaryKey());
        xmlBodyInterfaceSAP=getScriptByPath("/scripts/triggers/Siniat.SAP.Interface").getFunctionByName("getSAPItemXML").invoke(hmGlobals,item);
        log.loggerDebug("END : Message interface JDE ");
        xmlBodyInterfaceCavaillon=getScriptByPath("/scripts/triggers/LG.Interface.ProfilesCavaillon")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceCloisonsEtiq=getScriptByPath("/scripts/triggers/LG.Interface.CloisonsEtiquettes")
              .getFunctionByName("getCloisonsEtiquettesXML").invoke(item);
        xmlBodyInterfaceIsolants=getScriptByPath("/scripts/triggers/LG.Interface.PanneauxIsolants")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceRehausses=getScriptByPath("/scripts/triggers/LG.Interface.Rehausses")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceEntrevous=getScriptByPath("/scripts/triggers/LG.Interface.Entrevous")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfacePapier=getScriptByPath("/scripts/triggers/LG.Interface.Papier")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceBlocs=getScriptByPath("/scripts/triggers/LG.Interface.Blocs")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfacePrimitifsDoublages=getScriptByPath("/scripts/triggers/LG.Interface.PrimitifsDoublages")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceCelingAccessories=getScriptByPath("/scripts/triggers/LG.Interface.CelingAccessories")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceFasteners=getScriptByPath("/scripts/triggers/LG.Interface.Fasteners")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceFinishingAccessories=getScriptByPath("/scripts/triggers/LG.Interface.FinishingAccessories")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfacePartitionAccessories=getScriptByPath("/scripts/triggers/LG.Interface.PartitionAccessories")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceLiantsAdhesives=getScriptByPath("/scripts/triggers/LG.Interface.LiantsAdhesives")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceJointingCompounds=getScriptByPath("/scripts/triggers/LG.Interface.JointingCompounds")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceGypsumPlasters=getScriptByPath("/scripts/triggers/LG.Interface.GypsumPlasters")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceGypsumBlocks=getScriptByPath("/scripts/triggers/LG.Interface.GypsumBlocks")
              .getFunctionByName("getEtiquetteXML").invoke(item);
        xmlBodyInterfaceCollesAdhesives=getScriptByPath("/scripts/triggers/LG.Interface.CollesAdhesives")
              .getFunctionByName("getEtiquetteXML").invoke(item);
		//
        hmGlobals["__XML_ITEM_CACHE"][pKey]=sCachedXML;
    }
    else
    {
        debug("Cache hit for " + pKey);
    }

    sXML= concat(
        "<item id='", item.getCtgItemPrimaryKey() + "'>" ,
        sCachedXML,
        xmlBodyInterfaceSAP,
        xmlBodyInterfaceCavaillon,
        xmlBodyInterfaceCloisonsEtiq,
        xmlBodyInterfaceIsolants,
        xmlBodyInterfaceRehausses,
        xmlBodyInterfaceEntrevous,
		xmlBodyInterfacePapier,
		xmlBodyInterfaceBlocs,
		xmlBodyInterfacePrimitifsDoublages,
		xmlBodyInterfaceCelingAccessories,
		xmlBodyInterfaceFasteners,
		xmlBodyInterfaceFinishingAccessories,
		xmlBodyInterfacePartitionAccessories,
		xmlBodyInterfaceLiantsAdhesives,
		xmlBodyInterfaceJointingCompounds,
		xmlBodyInterfaceGypsumPlasters,
		xmlBodyInterfaceGypsumBlocks,
		xmlBodyInterfaceCollesAdhesives,
        sXML,
        "</item>");

    var parent=getParentItem(hmGlobals,item);
    if (parent!=null) {
        sXML = fnWriteItemAndParentsXML(hmGlobals,parent,sXML);
    }

    return sXML;
}


// getKheopsItemXML
// returns XML for a single item
// WARNING: DO NOT REMOVE hmGlobals as it has to contain the XML 
//          of the Item initially published in the same "publishing session". (ex: the Product item)
// @param hmGlobals global constants
// @param item item
// @returns XML for the item
function getItemXML(hmGlobals,item){
    if (hmGlobals["__XML_LKP_CACHE"]==null)
    {
        hmGlobals["__XML_LKP_CACHE"]=[];
        hmGlobals["__XML_ITEM_CACHE"]=[];
    }
    var sXML=fnWriteItemAndParentsXML(hmGlobals,item,"");
    return sXML;
}

// fnWriteItemAndDescendantsXML
// @desc returns an array containing XML for each item including and above the item passed in parameter
// @param hmGlobals script globals
// @param item item
// @param sXML deeper XML.
function fnWriteItemAndDescendantsXML(hmGlobals,item){
    var sXML="<item id='"+ item.getCtgItemPrimaryKey() + "'>";

    sXML = sXML + fnPrepareItemXML(hmGlobals,item);
    
    var itemFamily = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getChildItems").invoke(hmGlobals,item);
    if(itemFamily.size()!=0) 
    {
        var i;
        for(i=0;i<itemFamily.size();i++) 
        {
            var itemChild = getCtgByName(itemFamily[i]["itemCatalog"]).getEntryByPrimaryKey(itemFamily[i]["itemPrimaryKey"]);
            if (itemChild!=null){
                sXML = sXML + fnWriteItemAndDescendantsXML(hmGlobals,itemChild);
            }
        }
    }
    sXML=sXML+"</item>";
    return sXML;
}


// getItemAndDescendantsXML
// returns XML for an item and its descendants.
// @param hmGlobals global constants
// @param item item
// @returns XML for the item
function getItemAndDescendantsXML(hmGlobals,item){
    if (hmGlobals["__XML_LKP_CACHE"]==null)
    {
        hmGlobals["__XML_LKP_CACHE"]=[];
        hmGlobals["__XML_ITEM_CACHE"]=[];
    }
    var sXML=fnWriteItemAndDescendantsXML(hmGlobals,item);
    return sXML;
}


function test_old() {
    var hmGlobals = [];
    var ctg = getCtgByName("C010-Plaques de plâtre - Gypsum plasterBoards");
    var item = ctg.getCtgItemByPrimaryKey("K010I01062");
    var lib = getScriptByPath("/scripts/triggers/LG.Library.XML");
    var res = lib.getFunctionByName("getItemXML").invoke(hmGlobals, item);
    //var res = getItemXML(hmGlobals, item);
    out.writeln(res);
}

function test_this() {
    var hmGlobals = [];
    var ctg = getCtgByName("C010-Plaques de plâtre - Gypsum plasterBoards");
    var item = ctg.getCtgItemByPrimaryKey("K010I01062");
    var res = getItemXML(hmGlobals, item);
    out.writeln(res);
}

//test_this();
//test_old();
