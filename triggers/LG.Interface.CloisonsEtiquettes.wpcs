//
// Cloisons - Export Kheops pour étiquetage.xls
// export XML ou fichier plat (cf report script)
//

//
// technical utils functions
//

function addMapElement(mapEl, key, val) {
    getScriptByPath("/scripts/triggers/LG.Library.Utils")
          .getFunctionByName("addMapElement").invoke(mapEl, key, val);
}

function buildMapElementXML(mapEl) {
    return getScriptByPath("/scripts/triggers/LG.Library.Utils")
              .getFunctionByName("buildMapElementXML").invoke(mapEl);
}

function buildMapElementCSV(mapEl, processKey){
    return getScriptByPath("/scripts/triggers/LG.Library.Utils")
              .getFunctionByName("buildMapElementCSV").invoke(mapEl, processKey);
}

//
// functional utils functions
//

function getSimpleValue(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getSimpleValue").invoke(oitem, nodeName);
}

function getDateValue(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getDateValue").invoke(oitem, nodeName, "dd/MM/yyyy HH:mm:ss");
}

function getLkpValue(item,nodeName,lkpColumn) {
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getLkpValue").invoke(item,nodeName,lkpColumn);
}

function getPublishingItemAtLevel(oitem,sLevel){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getPublishingItemAtLevel").invoke(oitem, sLevel);
}

function getItemLevel(oitem){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getItemLevel").invoke(oitem);
}

function getEn(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
               .getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,nodeName);
}

function getLkpMultiValues(oItem,nodeName,lkpColumn) {
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getLkpMultiValues").invoke(oItem,nodeName,lkpColumn);
}

// filtre des décimaux finissant par '.0' demandé par mail Roland Dominici 14/01/2010 12:25
function filterDecimalZero(str){
     if(str.endsWith(".0")) {
       return  replace(str, ".0","");
     }
    return str;
}

//
// specific business functions
//

function isInProductionSite(oitem, siteName){
  var productionSiteGroup = getEn(oitem,"ProductionSiteGroup");
  if(productionSiteGroup==null) { return false; }
  for(var i=0; i<productionSiteGroup.size(); i++) {
    var fProductionSite = getEn(oitem,"ProductionSiteGroup#"+i+"/02FR0063-ProductionSite")[0].getEntryNodeValue();
    if (fProductionSite.contains(siteName)){
      return true;
    }
  }
  return false;
}

// 06DN0436-handlingInstructions
// Col 3 de L048-Conditions stockage - Handling instructions
// max 7 occurrences stockées dans le même attribut avec le séparateur suivant @#@
function getHandlingInstructions(oitem){
  var s = "";
  var lkp = getLkpByName("L048-Conditions stockage - Handling instructions");
  var handlingInstructions = getEn(oitem,"06DN0436-handlingInstructions");
  if (handlingInstructions!=null && handlingInstructions.size()>0) {
    for(var i=0;i<handlingInstructions.size();i++) {
      if (i==7) {break;}
      var en = handlingInstructions[i].getEntryNodeValue();
      if (en!=null){
        s = s + substring(checkString(lookupValues(lkp,en)[1],""),0,120);
        if(i < handlingInstructions.size()-1) {
          s = s +"@#@";
        }
      }
    }
  }
  return s;
}

function getDataSite(oitem, productionSiteGroupID){
	var parent = oitem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
	var parentBUnit = getPublishingItemAtLevel(oitem,"BUnit");
	var parentProd  = getPublishingItemAtLevel(oitem,"Prod" );
	var DATA = [];

	var strMaterialNumber = getSimpleValue(oitem, "01AC0664-MaterialNumber");
	if(strMaterialNumber!=null && strMaterialNumber!=""){
		var iMaterialNumber = strMaterialNumber.length();
		for(var k=0;k<iMaterialNumber;k++) {
			var testzero=strMaterialNumber.startsWith("0");
			if(testzero==true) {
				strMaterialNumber=substring(strMaterialNumber,1,strMaterialNumber.length());
			}
		}
	}
	//
	addMapElement(DATA, "ERPCode", oitem.getPrimaryKey());
	addMapElement(DATA, "LabelName", getSimpleValue(parentProd, "01AC0017-LabelName1"));
	addMapElement(DATA, "brandName", getLkpValue(parentProd, "01AC0036-brandName","C07-Logo"));
	addMapElement(DATA, "ItemNumber", strMaterialNumber);
	addMapElement(DATA, "ItemCAMReference", strMaterialNumber);
	addMapElement(DATA, "CAMPackingCodeKey", filterDecimalZero( getSimpleValue(oitem, "06DN0433-stackingFactor") ));
	addMapElement(DATA, "GTIN", getSimpleValue(parentBUnit, "01AC0042-GTIN"));
	addMapElement(DATA, "CreationDate", getDateValue(oitem, "01AC0006-CreationDate"));
	addMapElement(DATA, "LastUpdate", getDateValue(oitem, "01AC0004-LastUpdate"));

	addMapElement(DATA, "RealThickness", filterDecimalZero( getSimpleValue(parentProd, "04CP0082-RealThickness") ));
	addMapElement(DATA, "Width", filterDecimalZero( getSimpleValue(parentProd, "04CP0095-Width") ));
	addMapElement(DATA, "WidthUnit", getLkpValue(parentProd, "04CP0097-WidthUnit", "C03-Code unité non standard"));

	addMapElement(DATA, "Length", filterDecimalZero( getSimpleValue(parentBUnit, "04CP0103-Length") ));
	addMapElement(DATA, "LengthUnits", getLkpValue(parentBUnit, "04CP0104-LengthUnits", "C03-Code unité non standard"));

	addMapElement(DATA, "LongitudinalEdgeType", getLkpValue(parentProd, "04CP0160-LongitudinalEdgeType", "C02-Libellé court"));

	addMapElement(DATA, "netWeight", filterDecimalZero( getSimpleValue(oitem, "04CP0213-netWeight") ));
	addMapElement(DATA, "netWeightUnit", getLkpValue(oitem, "04CP0214-netWeightUnit", "C03-Code unité non standard"));

	addMapElement(DATA, "UnderloadDeformation", getLkpValue(parentProd, "05PC0294-UnderloadDeformation", "C02-Libellé"));
	addMapElement(DATA, "ThermalResistance", "NPD");
	addMapElement(DATA, "EuroclasseClassification", getLkpValue(parentProd, "05PC0305-EuroclasseClassification", "C01-Code"));
	addMapElement(DATA, "ENReference", getLkpValue(parentProd, "05PG0245-ENReference", "C01-N° de norme"));
	addMapElement(DATA, "NFCertified", getSimpleValue(parentProd, "05PG0248-NFCertified"));

	addMapElement(DATA, "Assembly", getLkpValue(oitem, "06DN0411-Assembly", "C01-Code"));
	addMapElement(DATA, "Stacking", getLkpValue(oitem, "06DN0412-Stacking", "C01-Code"));
	addMapElement(DATA, "Support",  getLkpValue(oitem, "06DN0413-Support",  "C01-Code"));
	addMapElement(DATA, "Covering", getLkpValue(oitem, "06DN0414-Covering", "C01-Code"));
	addMapElement(DATA, "Hooping",  getLkpValue(oitem, "06DN0415-Hooping",  "C01-Code"));
	addMapElement(DATA, "TotalQuantityOfNextLowerLevel", getSimpleValue(oitem, "06DN0407-TotalQuantityOfNextLowerLevel"));

	addMapElement(DATA, "handlingInstructions", getHandlingInstructions(oitem));

	addMapElement(DATA, "USER_STATUS", "");
	addMapElement(DATA, "SEQ_ID", "");

	addMapElement(DATA, "CECertified", getSimpleValue(parentProd, "05PG0249-CECertified"));
	addMapElement(DATA, "LabelingHealth", getLkpValue(parentProd, "08IE0653-LabelingHealth", "C01-Classement"));
	addMapElement(DATA, "CERTIFICATENF", "");
	addMapElement(DATA, "ENPRODUCTTYPE", getLkpValue(parentProd, "05PG0246-ENProductType", "C01-Type de produit selon la norme en code"));
	addMapElement(DATA, "RealBoardThickness", getSimpleValue(parentProd, "04CP0087-RealBoardThickness"));

	// production site name
	// var productionSite = getLkpValue( parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C01-Code");
	var productionSite = getLkpValue( parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C07-SAP PlantCode");
	addMapElement(DATA, "ProductionSite", productionSite);
	var siteName= getLkpValue( parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C02-Libellé");
	addMapElement(DATA, "ProductionSiteName", siteName);

	addMapElement(DATA, "MechanicalResistanceToInflection", getSimpleValue(parentProd, "05PC0285-MechanicalResistanceToInflection"));
	addMapElement(DATA, "DOPNumber", getSimpleValue(parentProd, "05PG0767-DOPNumber"));
	addMapElement(DATA, "ProductTypeID", getSimpleValue(parentProd, "05PG0768-ProductTypeID"));
	addMapElement(DATA, "ProductUsage", getSimpleValue(parentProd, "05PG0770-ProductUsage"));
	addMapElement(DATA, "OrganismNotified", getSimpleValue(parentProd, "05PG0773-OrganismNotified"));
	addMapElement(DATA, "YearOfFirstCEMarking", getSimpleValue(parentProd, "05PG0795-YearOfFirstCEMarking"));
	addMapElement(DATA, "DOPUrl", getSimpleValue(parentProd, "05PG0769-DOPUrl"));
	return DATA;
}

function canExport(oitem){
    // Catalogue C015-Cloisons / Honeycomb Partitions
    if (!oitem.getPrimaryKey().substring(1,4).contains("015")) {
      return false;
    }

    // Les items de type Pitem
    if (getItemLevel(oitem) < 3){
      return false;
    }

    // les items référencés sur les sites de fabrication 02FR0063-ProductionSite
    // [01] - CARPENTRAS
    // [02] - AUNEUIL
    // [04] - NICOLE
    if ( !isInProductionSite(oitem, "[01-1] - CARPENTRAS") &&
         !isInProductionSite(oitem, "[02-1] - AUNEUIL") &&
         !isInProductionSite(oitem, "[04-1] - NICOLE") ){
      return false;
    }

	// Que les items éligibles à la publication dans SAP et possédant le material number
	var strMaterialNumber="";
	var oItemMaterialNumberEn = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,"01AC0664-MaterialNumber");
	if(oItemMaterialNumberEn!=null) {
		strMaterialNumber = checkString(oItemMaterialNumberEn[0].getEntryNodeValue(),"");
	}
	//
	var strPublishedIntoSAP="";
	var oItemPublishedIntoSAPEn = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,"01AC0775-PublishedIntoSAP");
	if(oItemPublishedIntoSAPEn!=null) {
		strPublishedIntoSAP = checkString(oItemPublishedIntoSAPEn[0].getEntryNodeValue(),"");
	}
	
	if(strPublishedIntoSAP=="true" && strMaterialNumber=="") {
      return false;
	}
	
    // Les items ayant le statut 01AC0548-Status = ACTIF 
    if (!getSimpleValue(oitem,"01AC0548-Status").contains("[ACTIVE] - Actif")) {
      return false;
    }

    return true;
}

function getData(oitem){
  var dataGrp = [];
  var parentProd  = getPublishingItemAtLevel(oitem,"Prod" );
  var productionSiteGroup = getEn(parentProd,"ProductionSiteGroup");
  if(productionSiteGroup==null) { return dataGrp; }
  var e;
  catchError(e) {
    for(var i=0; i<productionSiteGroup.size(); i++) {
      // var fProductionSite = getEn(oitem,"ProductionSiteGroup#"+i+"/02FR0063-ProductionSite")[0].getEntryNodeValue();
      dataGrp.add(getDataSite(oitem, i));
    }
  }
  if (e!=null){
    err.writeln("Error on "+oitem.getPrimaryKey()+", "+e); 
  }
  return dataGrp;
}

function getCloisonsEtiquettesXML(oitem){
    if(!canExport(oitem)) {
      return "<!-- no cloisons_etiquettes_export -->";
    }
    var dataGrp = getData(oitem);
    if(dataGrp==null ||dataGrp.size()<1 ) {
      return "<!-- no cloisons_etiquettes_export -->";
    }
    var xml = "";
    for(var i=0; i<dataGrp.size(); i++) {
    	xml = concat(xml , "<group name=\"cloisons_etiquettes_export\">", buildMapElementXML(dataGrp[i]), "</group>");
    }
    return xml;
}

function getCloisonsEtiquettesFullCSV(){
    var oitem;
    var csv = "";
    var headerDone = false;
    forEachCtgItem("C015-Cloisons - Honeycomb Partitions",oitem) {
        var e;
        catchError(e) {
            if(!canExport(oitem)) {
                continue;
            }
            logDebug("Export "+oitem.getPrimaryKey());
            var dataGrp = getData(oitem);
            for(var i=0; i<dataGrp.size(); i++) {
                if (!headerDone){
                    csv = csv + buildMapElementCSV(dataGrp[i], true);
                    headerDone = true;
                }
                csv = csv + buildMapElementCSV(dataGrp[i], false);
            }
        } 
        if (e!=null) { 
            // out.writeln(oitem.getPrimaryKey()+" "+e);
            // e=null;
        }
    }
    return csv;
}
