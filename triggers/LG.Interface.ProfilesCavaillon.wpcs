//
// Pour les profilés de l'usine de cavaillon (juillet 2009)
// export XML ou fichier plat (cf report script)
//

//
// technical utils functions
//

function addMapElement(mapEl, key, val) {
    getScriptByPath("/scripts/triggers/LG.Library.Utils")
          .getFunctionByName("addMapElement").invoke(mapEl, key, val);
}

function buildMapElementXML(mapEl) {
    return getScriptByPath("/scripts/triggers/LG.Library.Utils")
              .getFunctionByName("buildMapElementXML").invoke(mapEl);
}

function buildMapElementCSV(mapEl, processKey){
    return getScriptByPath("/scripts/triggers/LG.Library.Utils")
              .getFunctionByName("buildMapElementCSV").invoke(mapEl, processKey);
}

//
// functional utils functions
//

function getSimpleValue(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getSimpleValue").invoke(oitem, nodeName);
}

function getDateValue(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getDateValue").invoke(oitem, nodeName, "dd/MM/yyyy HH:mm:ss");
}

function getLkpValue(item,nodeName,lkpColumn) {
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getLkpValue").invoke(item,nodeName,lkpColumn);
}

function getPublishingItemAtLevel(oitem,sLevel){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getPublishingItemAtLevel").invoke(oitem, sLevel);
}

function getItemLevel(oitem){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getItemLevel").invoke(oitem);
}

function getEn(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
               .getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,nodeName);
}

function getBooleanValue(item, nodeName, ifTrue, ifFalse, ifDefault){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
               .getFunctionByName("getBooleanValue").invoke(item, nodeName, ifTrue, ifFalse, ifDefault);
}

//
// specific business functions
//

// findSitePath
// @desc return the attribute path of a production site from its code
// @param oitem the item
// @param siteCode the site code in 02FR0063-ProductionSite
// @return the attribute path eg "ProductionSiteGroup#3"
function findSitePath(oitem, siteCode){
  var productionSiteGroup = getEn(oitem,"ProductionSiteGroup");
  if(productionSiteGroup==null) { return null; }
  for(var i=0; i<productionSiteGroup.size(); i++) {
    var fProductionSite = getEn(oitem,"ProductionSiteGroup#"+i+"/02FR0063-ProductionSite")[0].getEntryNodeValue();
    if (fProductionSite.contains(siteCode)){
      return "ProductionSiteGroup#"+i;
    }
  }
  return null; 
}

function isInProductionSite(oitem, siteName){
  var productionSiteGroup = getEn(oitem,"ProductionSiteGroup");
  if(productionSiteGroup==null) { return false; }
  for(var i=0; i<productionSiteGroup.size(); i++) {
    var fProductionSite = getEn(oitem,"ProductionSiteGroup#"+i+"/02FR0063-ProductionSite")[0].getEntryNodeValue();
    if (fProductionSite.contains(siteName)){
      return true;
    }
  }
  return false;
}

function isInCatalog(item){
  var channel = getEn(item,"ChannelOfDistributionGroup");
  if(channel!=null) {
    var i;
    for(i=0;i<channel.size();i++) {
      var o = getEn(item,"ChannelOfDistributionGroup#"+i+"/06DN0422-ChannelOfDistribution")[0];
      if(o!=null) {
        if(o.getEntryNodeValue()=="[01] - Negoce") {
          if(getSimpleValue(item,"ChannelOfDistributionGroup#"+i+"/06DN0346-IsInCatalog")=="true") {
            return true;
          }
        }
      }
    }
  }
  return false;
}

// 01AC0012-LongName
// max 4 occurrences stockées dans le même attribut avec le séparateur suivant @#@
function getAssociatedProducts(prod){
  var s = "";
  var associatedProductsGroup = getEn(prod,"AssociatedProductsGroup");
  if(associatedProductsGroup!=null) {
    var i;
    for(i=0;i<associatedProductsGroup.size();i++) {
      if (i==4) {break;}
      var enAssociatedProducts = getEn(prod,"AssociatedProductsGroup#"+i+"/07MO0468-AssociatedProducts");
      if(enAssociatedProducts!=null) {
        var itemLinkedToAssociatedProducts = prod.getItemUsingEntryRelationshipAttrib(enAssociatedProducts[0].getEntryNodeExactPath());
        if(i == associatedProductsGroup.size()-1) {
          s = s + getSimpleValue(itemLinkedToAssociatedProducts,"01AC0012-LongName");
        }
        else {
          s = s + getSimpleValue(itemLinkedToAssociatedProducts,"01AC0012-LongName") + "@#@";
        }
      }
    }
  }
  return s;
}

// 06DN0436-handlingInstructions
// Col 3 de L048-Conditions stockage - Handling instructions
// max 7 occurrences stockées dans le même attribut avec le séparateur suivant @#@
function getHandlingInstructions(oitem){
  var s = "";
  var lkp = getLkpByName("L048-Conditions stockage - Handling instructions");
  var handlingInstructions = getEn(oitem,"06DN0436-handlingInstructions");
  if (handlingInstructions!=null && handlingInstructions.size()>0) {
    for(var i=0;i<handlingInstructions.size();i++) {
      if (i==7) {break;}
      var en = handlingInstructions[i].getEntryNodeValue();
      if (en!=null){
        s = s + lookupValues(lkp,en)[1];
        if(i < handlingInstructions.size()-1) {
          s = s +"@#@";
        }
      }
    }
  }
  return s;
}

//

function getDataSite(oitem,productionSiteGroupID){
	var parent = oitem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
	var parentBUnit = getPublishingItemAtLevel(oitem,"BUnit");
	var parentProd  = getPublishingItemAtLevel(oitem,"Prod" );
	var DATA = [];
	//
	var strMaterialNumber = getSimpleValue(oitem, "01AC0664-MaterialNumber");
	if(strMaterialNumber!=null && strMaterialNumber!=""){
		var iMaterialNumber = strMaterialNumber.length();
		for(var k=0;k<iMaterialNumber;k++) {
			var testzero=strMaterialNumber.startsWith("0");
			if(testzero==true) {
				strMaterialNumber=substring(strMaterialNumber,1,strMaterialNumber.length());
			}
		}
	}
	//
	var strParentMaterialNumber = getSimpleValue(parent, "01AC0664-MaterialNumber");
	if(strParentMaterialNumber!=null && strParentMaterialNumber!=""){
		var iMaterialNumber = strParentMaterialNumber.length();
		for(var k=0;k<iMaterialNumber;k++) {
			var testzero=strParentMaterialNumber.startsWith("0");
			if(testzero==true) {
				strParentMaterialNumber=substring(strParentMaterialNumber,1,strParentMaterialNumber.length());
			}
		}
	}
	
	
	// production site attributes
	var siteCode= getLkpValue(parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C01-Code");
	var siteSAPCode= getLkpValue(parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C07-SAP PlantCode");
	if(siteSAPCode!="") {
		var productionLine= getLkpValue( parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C05-Process");
		// Order is not reliable: find the right path in Prod from SiteCode 
		var prodSitePath = findSitePath(parentProd, siteCode);
		var siteName= getLkpValue(parentProd ,"ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite" , "C02-Libellé");
		if(siteName!=null && siteName!="") {
			siteName = replaceString(siteName,"USINE DE ","");
		}
	
		//
		addMapElement(DATA, "ERPCode", oitem.getPrimaryKey());
		addMapElement(DATA, "Level", getItemLevel(oitem));
		addMapElement(DATA, "tradeItemUnitDescriptor", getLkpValue(oitem, "01AC0020-UnitDescriptor","C01-Code"));
		addMapElement(DATA, "ItemNumber", strMaterialNumber);
		addMapElement(DATA, "LabelName", getSimpleValue(parentProd, "01AC0017-LabelName1")); 
		addMapElement(DATA, "brandName", getLkpValue(parentProd, "01AC0036-brandName","C07-Logo")); 
		addMapElement(DATA, "CommercialThickness", toString(toDouble(getSimpleValue(parentProd, "04CP0080-CommercialThickness"))*10));
		addMapElement(DATA, "Width", getSimpleValue(parentProd, "04CP0095-Width"));
		addMapElement(DATA, "MeanWingHeight", getSimpleValue(parentProd, "04CP0140-MeanWingHeight"));
		addMapElement(DATA, "WingHeight1", getSimpleValue(parentProd, "04CP0142-WingHeight1"));
		addMapElement(DATA, "WingHeight2", getSimpleValue(parentProd, "04CP0144-WingHeight2")); 
		addMapElement(DATA, "EuropeanProductStandardsReference", getLkpValue(parentProd, "05PG0245-ENReference","C01-N° de norme"));
		addMapElement(DATA, "IsCECertified", getSimpleValue(parentProd, "05PG0249-CECertified"));
		addMapElement(DATA, "Shape", getLkpValue(parentProd, "04CP0184-Shape", "C00-DisplayName")); 
		addMapElement(DATA, "EuroclasseClassificationOfFireResistance", getLkpValue(parentProd, "05PC0305-EuroclasseClassification", "C01-Code")); 
		addMapElement(DATA, "AssociatedProducts", getAssociatedProducts(parentProd));
		addMapElement(DATA, "handlingInstructions", getHandlingInstructions(oitem)); 
		addMapElement(DATA, "GTIN", getSimpleValue(oitem, "01AC0042-GTIN"));
		addMapElement(DATA, "Length", getSimpleValue(parentBUnit, "04CP0103-Length"));
		addMapElement(DATA, "LengthUnits", getLkpValue(parentBUnit, "04CP0104-LengthUnits", "C03-Code unité non standard"));  
		addMapElement(DATA, "GTINParent", getSimpleValue(parent, "01AC0042-GTIN"));  
		addMapElement(DATA, "ParentItemNumber", strParentMaterialNumber);
		addMapElement(DATA, "ItemCAMReference", strMaterialNumber);
		addMapElement(DATA, "CAMPackingCodeKey", getSimpleValue(parentProd, "04CP0843-CoilWidth"));
		addMapElement(DATA, "PackagingItemDescription", getSimpleValue(oitem, "01AC0741-PackagingItemDescription"));
		addMapElement(DATA, "totalQuantityOfNextLowerLevelTradeItem", getSimpleValue(oitem, "06DN0407-TotalQuantityOfNextLowerLevel"));
		addMapElement(DATA, "netWeight", getSimpleValue(oitem, "04CP0213-netWeight"));
		addMapElement(DATA, "netWeightUnit", getLkpValue(oitem, "04CP0214-netWeightUnit", "C03-Code unité non standard"));
		addMapElement(DATA, "IsNFCertified", getBooleanValue(parentProd, "05PG0248-NFCertified", "true", "false", ""));
		addMapElement(DATA, "IdSupplierAbbreviated", getLkpValue(parentProd, "ProductionSiteGroup#"+productionSiteGroupID+"/02FR0063-ProductionSite","C06-Id Site(CSTB)"));
		addMapElement(DATA, "NumberOfBundlesBylayer", getSimpleValue(oitem, "06DN0409-quantityOfTradeItemsInACompleteLayer"));
		addMapElement(DATA, "NumberOfLayers", getSimpleValue(oitem, "06DN0403-quantityOfCompleteLayersInATradeItem"));
		addMapElement(DATA, "ProductId", getSimpleValue(parentProd, "01AC0042-GTIN"));
		addMapElement(DATA, "Creationdate", getDateValue(oitem, "01AC0006-CreationDate"));
		addMapElement(DATA, "Updatedate", getDateValue(oitem, "01AC0004-LastUpdate"));
		addMapElement(DATA, "IsInCatalog", isInCatalog(oitem));
		addMapElement(DATA, "Status", getSimpleValue(oitem, "01AC0548-Status"));
		addMapElement(DATA, "USER_STATUS", "");
		addMapElement(DATA, "SEQ_ID", "");
		addMapElement(DATA, "DOPNumber", getSimpleValue(parentProd, "05PG0767-DOPNumber"));
		addMapElement(DATA, "ProductTypeID", getSimpleValue(parentProd, "05PG0768-ProductTypeID"));
		addMapElement(DATA, "ProductUsage", getSimpleValue(parentProd, "05PG0770-ProductUsage"));
		addMapElement(DATA, "OrganismNotified", getSimpleValue(parentProd, "05PG0773-OrganismNotified"));
		addMapElement(DATA, "YearOfFirstCEMarking", getSimpleValue(parentProd, "05PG0795-YearOfFirstCEMarking"));
		addMapElement(DATA, "DOPUrl", getSimpleValue(parentProd, "05PG0769-DOPUrl"));
		addMapElement(DATA, "PRODUCTIONSITE", siteSAPCode);
		addMapElement(DATA, "PRODUCTIONSITENAME", siteName);
		addMapElement(DATA, "EUPCode", getSimpleValue(parentProd, "ProductionSiteGroup#"+productionSiteGroupID+"/02FR0656-EUPCode"));
		addMapElement(DATA, "Galvanised", getSimpleValue(parentProd, "04CP0188-Galvanised"));
		addMapElement(DATA, "CertificateNF", getLkpValue(parentProd, "ProductionSiteGroup#"+productionSiteGroupID+"/02FR0056-CertificateNF","C01-N°du certificat NF"));
		//
		return DATA;
	}
	else {
		return null;
	}
}

function canExport(oitem){

    // Catalogue C025 - Profilés
    if (!oitem.getPrimaryKey().substring(1,4).contains("025")) {
      return false;
    }

    // Les items de type Bunit et Pitem( tous niveaux )
    if (getItemLevel(oitem)==1){
      return false;
    }

    // les items référencés sur le site de fabrication 02FR0063-ProductionSite = 26 - Cavaillon
    if ( !isInProductionSite(oitem, "[26] - CAVAILLON") && !isInProductionSite(oitem, "[01-2] - CARPENTRAS") && !isInProductionSite(oitem, "[02-2] - AUNEUIL")  && !isInProductionSite(oitem, "[25] - CAIRANNE")) {
      return false;
    }

    // Les items ayant le statut 01AC0548-Status = ACTIF 
    if (!getSimpleValue(oitem,"01AC0548-Status").contains("[ACTIVE] - Actif")) {
      return false;
    }

	// Que les items éligibles à la publication dans SAP et possédant le material number
	var strMaterialNumber="";
	var oItemMaterialNumberEn = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,"01AC0664-MaterialNumber");
	if(oItemMaterialNumberEn!=null) {
		strMaterialNumber = checkString(oItemMaterialNumberEn[0].getEntryNodeValue(),"");
	}
	//
	var strPublishedIntoSAP="";
	var oItemPublishedIntoSAPEn = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,"01AC0775-PublishedIntoSAP");
	if(oItemPublishedIntoSAPEn!=null) {
		strPublishedIntoSAP = checkString(oItemPublishedIntoSAPEn[0].getEntryNodeValue(),"");
	}
	
	if(strPublishedIntoSAP=="true" && strMaterialNumber=="") {
      return false;
	}
	
    // Date de fin de validité 06DN0427-ValidToDate est null
    if (checkString(getSimpleValue(oitem,"06DN0427-ValidToDate"),"")!="") {
      // return false;
    }

    return true;
}

///////
///////

function getData(oitem){
	var dataGrp = [];
	var parentProd  = getPublishingItemAtLevel(oitem,"Prod" );
	var productionSiteGroup = getEn(parentProd,"ProductionSiteGroup");
	if(productionSiteGroup==null) { 
		return dataGrp; 
	}
	var e;
	catchError(e) {
		for(var i=0; i<productionSiteGroup.size(); i++) {
			// var fProductionSite = getEn(oitem,"ProductionSiteGroup#"+i+"/02FR0063-ProductionSite")[0].getEntryNodeValue();
			var data = getDataSite(oitem, i);
			if(data!=null) {
				dataGrp.add(data);
			}
		}
	}
	if (e!=null){
	    err.writeln("Error on "+oitem.getPrimaryKey()+", "+e); 
	}
	return dataGrp;
}

function getEtiquetteXML(oitem){
    if(!canExport(oitem)) {
      return "<!-- no cavaillon_export -->";
    }
	
    var dataGrp = getData(oitem);
    if(dataGrp==null ||dataGrp.size()<1 ) {
      return "<!-- no cavaillon_export -->";
    }
    var xml = "";
    for(var i=0; i<dataGrp.size(); i++) {
      xml = concat(xml,"<group name=\"cavaillon_export\">",buildMapElementXML(dataGrp[i]), "</group>");
    }
    return xml;
}

function getFullCSV(){
	var oitem;
    var csv = "";
    var headerDone = false;
    forEachCtgItem("C025-Profilés - Metal profiles",oitem) {
	   var e;
		catchError(e) {
			if(!canExport(oitem)) {
				continue;
			}
			logDebug("Export "+oitem.getPrimaryKey());
			var dataGrp = getData(oitem);
			for(var i=0; i<dataGrp.size(); i++) {
				if (!headerDone){
					csv = csv + buildMapElementCSV(dataGrp[i], true);
					headerDone = true;
				}
				csv = csv + buildMapElementCSV(dataGrp[i], false);
			}
		} 
		if (e!=null) { 
			// out.writeln(oitem.getPrimaryKey()+" "+e);
			// e=null;
		}
    }
    return csv;
}
