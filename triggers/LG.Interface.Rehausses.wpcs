//
// Interfacage avec la base etiquettes TMA100280
// export XML ou fichier plat
// catalogue "C130-Rehausses -"
//

//
// technical utils functions
//

function addMapElement(mapEl, key, val) {
    getScriptByPath("/scripts/triggers/LG.Library.Utils")
          .getFunctionByName("addMapElement").invoke(mapEl, key, val);
}

function buildMapElementXML(mapEl) {
  return getScriptByPath("/scripts/triggers/LG.Library.Utils")
              .getFunctionByName("buildMapElementXML").invoke(mapEl);
}

function buildMapElementCSV(mapEl, processKey){
    return getScriptByPath("/scripts/triggers/LG.Library.Utils")
              .getFunctionByName("buildMapElementCSV").invoke(mapEl, processKey);
}

//
// functional utils functions
//

function getSimpleValue(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getSimpleValue").invoke(oitem, nodeName);
}

function getDateValue(oitem, nodeName){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getDateValue").invoke(oitem, nodeName, "dd/MM/yyyy HH:mm:ss");
}

function getLkpValue(oItem,nodeName,lkpColumn) {
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getLkpValue").invoke(oItem,nodeName,lkpColumn);
}

function getPublishingItemAtLevel(oitem,sLevel){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getPublishingItemAtLevel").invoke(oitem, sLevel);
}

// filtre des décimaux finissant par '.0'  
function filterDecimalZero(str){
    if(str!=null && str!="") {
		 if(str.endsWith(".0")) {
		   return  replace(str, ".0","");
		 }
	}
    return str;
}


//

function getData(oitem){
	var parent = oitem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
	var parentBUnit = getPublishingItemAtLevel(oitem,"BUnit");
	var parentProd  = getPublishingItemAtLevel(oitem,"Prod" );
	var DATA = [];
	//
	var strMaterialNumber = getSimpleValue(oitem, "01AC0664-MaterialNumber");
	if(strMaterialNumber!=null && strMaterialNumber!=""){
		var iMaterialNumber = strMaterialNumber.length();
		for(var k=0;k<iMaterialNumber;k++) {
			var testzero=strMaterialNumber.startsWith("0");
			if(testzero==true) {
				strMaterialNumber=substring(strMaterialNumber,1,strMaterialNumber.length());
			}
		}
	}
	//
	addMapElement(DATA, "PROD_ID", getSimpleValue( oitem ,"01AC0044-ERPCode")) ;
	addMapElement(DATA, "CODE_GEMMS", strMaterialNumber) ;
	addMapElement(DATA, "ItemNumber", strMaterialNumber) ;
	addMapElement(DATA, "ItemCAMReference", strMaterialNumber) ;
	addMapElement(DATA, "CAMPackingCode", "");
	addMapElement(DATA, "CreationDate", getDateValue( oitem ,"01AC0006-CreationDate")) ;
	addMapElement(DATA, "LastUpdate", getDateValue( oitem ,"01AC0004-LastUpdate")) ;
	addMapElement(DATA, "Covering", getLkpValue( oitem ,"06DN0414-Covering", "C01-Code"));
	addMapElement(DATA, "TotalQuantityOfNextLowerLevel", getSimpleValue( oitem ,"06DN0407-TotalQuantityOfNextLowerLevel")) ;
	addMapElement(DATA, "LabelName1", getSimpleValue( parentProd ,"01AC0017-LabelName1")) ;
	addMapElement(DATA, "LabelName2", getSimpleValue( parentProd ,"01AC0018-LabelName2")) ;
	addMapElement(DATA, "brandName", getLkpValue( parentProd ,"01AC0036-brandName","C07-Logo")) ;
	addMapElement(DATA, "RealThickness", filterDecimalZero(getSimpleValue( parentProd ,"04CP0082-RealThickness"))) ;
	addMapElement(DATA, "ProfileRaising", getLkpValue( parentProd ,"04CP0178-ProfileRaising", "C03-Code abrégé"));
	addMapElement(DATA, "Width", filterDecimalZero(getSimpleValue( parentProd ,"04CP0095-Width"))) ;
	addMapElement(DATA, "Length", filterDecimalZero(getSimpleValue( parentBUnit ,"04CP0103-Length"))) ;
	addMapElement(DATA, "netWeight", getSimpleValue( oitem ,"04CP0213-netWeight")) ;
	addMapElement(DATA, "netWeightUnit", getLkpValue( oitem ,"04CP0214-netWeightUnit","C03-Code unité non standard")) ;
	addMapElement(DATA, "PackagingItemDescription", getSimpleValue( oitem ,"01AC0741-PackagingItemDescription" )) ;
	addMapElement(DATA, "GTIN", getSimpleValue(parentBUnit, "01AC0042-GTIN"));

	return DATA;
}

function canExport(oitem){
    // Catalogue 
    if (!oitem.getPrimaryKey().substring(1,4).contains("130")) {
      return false;
    }

    // Que le PItem (?)
    if (!oitem.getPrimaryKey().contains("I")) {
      return false;
    }

	// Que les items éligibles à la publication dans SAP et possédant le material number
	var strMaterialNumber="";
	var oItemMaterialNumberEn = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,"01AC0664-MaterialNumber");
	if(oItemMaterialNumberEn!=null) {
		strMaterialNumber = checkString(oItemMaterialNumberEn[0].getEntryNodeValue(),"");
	}
	//
	var strPublishedIntoSAP="";
	var oItemPublishedIntoSAPEn = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath").invoke(oitem,"01AC0775-PublishedIntoSAP");
	if(oItemPublishedIntoSAPEn!=null) {
		strPublishedIntoSAP = checkString(oItemPublishedIntoSAPEn[0].getEntryNodeValue(),"");
	}
	
	if(strPublishedIntoSAP=="true" && strMaterialNumber=="") {
      return false;
	}
	
    // Les items ayant le statut 01AC0548-Status = ACTIF 
    if (!getSimpleValue(oitem,"01AC0548-Status").contains("[ACTIVE] - Actif")) {
      return false;
    }

    return true;
}

///////
///////

function getEtiquetteXML(oitem){
    if(!canExport(oitem)) {
      return "<!-- no rehausses_etiquettes_export -->";
    }
    var data = getData(oitem);
    return concat("<group name=\"rehausses_etiquettes_export\">", buildMapElementXML(data), "</group>");
}

function getFullCSV(){
  var oitem;
  var csv = "";
  var headerDone = false;
  forEachCtgItem("C130-Rehausses -",oitem) {
    if(!canExport(oitem)) {
      continue;
    }
    logDebug("Export "+oitem.getPrimaryKey()); 
    var data = getData(oitem);
    if (!headerDone){
      csv = csv + buildMapElementCSV(data, true);
      headerDone = true;
    }
    logDebug("processing " + oitem.getPrimaryKey());
    csv = csv + buildMapElementCSV(data, false);
  }
  return csv;
}
