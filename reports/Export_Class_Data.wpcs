//	FONCTION QUI INITIALISE LA HASH MAP DE VARIABLES GLOBALES
function initGlobals(){ 

	//On déclare la hash map
    var hmGlobals = [];
	//On récupère des fonctions qui sont stockées dans des librairies de fonctions,
	//Elles seront utiles plus tard dans le programme
	//On les stocke dans une hash map de variables globales
    hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"] = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath");
    hmGlobals["FN_GET_ITEM_TYPE"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getItemType");
    hmGlobals["FN_GET_CHILD_ITEMS"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getChildItems");
    hmGlobals["FN_GET_PARENT_ITEM"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getParentItem");
    hmGlobals["FN_GET_CONST"]=getScriptByPath("/scripts/triggers/LG.Library.Const").getFunctionByName("getConst");
    hmGlobals["FN_GET_ENTRY_NODE_AT_LEVEL"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodeAtLevel");
    hmGlobals["FN_GET_PARENT_AT_LEVEL"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getParentAtLevel");
    hmGlobals["FN_GET_STATUS"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getStatus");
	//Recupere la constant kheops "QUOT" de la table L902-KheopsConstants et la stocke dans la variable globale
    hmGlobals["QUOT"] = lookupValues(getLkpByName("L902-KheopsConstants"),"QUOT")[0];
    return hmGlobals;
}

//	FONCTION QUI RETOURNE LE PARENT D'UN ITEM	
function getParentItem(hmGlobals,item){
	//On retourne l'objet item situé à l'adresse contenue dans la varible globale "PARENT_RELATIONSHIP_FIELD"
	return item.getItemUsingEntryRelationshipAttrib(hmGlobals["PARENT_RELATIONSHIP_FIELD"]);
}

//	FONCTION QUI RETOURNE LES PARENTS-GRANDS PARENTS D'UN ITEM	(tous les ancètres de l'item)
function getParentsItem(hmGlobals,item,hmParents){
	//Ajoute l'item/parent/grandparent à la hashmap de Parents (selon l'étape de récursivité sur la fonction)
	hmParents.add(item);
	//On appelle la fonction getParentItem décrite ci dessus et qui retourne le parent d'un item 
	//on stocke le résultat dans parent
	var parent = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);
	if(parent!=null) {//Si il y a un parent on effectue une récursivité avec comme argument parent (pour trouver les grand-parents)
		return(getParentsItem(hmGlobals,parent,hmParents));
	}
	else {//sinon on retourne hmParents
		return(hmParents);
	}
}

//	FONCTION QUI RETOURNE LE TYPE D'UN ITEM	
//La méthode associée à la variable hmGlobals["FN_GET_ITEM_TYPE"] (ici il s'agit de getItemType())
//est exécutée sur l'objet item passé en parametres via la fonction invoke()
function getType(hmGlobals,item){
	return hmGlobals["FN_GET_ITEM_TYPE"].invoke(item);
}

//	FONCTION QUI RETOURNE LES PARENTS DE L'ITEM A UN NIVEAU DONNE (PROD, BUNIT, PITEM...)
function getParentAtLevel(hmGlobals,item,iLevel) {
	if(iLevel==0) {//Si le niveau pour récupérere la valeur de l'attribut est au niveau courant on retourne l'item
		return(item);
	}
	else {//On appelle la fonction getParentItem décrite ci dessus et qui retourne le parent d'un item 
		//on stocke le résultat dans parentItem
		var parentItem = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);
		if(parentItem==null) {//si l'item n'a pas de parent
			return(null);//on retourne null
		}
		else {//sinon on recherche les parents au niveau supérieur (PROD, BUNIT, PITEM...) par recursivite
			return(getParentAtLevel(hmGlobals,parentItem,iLevel+1));
		}
	}
}

//	FONCTION QUI RETOURNE LE NOEUD (attribut de l'item) EN FONCTION DU CHEMIN 
//la méthode associée à la variable hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"] (ici il s'agit de getEntryNodesFromAttrPath())
//est exécutée sur item et sNodeName via la fonction invoke()
function getEn(hmGlobals, item, sNodeName){
	return hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"].invoke(item,sNodeName);
}

//	FONCTION QUI RETOURNE LA VALEUR DU NOEUD (valeur attribut de l'item) EN FONCTION DU CHEMIN 
//Idem fonction précédente sauf que l'on récupère la valeur correspondand au noeud spécifié
function getValue(hmGlobals, item, sNodeName){
	return hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"].invoke(item,sNodeName)[0].getEntryNodeValue();
}

//	FONCTION QUI RETOURNE LE PARENT DE PLUS HAUT NIVEAU		
function getHigherParent(hmGlobals , hmParents, sAttrPath){
	var i;
	for(i=0;i<hmParents.size();i++) {//On boucle sur la hashmap de parents
		if(getEn(hmGlobals,hmParents[i],sAttrPath)!=null) {//Si la valeur de l'attribut du noeud parent n'est pas nul
			return(hmParents[i]);//On retourne le noeud parent
		}
	}
	return(null);
}

//	FONCTION QUI RECUPERE L'ITEM A UN NIVEAU DONNE
function getItemAtLevel(hmGlobals,item,sLevel){
	if (item==null) {//Si l'item n'existe pas, on retourne la valeur null
		return null;
	}
	else
	{
		if (getType(hmGlobals,item)==sLevel) //Si le type de l'item correspond au niveau demandé, on retourne l'item
		{
			return item;
		}
		
		var oParent = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);//Sinon on récupère le parent de l'item
		return getItemAtLevel(hmGlobals,oParent,sLevel);//Et on regarde si il correspond au niveau demandé par recursivité
	}
}

//	FONCTION QUI RECUPERE LA PLUS GRANDE CLEF DE LA HASH MAP (= taille max de la hashmap pour pouvoir boucler dessus)
function getMaxHm(hm) {
	var oKey;
	var oValue;
	var max = 0;
	forEachHmElement(hm,oKey,oValue) {//Pour chaque couple (Okey, oValue) de la hash map
		if(toInteger(oKey)>max) {//Si la conversion en int de oKey est supérieure a max
			max = toInteger(oKey);//On place la valeur de oKey dans max
		}	
	}	
	return(max);//On retourne la clef la plus grande de la hashmap
}

//	FONCTION QUI CONSTRUIT LE FICHIER CSV
function buildSAPCSV(hmGlobals,hm) {
	var i;
	var csv = "";
	var val ="";
	for(i=1;i<getMaxHm(hm);i++) {//Pour chaque valeur inférieure à la valeur max de la hashmap
		if(hm[i]==null) {//Si la valeur contenue dans la hashmap est a NULL
			val = "";//La variable val prend pour valeur ""(vide)
		}
		else {//Sinon on copie la valeur de la hashmap dans val
			val = toString(hm[i]);
			if(val.contains("null")==true) {//Si val contient la chaine de caractères null
				val = "";//La variable val pren pour valeur ""(vide)
			}
		}
		//csv = csv  + escapeForCSV(val) + ",";
		//On remplit la variable csv avec les différentes valeurs en respectant la syntaxe du format
		//Exemple : "val1","val2","val3"...
		csv = csv  + hmGlobals["QUOT"] + val + hmGlobals["QUOT"] + ";";
	}
	//On réitère l'opération pour la dernière valeur de la hashmap (valeur max) car non prise en compe dans la boucle for (i<MaxHm(hm))
	if(hm[i]==null) {
			val = "";
		}
		else {
			val = toString(hm[i]);
			if(val.contains("null")==true) {
				val = "";
			}
		}
	//csv = csv + escapeForCSV(val);
	csv = csv  + hmGlobals["QUOT"] + val + hmGlobals["QUOT"];
	return(csv);//On renvoie la variable csv qui respecte le format du meme nom
}

// FONCTION QUI RECUPERE LA OU LES VALEURS D'UN ATTRIBUT (champr de la matrice Kheops) POUR UN ITEM DONNE 
function tech(hmGlobals,item,sAttrName,sGroupingName,sLkpName,iLkpRow,sAttrNameGroupingKey,sAttrValGroupingKey,iLevel) {
//- hmGlobals : tableau de variables globales
//- item : item
//- sAttrName : nom de l'attribut (ex : "06DN0346-IsInCatalog")
//- sGroupingName : nom du grouping (ex : "ChannelOfDistributionGroup")
//- sLkpName : nom de la lookup table (ex : "L103-Marque ciale Detenteur - Brand name")
//- iLkpRow : numéro de la colonne de la lookup table (ex : 2)
//- sAttrNameGroupingKey : nom de l’attribut clé du grouping 
//- sAttrValGroupingKey : valeur de l’attribut clé du grouping 
//- iLevel : niveau où récupérer la valeur de l'attribut (de -2 à 4)
	
	var val = [];//tableau des valeurs de sAttrName si c'est un grouping ou un multivalué
	var en;
	var sKey;
	
	//Si on veut la valeur de sAttrName à un niveau différent de celui sur lequel on est
	//On remplace l'item item par celui du niveau désiré  
	if(iLevel!=null) {
		//0 ou null = valeur de l'attribut de l'item au niveau courant,
		//1 = valeur de l'attribut de l'item au niveau Prod,
		//2 = valeur de l'attribut de l'item au niveau BUnit,
		//3 = valeur de l'attribut de l'item au niveau Pitem1,
		//4 = valeur de l'attribut de l'item au niveau Pitem2,
		//-1 = valeur de l'attribut de l'item au niveau du parent,
		//-2 = valeur de l'attribut de l'item au niveau du grand parent
		var sLevel = "";
		if(iLevel ==1 ){//Si le niveau est a 1, sLevel prend la valeur "Prod"
			sLevel = "Prod";
		}
		else if (iLevel == 2) {//Si le niveau est a 2, sLevel prend la valeur "BUnit"
			sLevel = "BUnit";
		}
		else if (iLevel == 3) {//Si le niveau est a 3, sLevel prend la valeur "PItem"
			sLevel = "PItem";
		}
		else if (iLevel < 0) {//Si le niveau est inférieur a 0, on récupère l'attribut chez le parent, grand-parent de l'item
			//item = hmGlobals["FN_GET_PARENT_AT_LEVEL"].invoke(hmGlobals,item,iLevel);
			item = getParentAtLevel(hmGlobals,item,iLevel);
		}
		if(sLevel!="") {//Si la variable sLevel n'est pas vide, on récupère l'item au niveau demandé
			item = getItemAtLevel(hmGlobals,item,sLevel);
		}
	}
	
	//---------------------------------------------------------------------------------------------------------------------
	
	//Si on est dans un grouping
	if(checkString(sGroupingName,"")!=""){
		var myGroup = getEn(hmGlobals,item,sGroupingName);
		if(myGroup!=null) {
			var i;
			//On parcourt le grouping sGroupingName
			for(i=0;i<myGroup.size();i++) {
				//Si on veut récupérer les valeurs de sAttrName sur une occcurrence spéciale
				if(checkString(sAttrNameGroupingKey,"")!="" && checkString(sAttrValGroupingKey,"") != "") {
					//Recherche de l'occurrence tel que sAttrNameGroupingKey = sAttrValGroupingKey
					if(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrNameGroupingKey)==sAttrValGroupingKey) {						
						en = getEn(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
						if(en!=null) {
							//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
							if(iLkpRow!=null && checkString(sLkpName,"")!="") {
								var j;
								for(j=0;j<en.size();j++) {
									//sKey = getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
									sKey = en[j].getEntryNodeValue();
									if(sKey!=null) {
										val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
									}
								}
							}
							//Si on veut simplement la valeur de l'attribut de sAttrName
							else {
								var j;
								for(j=0;j<en.size();j++) {
									//val.add(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName));
									val.add(en[j].getEntryNodeValue());
								}		
							}
						}
					}
				}
				//Si on veut récupérer les valeurs de sAttrName sur toutes les occurrences
				else {
					en = getEn(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
					if(en!=null) {
						//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
						if(iLkpRow!=null && checkString(sLkpName,"")!="") {
							var j;
							for(j=0;j<en.size();j++) {
								//sKey = getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
								sKey = en[j].getEntryNodeValue();
								if(sKey!=null) {
									val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
								}
							}	
						}
						//Si on veut simplement la valeur de l'attribut de sAttrName
						else {
							var j;
							for(j=0;j<en.size();j++) {
								//val.add(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName));
								val.add(en[j].getEntryNodeValue());
							}	
						}
					}
				}
			}
		}
	}
	//Si on n'est pas dans un grouping
	else {
		en = getEn(hmGlobals,item,sAttrName);
		if(en!=null) {
			//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
			if(iLkpRow!=null && checkString(sLkpName,"")!="") {
				var j;
				for(j=0;j<en.size();j++) {
					sKey = en[j].getEntryNodeValue();
					if(sKey!=null) {
						val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
					}
				}	
			}
			//Si on veut simplement la valeur de l'attribut de sAttrName
			else {
				var j;
				for(j=0;j<en.size();j++) {
					val.add(en[j].getEntryNodeValue());
				}	
			}	
		}
	}
	
	//out.writeln(en);
	//out.writeln(val);
	
	//-----------------------------------------------------------------------------------------------------------------------
	
	//CHAINE FINALE DE L'ATTRIBUT
	var myStr = ""; 
	if(val.size()==0) {//Si val est vide myStr prend ma valeur null
		myStr = "null";
	}
	if(val.size()==1) {//Si val contient 1 valeur on convertit la valeur en string et on la place dans myStr
		myStr = toString(val[0]);
	}
	if(val.size()>1) {//Si val contient plus d'une valeur
		var i;
		for(i=0;i<val.size()-1;i++) {//On boucle sur les valeurs contenues dans val[]
			myStr = myStr + toString(val[i]) + "@#@";//On les copie dans myStr en les separant par @#@
		}
		myStr = myStr + toString(val[i]);//on copie la derniere valeur (val.size()) dans myStr car elle n'est pas prise en compte dans la boucle (i<val.size())
	}
	return(myStr);
}

function getItemType2(item,hmGlobals) {
	var itemPK=item.getPrimaryKey();
	var itemType="";
	if (itemPK.contains("P")) {
		itemType="1-Prod";
	}
	else if (itemPK.contains("B")) {
		itemType="2-Bunit";
	}
	else if (itemPK.contains("I")) {
		var itemParentPK=getEn(hmGlobals,item,"99CTL100-ParentItem")[0].getEntryNodeValue();
		var relatedEntryId=checkInt(itemParentPK,0);
		var relatedItemArray=item.getEntryRelatedItemInfo(relatedEntryId);
		var relatedItemPk=checkString(relatedItemArray[1],"");
		if(relatedItemPk!=null && relatedItemPk!="") {
			if (relatedItemPk.contains("B")) {
				itemType="3-Pitem level 1";
			}
			else if (relatedItemPk.contains("I")) {
				itemType="4-Pitem level 2";
			}
		}
	}
	return(itemType);
}

//FONCTION QUI RECUPERE L'ENSEMBLE DES CHAMPS QUI DECRIVENT UN ITEM 
//De nombreuses conditions ternaires sont mises en oeuvre afin de respecter les regles de gestions 
//associees aux differents champs 
function getHmItemBatidataValues(hmGlobals,item, i){

	var hmParents = [];
	hmParents = getParentsItem(hmGlobals,item,hmParents);//Remplissage de la hashmap avec les parents de l'item 
	var hmItemValues = [];
	var type = checkString(getType(hmGlobals,item),"");//Recuperation du type de l'item
	var status =  hmGlobals["FN_GET_STATUS"].invoke(item);//Recuperation du statut de l'item
	var erpcode = item.getPrimaryKey();
	
	// Récupération du nom du catalogue de l'item
	var ctgName = item.getCatalog().getCtgName();
	var ctgCode = substring(ctgName,1,4);
 			
	var MaterialNumber = tech(hmGlobals,item,"01AC0664-MaterialNumber");	
	var AuthorisationGroup = tech(hmGlobals,item,"01AC0667-AuthorisationGroup");
	
	var sGroupingName = "CountryGroup";
	var myGroup = getEn(hmGlobals,item,sGroupingName);
	var country = "";
	var j;
	
	var parentItem;
	var parentPK;
	
	if (erpcode.contains("B") || erpcode.contains("I")) {	
		parentItem = item.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
		parentPK = parentItem.getPrimaryKey(); 			
	}
	
	var ERPProd = ""; 
	var statusProd = ""; 		
	var MaterialType = "";	
	
	logDebug("erpcode :" +erpcode);
	
	if (AuthorisationGroup == "FRSI") {
		if (MaterialNumber != "null" && MaterialNumber != null && MaterialNumber != "" ) {				
			if (i==0) {
				var ZMIXABLE = "";
				
				if (type == "Prod"){  		
					ZMIXABLE = tech(hmGlobals,item,"06DN0663-MixableRange","","ZMIXABLE-Mixable range",0);
					ERPProd = erpcode;
					statusProd = status;
				}	
				if (type == "BUnit"){  	
					ZMIXABLE = tech(hmGlobals,parentItem,"06DN0663-MixableRange","","ZMIXABLE-Mixable range",0);
					ERPProd = parentItem.getPrimaryKey();
					statusProd = hmGlobals["FN_GET_STATUS"].invoke(parentItem);
				}
				if (type == "PItem" ){ 
					if (parentPK.contains("B")) {		
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						ZMIXABLE = tech(hmGlobals,GrandparentItem,"06DN0663-MixableRange","","ZMIXABLE-Mixable range",0);
						ERPProd = GrandparentItem.getPrimaryKey();
						statusProd = hmGlobals["FN_GET_STATUS"].invoke(GrandparentItem);
					} else {	
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						var ArriereGrandparentItem = GrandparentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						ZMIXABLE = tech(hmGlobals,ArriereGrandparentItem,"06DN0663-MixableRange","","ZMIXABLE-Mixable range",0);
						ERPProd = ArriereGrandparentItem.getPrimaryKey();
						statusProd = hmGlobals["FN_GET_STATUS"].invoke(ArriereGrandparentItem);
					}
				}				
				if (ZMIXABLE != "" && ZMIXABLE != "null" && ZMIXABLE != null) {
					hmItemValues[1] = "K"+ctgCode;
					hmItemValues[2] = tech(hmGlobals,item,"01AC0667-AuthorisationGroup"); 
					hmItemValues[3] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
					hmItemValues[4] = tech(hmGlobals,item,"01AC0044-ERPCode");	
					if(myGroup!=null){
						for(j=0;j<myGroup.size();j++){
							if (country == "") {
								country = tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
							} else  {
								if (country != tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country")) {
									country = country + "-" + tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
								}
							}
						}
					}
					hmItemValues[5] = country; 	
					hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	

					if (type == "BUnit" || type == "Prod") {
						MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
					} else {
						var typeParent = getType(hmGlobals,parentItem);
						if (typeParent == "BUnit") {							
							MaterialType = tech(hmGlobals,parentItem,"01AC0659-MaterialType");
						} else {
							var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
							MaterialType = tech(hmGlobals,GrandparentItem,"01AC0659-MaterialType");
						}
					}				
					hmItemValues[7] = MaterialType;			
					hmItemValues[8] =  tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
					hmItemValues[9] = status;					
					hmItemValues[10] = tech(hmGlobals,item,"01AC0664-MaterialNumber");	
					hmItemValues[10] = replaceString(hmItemValues[10],"0000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"00000000000","");
					hmItemValues[11] = "ZMIXABLE";
					hmItemValues[12] = ZMIXABLE;
				}
			}

			if (i==1) {				
				var ZCLETAB = "";			
				if (type == "Prod"){  
					ZCLETAB = tech(hmGlobals,item,"06DN0662-RoutageKey","","ZCLETAB-Routage key",0,"","",1);
					ERPProd = erpcode;
					statusProd = status;
				}	
				if (type == "BUnit"){ 		
					ZCLETAB = tech(hmGlobals,parentItem,"06DN0662-RoutageKey","","ZCLETAB-Routage key",0,"","",1);
					ERPProd = parentItem.getPrimaryKey();
					statusProd = hmGlobals["FN_GET_STATUS"].invoke(parentItem);
				}
				if (type == "PItem" ){ 
					if (parentPK.contains("B")) {						
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						ZCLETAB = tech(hmGlobals,GrandparentItem,"06DN0662-RoutageKey","","ZCLETAB-Routage key",0,"","",1);	
						ERPProd = GrandparentItem.getPrimaryKey();
						statusProd = hmGlobals["FN_GET_STATUS"].invoke(GrandparentItem);						
					} else {				
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						var ArriereGrandparentItem = GrandparentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						ZCLETAB = tech(hmGlobals,ArriereGrandparentItem,"06DN0662-RoutageKey","","ZCLETAB-Routage key",0,"","",1);	
						ERPProd = ArriereGrandparentItem.getPrimaryKey();
						statusProd = hmGlobals["FN_GET_STATUS"].invoke(ArriereGrandparentItem);
					}
				}
				if (ZCLETAB != "" && ZCLETAB != "null" && ZCLETAB != null) {
					hmItemValues[1] = "K"+ctgCode;
					hmItemValues[2] = tech(hmGlobals,item,"01AC0667-AuthorisationGroup"); 
					hmItemValues[3] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
					hmItemValues[4] = tech(hmGlobals,item,"01AC0044-ERPCode");						
					if(myGroup!=null){
						for(j=0;j<myGroup.size();j++){
							if (country == "") {
								country = tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
							} else  {
								if (country != tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country")) {
									country = country + "-" + tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
								}
							}
						}
					}
					hmItemValues[5] = country; 	
					hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	
					if (type == "BUnit" || type == "Prod") {
						MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
					} else {
						var typeParent = getType(hmGlobals,parentItem);
						if (typeParent == "BUnit") {
							MaterialType = tech(hmGlobals,parentItem,"01AC0659-MaterialType");
						} else {
							var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
							MaterialType = tech(hmGlobals,GrandparentItem,"01AC0659-MaterialType");
						}
					}				
					hmItemValues[7] = MaterialType;			
					hmItemValues[8] =  tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
					hmItemValues[9] = status;					
					hmItemValues[10] = tech(hmGlobals,item,"01AC0664-MaterialNumber");	
					hmItemValues[10] = replaceString(hmItemValues[10],"0000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"00000000000","");
					hmItemValues[11] = "ZCLETAB";
					hmItemValues[12] = ZCLETAB;
				}			
			}			

			if (i==2) {
				var SF_THICKNESS = "";				
				if (type == "Prod"){  
					SF_THICKNESS = tech(hmGlobals,item,"04CP0080-CommercialThickness");
					if (tech(hmGlobals,item,"04CP0081-CommercialThicknessUnits").contains("CMT")){
						SF_THICKNESS = toDouble(tech(hmGlobals,item,"04CP0080-CommercialThickness")) * 10;
					}
					else if (tech(hmGlobals,item,"04CP0081-CommercialThicknessUnits").contains("MTR")){
						SF_THICKNESS = toDouble(tech(hmGlobals,item,"04CP0080-CommercialThickness")) * 1000;
					}
				}	
				if (type == "BUnit"){ 		
					SF_THICKNESS = tech(hmGlobals,parentItem,"04CP0080-CommercialThickness");
					if (tech(hmGlobals,parentItem,"04CP0081-CommercialThicknessUnits").contains("CMT")){
						SF_THICKNESS = toDouble(tech(hmGlobals,parentItem,"04CP0080-CommercialThickness")) * 10;
					}
					else if (tech(hmGlobals,parentItem,"04CP0081-CommercialThicknessUnits").contains("MTR")){
						SF_THICKNESS= toDouble(tech(hmGlobals,parentItem,"04CP0080-CommercialThickness")) * 1000;
					}
				}
				if (type == "PItem" ){ 
					if (parentPK.contains("B")) {						
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						SF_THICKNESS = tech(hmGlobals,GrandparentItem,"04CP0080-CommercialThickness");		
						if (tech(hmGlobals,GrandparentItem,"04CP0081-CommercialThicknessUnits").contains("CMT")){
							SF_THICKNESS = toDouble(tech(hmGlobals,GrandparentItem,"04CP0080-CommercialThickness")) * 10;
						}
						else if (tech(hmGlobals,GrandparentItem,"04CP0081-CommercialThicknessUnits").contains("MTR")){
							SF_THICKNESS = toDouble(tech(hmGlobals,GrandparentItem,"04CP0080-CommercialThickness")) * 1000;
						}
					} else {				
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						var ArriereGrandparentItem = GrandparentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						SF_THICKNESS = tech(hmGlobals,ArriereGrandparentItem,"04CP0080-CommercialThickness");
						if (tech(hmGlobals,ArriereGrandparentItem,"04CP0081-CommercialThicknessUnits").contains("CMT")){
							SF_THICKNESS = toDouble(tech(hmGlobals,ArriereGrandparentItem,"04CP0080-CommercialThickness")) * 10;
						}
						else if (tech(hmGlobals,ArriereGrandparentItem,"04CP0081-CommercialThicknessUnits").contains("MTR")){
							SF_THICKNESS = toDouble(tech(hmGlobals,ArriereGrandparentItem,"04CP0080-CommercialThickness")) * 1000;
						}
					}
				}				
				if(SF_THICKNESS.endsWith(".0")){
					SF_THICKNESS=replaceString(SF_THICKNESS,".0","");
				}
				if(SF_THICKNESS.endsWith(".00")){
					SF_THICKNESS=replaceString(SF_THICKNESS,".00","");
				}										
				if(SF_THICKNESS.length() != 3){
					var zero = "";
					if (SF_THICKNESS.length() == 1) {
						zero = "00";
					}
					if (SF_THICKNESS.length() == 2) {
						zero = "0";
					}
					SF_THICKNESS=zero+SF_THICKNESS;
				}
				if (SF_THICKNESS != "" && SF_THICKNESS != "null" && SF_THICKNESS != null) {
					hmItemValues[1] = "K"+ctgCode;
					hmItemValues[2] = tech(hmGlobals,item,"01AC0667-AuthorisationGroup"); 
					hmItemValues[3] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
					hmItemValues[4] = tech(hmGlobals,item,"01AC0044-ERPCode");		
					if(myGroup!=null){
						for(j=0;j<myGroup.size();j++){
							if (country == "") {
								country = tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
							} else  {
								if (country != tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country")) {
									country = country + "-" + tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
								}
							}
						}
					}
					hmItemValues[5] = country; 	
					hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	
					if (type == "BUnit" || type == "Prod") {
						MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
					} else {
						var typeParent = getType(hmGlobals,parentItem);
						if (typeParent == "BUnit") {
							MaterialType = tech(hmGlobals,parentItem,"01AC0659-MaterialType");
						} else {
							var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
							MaterialType = tech(hmGlobals,GrandparentItem,"01AC0659-MaterialType");
						}
					}				
					hmItemValues[7] = MaterialType;			
					hmItemValues[8] =  tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
					hmItemValues[9] = status;					
					hmItemValues[10] = tech(hmGlobals,item,"01AC0664-MaterialNumber");	
					hmItemValues[10] = replaceString(hmItemValues[10],"0000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"00000000000","");
					hmItemValues[11] = "SF_THICKNESS";
					hmItemValues[12] = SF_THICKNESS;
					hmItemValues[12] = replaceString(hmItemValues[12],".5","5");
					if(hmItemValues[12].length() != 3){
						var zero = "";
						if (hmItemValues[12].length() == 1) {
							zero = "00";
						}
						if (hmItemValues[12].length() == 2) {
							zero = "0";
						}
						hmItemValues[12]=zero+hmItemValues[12];
					}
				}										
			}
			
			
			if (i==3) {
				var SF_WIDTH;
				var Width;
				var WidthUnit = "";				
				if (type == "Prod"){  
					Width = tech(hmGlobals,item,"04CP0095-Width");
					WidthUnit = tech(hmGlobals,item,"04CP0097-WidthUnit");
				}	
				if (type == "BUnit"){ 
					Width= tech(hmGlobals,parentItem,"04CP0095-Width");
					WidthUnit = tech(hmGlobals,parentItem,"04CP0097-WidthUnit");
				}
				if (type == "PItem" ){ 
					if (parentPK.contains("B")) {						
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						Width = tech(hmGlobals,GrandparentItem,"04CP0095-Width");		
						WidthUnit = tech(hmGlobals,GrandparentItem,"04CP0097-WidthUnit");
					} else {				
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						var ArriereGrandparentItem = GrandparentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						Width = tech(hmGlobals,ArriereGrandparentItem,"04CP0095-Width");
						WidthUnit = tech(hmGlobals,ArriereGrandparentItem,"04CP0097-WidthUnit");
					}
				}			
				if (WidthUnit != "null" && WidthUnit != "" && WidthUnit != null) {
					if (WidthUnit.contains("CMT")){
						Width = toDouble(Width) * 10;
					}
					if (WidthUnit.contains("MTR")){
						Width = toDouble(Width) * 1000;
					}
					SF_WIDTH = toDouble(Width);
				}		
				if (SF_WIDTH != "null" && SF_WIDTH != null) {
					hmItemValues[1] = "K"+ctgCode;
					hmItemValues[2] = tech(hmGlobals,item,"01AC0667-AuthorisationGroup"); 
					hmItemValues[3] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
					hmItemValues[4] = tech(hmGlobals,item,"01AC0044-ERPCode");	
					if(myGroup!=null){
						for(j=0;j<myGroup.size();j++){
							if (country == "") {
								country = tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
							} else  {
								if (country != tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country")) {
									country = country + "-" + tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
								}
							}
						}
					}
					hmItemValues[5] = country; 	
					hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	
					if (type == "BUnit" || type == "Prod") {
						MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
					} else {
						var typeParent = getType(hmGlobals,parentItem);
						if (typeParent == "BUnit") {
							MaterialType = tech(hmGlobals,parentItem,"01AC0659-MaterialType");
						} else {
							var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
							MaterialType = tech(hmGlobals,GrandparentItem,"01AC0659-MaterialType");
						}
					}				
					hmItemValues[7] = MaterialType;			
					hmItemValues[8] =  tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
					hmItemValues[9] = status;					
					hmItemValues[10] = tech(hmGlobals,item,"01AC0664-MaterialNumber");	
					hmItemValues[10] = replaceString(hmItemValues[10],"0000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"00000000000","");
					hmItemValues[11] = "SF_WIDTH";
					hmItemValues[12] = toString(SF_WIDTH);		
					hmItemValues[12] = replaceString(hmItemValues[12],".0","");
					if(hmItemValues[12].length() != 4){
						var zero = "";
						if (hmItemValues[12].length() == 1) {
							zero = "000";
						}
						if (hmItemValues[12].length() == 2) {
							zero = "00";
						}
						if (hmItemValues[12].length() == 3) {
							zero = "0";
						}
						hmItemValues[12]=zero+hmItemValues[12];
					}
				}											
			}
			
			if (i==4) {
				var SF_EDGE = "";
				if (type == "Prod"){  
					SF_EDGE = tech(hmGlobals,item,"04CP0160-LongitudinalEdgeType","","L179-Type bord - Edge type",4);		
				}	
				if (type == "BUnit"){ 
					SF_EDGE = tech(hmGlobals,parentItem,"04CP0160-LongitudinalEdgeType","","L179-Type bord - Edge type",4);		
				}
				if (type == "PItem" ){ 
					if (parentPK.contains("B")) {						
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						SF_EDGE = tech(hmGlobals,GrandparentItem,"04CP0160-LongitudinalEdgeType","","L179-Type bord - Edge type",4);				
					} else {				
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						var ArriereGrandparentItem = GrandparentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						SF_EDGE = tech(hmGlobals,ArriereGrandparentItem,"04CP0160-LongitudinalEdgeType","","L179-Type bord - Edge type",4);		
					}
				}					
				if (SF_EDGE.length() != 4) {
					var etoile = "";
					if (SF_EDGE.length() == 1) {
						etoile = "***";
					}
					if (SF_EDGE.length() == 2) {
						etoile = "**";
					}
					if (SF_EDGE.length() == 3) {
						etoile = "*";						
					}
					SF_EDGE = SF_EDGE + etoile;
				}
				if (SF_EDGE != "" && SF_EDGE != "null" && SF_EDGE != null) {
					hmItemValues[1] = "K"+ctgCode;
					hmItemValues[2] = tech(hmGlobals,item,"01AC0667-AuthorisationGroup"); 
					hmItemValues[3] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
					hmItemValues[4] = tech(hmGlobals,item,"01AC0044-ERPCode");		
					if(myGroup!=null){
						for(j=0;j<myGroup.size();j++){
							if (country == "") {
								country = tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
							} else  {
								if (country != tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country")) {
									country = country + "-" + tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
								}
							}
						}
					}
					hmItemValues[5] = country; 	
					hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	
					if (type == "BUnit" || type == "Prod") {
						MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
					} else {
						var typeParent = getType(hmGlobals,parentItem);
						if (typeParent == "BUnit") {
							MaterialType = tech(hmGlobals,parentItem,"01AC0659-MaterialType");
						} else {
							var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
							MaterialType = tech(hmGlobals,GrandparentItem,"01AC0659-MaterialType");
						}
					}				
					hmItemValues[7] = MaterialType;			
					hmItemValues[8] =  tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
					hmItemValues[9] = status;					
					hmItemValues[10] = tech(hmGlobals,item,"01AC0664-MaterialNumber");	
					hmItemValues[10] = replaceString(hmItemValues[10],"0000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"00000000000","");
					hmItemValues[11] = "SF_EDGE";
					hmItemValues[12] = SF_EDGE;
				}										
			}


			if (i==5) {
				var SF_TYPE = "";
				if (type == "Prod"){  
					SF_TYPE = tech(hmGlobals,item,"04CP0158-TypeBoard","","L201-Type de plaque - Type of board",3);
				}	
				if (type == "BUnit"){ 
					SF_TYPE = tech(hmGlobals,parentItem,"04CP0158-TypeBoard","","L201-Type de plaque - Type of board",3);					
				}
				if (type == "PItem" ){ 					
					if (parentPK.contains("B")) {						
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						SF_TYPE = tech(hmGlobals,GrandparentItem,"04CP0158-TypeBoard","","L201-Type de plaque - Type of board",3);
					} else {				
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						var ArriereGrandparentItem = GrandparentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						SF_TYPE = tech(hmGlobals,ArriereGrandparentItem,"04CP0158-TypeBoard","","L201-Type de plaque - Type of board",3);
					}
				}
				if (SF_TYPE != "" && SF_TYPE != "null" && SF_TYPE != null) {
					hmItemValues[1] = "K"+ctgCode;
					hmItemValues[2] = tech(hmGlobals,item,"01AC0667-AuthorisationGroup"); 
					hmItemValues[3] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
					hmItemValues[4] = tech(hmGlobals,item,"01AC0044-ERPCode");	
					if(myGroup!=null){
						for(j=0;j<myGroup.size();j++){
							if (country == "") {
								country = tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
							} else  {
								if (country != tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country")) {
									country = country + "-" + tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
								}
							}
						}
					}
					hmItemValues[5] = country; 	
					hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	
					if (type == "BUnit" || type == "Prod") {
						MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
					} else {
						var typeParent = getType(hmGlobals,parentItem);
						if (typeParent == "BUnit") {
							MaterialType = tech(hmGlobals,parentItem,"01AC0659-MaterialType");
						} else {
							var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
							MaterialType = tech(hmGlobals,GrandparentItem,"01AC0659-MaterialType");
						}
					}				
					hmItemValues[7] = MaterialType;			
					hmItemValues[8] =  tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
					hmItemValues[9] = status;					
					hmItemValues[10] = tech(hmGlobals,item,"01AC0664-MaterialNumber");	
					hmItemValues[10] = replaceString(hmItemValues[10],"0000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"00000000000","");
					hmItemValues[11] = "SF_TYPE";
					hmItemValues[12] = SF_TYPE;
				}							
			}

			if (i==6) {
				var Length;
				var LengthUnits = "";		
				var SF_LENGTH;
				if (type == "BUnit"){ 
					Length = tech(hmGlobals,item,"04CP0103-Length");
					LengthUnits = tech(hmGlobals,item,"04CP0104-LengthUnits");
				}
				if (type == "PItem" ){ 
					if (parentPK.contains("B")) {						
						Length = tech(hmGlobals,parentItem,"04CP0103-Length");		
						LengthUnits = tech(hmGlobals,parentItem,"04CP0104-LengthUnits");
					} else {				
						var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
						Length = tech(hmGlobals,GrandparentItem,"04CP0103-Length");
						LengthUnits = tech(hmGlobals,GrandparentItem,"04CP0104-LengthUnits");
					}
				}
				if (LengthUnits != "null" && LengthUnits != "" && LengthUnits != null) {
					if (LengthUnits.contains("CMT")){
						Length = toDouble(Length) * 10;
					}
					if (LengthUnits.contains("MTR")){
						Length = toDouble(Length) * 1000;
					}			
					SF_LENGTH = toDouble(Length);
				}	
				if (SF_LENGTH != "null" && SF_LENGTH != null) {
					hmItemValues[1] = "K"+ctgCode;
					hmItemValues[2] = tech(hmGlobals,item,"01AC0667-AuthorisationGroup"); 
					hmItemValues[3] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
					hmItemValues[4] = tech(hmGlobals,item,"01AC0044-ERPCode");		
					if(myGroup!=null){
						for(j=0;j<myGroup.size();j++){
							if (country == "") {
								country = tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
							} else  {
								if (country != tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country")) {
									country = country + "-" + tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
								}
							}
						}
					}
					hmItemValues[5] = country; 	
					hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	
					if (type == "BUnit" || type == "Prod") {
						MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
					} else {
						var typeParent = getType(hmGlobals,parentItem);
						if (typeParent == "BUnit") {
							MaterialType = tech(hmGlobals,parentItem,"01AC0659-MaterialType");
						} else {
							var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
							MaterialType = tech(hmGlobals,GrandparentItem,"01AC0659-MaterialType");
						}
					}				
					hmItemValues[7] = MaterialType;			
					hmItemValues[8] =  tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
					hmItemValues[9] = status;					
					hmItemValues[10] = tech(hmGlobals,item,"01AC0664-MaterialNumber");	
					hmItemValues[10] = replaceString(hmItemValues[10],"0000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"000000000000","");
					hmItemValues[10] = replaceString(hmItemValues[10],"00000000000","");
					hmItemValues[11] = "SF_LENGTH";
					hmItemValues[12] = toString(SF_LENGTH);	
					hmItemValues[12] = replaceString(hmItemValues[12],".0","");
					if(hmItemValues[12].length() != 4){
						var zero = "";
						if (hmItemValues[12].length() == 1) {
							zero = "000";
						}
						if (hmItemValues[12].length() == 2) {
							zero = "00";
						}
						if (hmItemValues[12].length() == 3) {
							zero = "0";
						}
						hmItemValues[12]=zero+hmItemValues[12];
					}
					
				}			
			}
			
			
			
			if (i==7) {
				var SF_PACKAGING = "";
				if (ctgCode.contains("010")) {
					if (type == "PItem") {	
						var TotalQuantityOfNextLowerLevel = tech(hmGlobals,item,"06DN0407-TotalQuantityOfNextLowerLevel");
						var Assemblage = tech(hmGlobals,item,"06DN0411-Assembly","","L015-Assemblage - Assembly",2);
						var Empilage = tech(hmGlobals,item,"06DN0412-Stacking","","L073-Empilage - Stacking",2);
						var Support = tech(hmGlobals,item,"06DN0413-Support","","L172-Support - Support ",2);
						var Houssage = tech(hmGlobals,item,"06DN0414-Covering","","L093-Houssage - Covering",2);
						var Cerclage = tech(hmGlobals,item,"06DN0415-Hooping","","L021-Cerclage - Hooping",2);
						SF_PACKAGING = TotalQuantityOfNextLowerLevel+Assemblage+Empilage+Support+Houssage+Cerclage;   
					}
					if (SF_PACKAGING != "" && SF_PACKAGING != "null" && SF_PACKAGING != null) {
						hmItemValues[1] = "K"+ctgCode;
						hmItemValues[2] = tech(hmGlobals,item,"01AC0667-AuthorisationGroup"); 
						hmItemValues[3] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
						hmItemValues[4] = tech(hmGlobals,item,"01AC0044-ERPCode");		
						if(myGroup!=null){
							for(j=0;j<myGroup.size();j++){
								if (country == "") {
									country = tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
								} else  {
									if (country != tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country")) {
										country = country + "-" + tech(hmGlobals,item,"CountryGroup#"+j+"/06DN0419-Country");
									}
								}
							}
						}
						hmItemValues[5] = country; 	
						hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	
						if (type == "BUnit" || type == "Prod") {
							MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
						} else {
							var typeParent = getType(hmGlobals,parentItem);
							if (typeParent == "BUnit") {
								MaterialType = tech(hmGlobals,parentItem,"01AC0659-MaterialType");
							} else {
								var GrandparentItem = parentItem.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
								MaterialType = tech(hmGlobals,GrandparentItem,"01AC0659-MaterialType");
							}
						}				
						hmItemValues[7] = MaterialType;			
						hmItemValues[8] =  tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
						hmItemValues[9] = status;						
						hmItemValues[10] = tech(hmGlobals,item,"01AC0664-MaterialNumber");	
						hmItemValues[10] = replaceString(hmItemValues[10],"0000000000000","");
						hmItemValues[10] = replaceString(hmItemValues[10],"000000000000","");
						hmItemValues[10] = replaceString(hmItemValues[10],"00000000000","");
						hmItemValues[11] = "SF_PACKAGING";
						hmItemValues[12] = SF_PACKAGING;
						if(hmItemValues[12].length() != 8){
							var zero = "";
							if (hmItemValues[12].length() == 6) {
								zero = "**";
							}
							if (hmItemValues[12].length() == 7) {
								zero = "*";
							}
							hmItemValues[12]=hmItemValues[12]+zero;
						}
					}			
				}				
			}	
		}
	}
	return(hmItemValues);	
}

var hmGlobals = initGlobals();//Initialisation du tableau de variables globales
var ctgs = getCatalogNamesList();//La variable ctgs contient la liste des catalogues disponibles

var hmEntete = [];

hmEntete.add("");
hmEntete.add("Catalogue");
hmEntete.add("Authorisation Group");
hmEntete.add("Old material Number");
hmEntete.add("ERPCode");
hmEntete.add("Id language");
hmEntete.add("invoiceName");
hmEntete.add("MaterialType");
hmEntete.add("PublishedIntoSAP");
hmEntete.add("Status");
hmEntete.add("Material Number");
hmEntete.add("N° caract. interne");
hmEntete.add("Valeur de la caractéristique");

out.writeln(buildSAPCSV(hmGlobals,hmEntete));


var oKey;//Clef de la hash map
var ctg;//Catalogue utilisé

forEachHmElement(ctgs,oKey,ctg) {//Pour chaque element d'un catalogue de la liste de catalogues	
	forEachCtgItem(ctg,item) {//Pour chaque item du catalogue
		var detType = checkString(getType(hmGlobals,item),"");		
		if (ctg.contains("010") && detType.contains("P")) {
			var i;		
			for(i=0;i<6;i++){
				var hmEntry = getHmItemBatidataValues(hmGlobals,item,i);//On copie les attributs de l'item dans hmEntry
				if(hmEntry.size()>0) {//Si hmEntry n'est pas vide
					out.writeln(buildSAPCSV(hmGlobals,hmEntry));//On appelle la fonction de création de fichier csv et on rajoute l'item et ses attributs
				}
			}
		} 
		if (ctg.contains("010") && detType.contains("B")) {
			var i;		
			for(i=0;i<7;i++){
				var hmEntry = getHmItemBatidataValues(hmGlobals,item,i);//On copie les attributs de l'item dans hmEntry
				if(hmEntry.size()>0) {//Si hmEntry n'est pas vide
					out.writeln(buildSAPCSV(hmGlobals,hmEntry));//On appelle la fonction de création de fichier csv et on rajoute l'item et ses attributs
				}
			}
		} 
		if (ctg.contains("010") && detType.contains("I")) {
			var i;		
			for(i=0;i<8;i++){
				var hmEntry = getHmItemBatidataValues(hmGlobals,item,i);//On copie les attributs de l'item dans hmEntry
				if(hmEntry.size()>0) {//Si hmEntry n'est pas vide
					out.writeln(buildSAPCSV(hmGlobals,hmEntry));//On appelle la fonction de création de fichier csv et on rajoute l'item et ses attributs
				}
			}
		} 
		if (!ctg.contains("010")) {
			var j;		
			for(j=0;j<2;j++){
				var hmEntry = getHmItemBatidataValues(hmGlobals,item,j);//On copie les attributs de l'item dans hmEntry
				if(hmEntry.size()>0) {//Si hmEntry n'est pas vide
					out.writeln(buildSAPCSV(hmGlobals,hmEntry));//On appelle la fonction de création de fichier csv et on rajoute l'item et ses attributs
				}
			}
		}
	}
}


logDebug("Traitement termine");
