//
// Export Données Onglet Performances Confidentielles 
//
// Création : Mélanie Vandersteen 
// Date création : 26/11/2014
//

//	FONCTION QUI INITIALISE LA HASH MAP DE VARIABLES GLOBALES
function initGlobals(){
	//On déclare la hash map
    var hmGlobals = [];
	//On récupère des fonctions qui sont stockées dans des librairies de fonctions,
	//Elles seront utiles plus tard dans le programme
	//On les stocke dans une hash map de variables globales
    hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"] = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath");
    hmGlobals["FN_GET_ITEM_TYPE"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getItemType");
    hmGlobals["FN_GET_CHILD_ITEMS"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getChildItems");
    hmGlobals["FN_GET_PARENT_ITEM"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getParentItem");
    hmGlobals["FN_GET_CONST"]=getScriptByPath("/scripts/triggers/LG.Library.Const").getFunctionByName("getConst");
    hmGlobals["FN_GET_ENTRY_NODE_AT_LEVEL"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodeAtLevel");
    hmGlobals["FN_GET_PARENT_AT_LEVEL"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getParentAtLevel");
    hmGlobals["FN_GET_STATUS"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getStatus");
	//Recupere la constant kheops "QUOT" de la table L902-KheopsConstants et la stocke dans la variable globale
    hmGlobals["QUOT"] = lookupValues(getLkpByName("L902-KheopsConstants"),"QUOT")[0];
    return hmGlobals;
}

//	FONCTION QUI RETOURNE LE PARENT D'UN ITEM	
function getParentItem(hmGlobals,item){
	//On retourne l'objet item situé à l'adresse contenue dans la varible globale "PARENT_RELATIONSHIP_FIELD"
	return item.getItemUsingEntryRelationshipAttrib(hmGlobals["PARENT_RELATIONSHIP_FIELD"]);
}

//	FONCTION QUI RETOURNE LES PARENTS-GRANDS PARENTS D'UN ITEM	(tous les ancètres de l'item)
function getParentsItem(hmGlobals,item,hmParents){
	//Ajoute l'item/parent/grandparent à la hashmap de Parents (selon l'étape de récursivité sur la fonction)
	hmParents.add(item);
	//On appelle la fonction getParentItem décrite ci dessus et qui retourne le parent d'un item 
	//on stocke le résultat dans parent
	var parent = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);
	if(parent!=null) {//Si il y a un parent on effectue une récursivité avec comme argument parent (pour trouver les grand-parents)
		return(getParentsItem(hmGlobals,parent,hmParents));
	}
	else {//sinon on retourne hmParents
		return(hmParents);
	}
}

//	FONCTION QUI RETOURNE LE TYPE D'UN ITEM	
//La méthode associée à la variable hmGlobals["FN_GET_ITEM_TYPE"] (ici il s'agit de getItemType())
//est exécutée sur l'objet item passé en parametres via la fonction invoke()
function getType(hmGlobals,item){
	return hmGlobals["FN_GET_ITEM_TYPE"].invoke(item);
}

//	FONCTION QUI RETOURNE LES PARENTS DE L'ITEM A UN NIVEAU DONNE (PROD, BUNIT, PITEM...)
function getParentAtLevel(hmGlobals,item,iLevel) {
	if(iLevel==0) {//Si le niveau pour récupérere la valeur de l'attribut est au niveau courant on retourne l'item
		return(item);
	}
	else {//On appelle la fonction getParentItem décrite ci dessus et qui retourne le parent d'un item 
		//on stocke le résultat dans parentItem
		var parentItem = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);
		if(parentItem==null) {//si l'item n'a pas de parent
			return(null);//on retourne null
		}
		else {//sinon on recherche les parents au niveau supérieur (PROD, BUNIT, PITEM...) par recursivite
			return(getParentAtLevel(hmGlobals,parentItem,iLevel+1));
		}
	}
}

//	FONCTION QUI RETOURNE LE NOEUD (attribut de l'item) EN FONCTION DU CHEMIN 
//la méthode associée à la variable hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"] (ici il s'agit de getEntryNodesFromAttrPath())
//est exécutée sur item et sNodeName via la fonction invoke()
function getEn(hmGlobals, item, sNodeName){
	return hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"].invoke(item,sNodeName);
}

//	FONCTION QUI RETOURNE LA VALEUR DU NOEUD (valeur attribut de l'item) EN FONCTION DU CHEMIN 
//Idem fonction précédente sauf que l'on récupère la valeur correspondand au noeud spécifié
function getValue(hmGlobals, item, sNodeName){
	return hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"].invoke(item,sNodeName)[0].getEntryNodeValue();
}

//	FONCTION QUI RETOURNE LE PARENT DE PLUS HAUT NIVEAU		
function getHigherParent(hmGlobals , hmParents, sAttrPath){
	var i;
	for(i=0;i<hmParents.size();i++) {//On boucle sur la hashmap de parents
		if(getEn(hmGlobals,hmParents[i],sAttrPath)!=null) {//Si la valeur de l'attribut du noeud parent n'est pas nul
			return(hmParents[i]);//On retourne le noeud parent
		}
	}
	return(null);
}

//	FONCTION QUI RECUPERE L'ITEM A UN NIVEAU DONNE
function getItemAtLevel(hmGlobals,item,sLevel){
	if (item==null) {//Si l'item n'existe pas, on retourne la valeur null
		return null;
	}
	else
	{
		if (getType(hmGlobals,item)==sLevel) //Si le type de l'item correspond au niveau demandé, on retourne l'item
		{
			return item;
		}
		
		var oParent = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);//Sinon on récupère le parent de l'item
		return getItemAtLevel(hmGlobals,oParent,sLevel);//Et on regarde si il correspond au niveau demandé par recursivité
	}
}

//	FONCTION QUI RECUPERE LA PLUS GRANDE CLEF DE LA HASH MAP (= taille max de la hashmap pour pouvoir boucler dessus)
function getMaxHm(hm) {
	var oKey;
	var oValue;
	var max = 0;
	forEachHmElement(hm,oKey,oValue) {//Pour chaque couple (Okey, oValue) de la hash map
		if(toInteger(oKey)>max) {//Si la conversion en int de oKey est supérieure a max
			max = toInteger(oKey);//On place la valeur de oKey dans max
		}	
	}	
	return(max);//On retourne la clef la plus grande de la hashmap
}

//	FONCTION QUI CONSTRUIT LE FICHIER CSV
function buildSAPCSV(hmGlobals,hm) {
	var i;
	var csv = "";
	for(i=1;i<=getMaxHm(hm);i++) {//Pour chaque valeur inférieure à la valeur max de la hashmap
		var val = toString(hm[i]);
		if (val=="null"){val="";}
		csv = csv  + escapeForCSV(val) + ";";
	}
	return(csv);
}

function getPublishingItemAtLevel(oitem,sLevel){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getPublishingItemAtLevel").invoke(oitem, sLevel);
}

// FONCTION QUI RECUPERE LA OU LES VALEURS D'UN ATTRIBUT (champr de la matrice Kheops) POUR UN ITEM DONNE 
function tech(hmGlobals,item,sAttrName,sGroupingName,sLkpName,iLkpRow,sAttrNameGroupingKey,sAttrValGroupingKey,iLevel) {
//- hmGlobals : tableau de variables globales
//- item : item
//- sAttrName : nom de l'attribut (ex : "06DN0346-IsInCatalog")
//- sGroupingName : nom du grouping (ex : "ChannelOfDistributionGroup")
//- sLkpName : nom de la lookup table (ex : "L103-Marque ciale Detenteur - Brand name")
//- iLkpRow : numéro de la colonne de la lookup table (ex : 2)
//- sAttrNameGroupingKey : nom de l’attribut clé du grouping 
//- sAttrValGroupingKey : valeur de l’attribut clé du grouping 
//- iLevel : niveau où récupérer la valeur de l'attribut (de -2 à 4)
	
	var val = [];//tableau des valeurs de sAttrName si c'est un grouping ou un multivalué
	var en;
	var sKey;
	
	//Si on veut la valeur de sAttrName à un niveau différent de celui sur lequel on est
	//On remplace l'item item par celui du niveau désiré  
	if(iLevel!=null) {
		//0 ou null = valeur de l'attribut de l'item au niveau courant,
		//1 = valeur de l'attribut de l'item au niveau Prod,
		//2 = valeur de l'attribut de l'item au niveau BUnit,
		//3 = valeur de l'attribut de l'item au niveau Pitem1,
		//4 = valeur de l'attribut de l'item au niveau Pitem2,
		//-1 = valeur de l'attribut de l'item au niveau du parent,
		//-2 = valeur de l'attribut de l'item au niveau du grand parent
		var sLevel = "";
		if(iLevel ==1 ){//Si le niveau est a 1, sLevel prend la valeur "Prod"
			sLevel = "Prod";
		}
		else if (iLevel == 2) {//Si le niveau est a 2, sLevel prend la valeur "BUnit"
			sLevel = "BUnit";
		}
		else if (iLevel == 3) {//Si le niveau est a 3, sLevel prend la valeur "PItem"
			sLevel = "PItem";
		}
		else if (iLevel < 0) {//Si le niveau est inférieur a 0, on récupère l'attribut chez le parent, grand-parent de l'item
			//item = hmGlobals["FN_GET_PARENT_AT_LEVEL"].invoke(hmGlobals,item,iLevel);
			item = getParentAtLevel(hmGlobals,item,iLevel);
		}
		if(sLevel!="") {//Si la variable sLevel n'est pas vide, on récupère l'item au niveau demandé
			item = getItemAtLevel(hmGlobals,item,sLevel);
		}
	}
	
	//---------------------------------------------------------------------------------------------------------------------
	
	//Si on est dans un grouping
	if(checkString(sGroupingName,"")!=""){
		var myGroup = getEn(hmGlobals,item,sGroupingName);
		if(myGroup!=null) {
			var i;
			//On parcourt le grouping sGroupingName
			for(i=0;i<myGroup.size();i++) {
				//Si on veut récupérer les valeurs de sAttrName sur une occcurrence spéciale
				if(checkString(sAttrNameGroupingKey,"")!="" && checkString(sAttrValGroupingKey,"") != "") {
					//Recherche de l'occurrence tel que sAttrNameGroupingKey = sAttrValGroupingKey
					if(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrNameGroupingKey)==sAttrValGroupingKey) {						
						en = getEn(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
						if(en!=null) {
							//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
							if(iLkpRow!=null && checkString(sLkpName,"")!="") {
								var j;
								for(j=0;j<en.size();j++) {
									//sKey = getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
									sKey = en[j].getEntryNodeValue();
									if(sKey!=null) {
										val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
									}
								}
							}
							//Si on veut simplement la valeur de l'attribut de sAttrName
							else {
								var j;
								for(j=0;j<en.size();j++) {
									//val.add(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName));
									val.add(en[j].getEntryNodeValue());
								}		
							}
						}
					}
				}
				//Si on veut récupérer les valeurs de sAttrName sur toutes les occurrences
				else {
					en = getEn(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
					if(en!=null) {
						//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
						if(iLkpRow!=null && checkString(sLkpName,"")!="") {
							var j;
							for(j=0;j<en.size();j++) {
								//sKey = getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
								sKey = en[j].getEntryNodeValue();
								if(sKey!=null) {
									val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
								}
							}	
						}
						//Si on veut simplement la valeur de l'attribut de sAttrName
						else {
							var j;
							for(j=0;j<en.size();j++) {
								//val.add(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName));
								val.add(en[j].getEntryNodeValue());
							}	
						}
					}
				}
			}
		}
	}
	//Si on n'est pas dans un grouping
	else {
		en = getEn(hmGlobals,item,sAttrName);
		if(en!=null) {
			//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
			if(iLkpRow!=null && checkString(sLkpName,"")!="") {
				var j;
				for(j=0;j<en.size();j++) {
					sKey = en[j].getEntryNodeValue();
					if(sKey!=null) {
						val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
					}
				}	
			}
			//Si on veut simplement la valeur de l'attribut de sAttrName
			else {
				var j;
				for(j=0;j<en.size();j++) {
					val.add(en[j].getEntryNodeValue());
				}	
			}	
		}
	}
	
	//out.writeln(en);
	//out.writeln(val);
	
	//-----------------------------------------------------------------------------------------------------------------------
	
	//CHAINE FINALE DE L'ATTRIBUT
	var myStr = ""; 
	if(val.size()==0) {//Si val est vide myStr prend ma valeur null
		myStr = "null";
	}
	if(val.size()==1) {//Si val contient 1 valeur on convertit la valeur en string et on la place dans myStr
		myStr = toString(val[0]);
	}
	if(val.size()>1) {//Si val contient plus d'une valeur
		var i;
		for(i=0;i<val.size()-1;i++) {//On boucle sur les valeurs contenues dans val[]
			myStr = myStr + toString(val[i]) + "@#@";//On les copie dans myStr en les separant par @#@
		}
		myStr = myStr + toString(val[i]);//on copie la derniere valeur (val.size()) dans myStr car elle n'est pas prise en compte dans la boucle (i<val.size())
	}
	return(myStr);
}

//FONCTION QUI RECUPERE L'ENSEMBLE DES CHAMPS QUI DECRIVENT UN ITEM 
//De nombreuses conditions ternaires sont mises en oeuvre afin de respecter les regles de gestions 
//associees aux differents champs 
function getHmItemBatidataValues(hmGlobals,item){
	var hmParents = [];
	hmParents = getParentsItem(hmGlobals,item,hmParents);//Remplissage de la hashmap avec les parents de l'item 
	var hmItemValues = [];
	var type = getType(hmGlobals,item);//Recuperation du type de l'item
	var status = hmGlobals["FN_GET_STATUS"].invoke(item);//Recuperation du statut de l'item
    // Récupération du parent
	var parentItem = item.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
	// Récupération du nom du catalogue de l'item
	var ctgName = item.getCatalog().getCtgName();
	var ctgCode = substring(ctgName,1,4);
	var validToDate = getValue(hmGlobals,item,"06DN0427-ValidToDate");
	var effectiveDate = getValue(hmGlobals,item,"06DN0425-effectiveDate");
	var effectiveDateReformat = effectiveDate.formatDate("dd/MM/yyyy");
	var validToDateReformat = validToDate.formatDate("dd/MM/yyyy");
	var MaterialType = "";
	var BaseUnitOfMeasure = "";	
	
	hmItemValues[1] = ctgCode;
	hmItemValues[2] = status;
	var erpcode = tech(hmGlobals,item,"01AC0044-ERPCode");
	hmItemValues[3] = erpcode;
	hmItemValues[4] = tech(hmGlobals,item,"01AC0664-MaterialNumber");
	hmItemValues[4] = replaceString(hmItemValues[4],"0000000000000","");
	hmItemValues[4] = replaceString(hmItemValues[4],"000000000000","");
	hmItemValues[4] = replaceString(hmItemValues[4],"00000000000","");	
	hmItemValues[5] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
	hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	
	hmItemValues[7] = tech(hmGlobals,item,"01AC0012-LongName");		
	if (type == "BUnit" || type == "Prod") {
		MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
	} else {
		MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType","","","","","",2);
	}				
	hmItemValues[8] = MaterialType;	
	hmItemValues[9] = tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
	hmItemValues[10] = tech(hmGlobals,item,"01AC0670-XPlantMatlStatus");
	hmItemValues[11] = type;		
	
//A REMPLIR
	if (type != "Prod") {
		hmItemValues[12] = tech(hmGlobals,item,"05PC0333-InflammableMaterial","","","","","",2);
	} 		 
	var ApparentBulkDensity = "";
	if (type == "BUnit" || type == "Prod") {
		ApparentBulkDensity = tech(hmGlobals,item,"05PC0263-ApparentBulkDensity");
	} else {
		ApparentBulkDensity = tech(hmGlobals,item,"05PC0263-ApparentBulkDensity","","","","","",2);
	}
	hmItemValues[12] =  ApparentBulkDensity;
	hmItemValues[13] =  tech(hmGlobals,item,"05PC0263-ApparentBulkDensity","","","","","",1);
	hmItemValues[14] =  tech(hmGlobals,item,"05PC0301-ThermalConductivityLambda","","","","","",1);
	hmItemValues[15] =  tech(hmGlobals,item,"05PC0794-ClassFlexuralStrength ","","","","","",1);
	hmItemValues[16] =  tech(hmGlobals,item,"05PC0789-MechanicalStressClass","","","","","",1);
	hmItemValues[17] =  tech(hmGlobals,item,"05PC0779-CombustionContinuousIncandescence","","","","","",1);
	hmItemValues[18] =  tech(hmGlobals,item,"05PC0788-CompressiveStress2%Strain","","","","","",1);
	hmItemValues[19] =  tech(hmGlobals,item,"05PC0787-CompressiveStress5%Strain","","","","","",1);
	hmItemValues[20] =  tech(hmGlobals,item,"05PC0790-DurabilityOfReactionToFire","","","","","",1);
	hmItemValues[21] =  tech(hmGlobals,item,"05PC0791-DurabilityOfThermalResistance","","","","","",1);
	hmItemValues[22] =  tech(hmGlobals,item,"05PC0783-DurabilityThermalResistance","","","","","",1);
	hmItemValues[23] =  tech(hmGlobals,item,"05PC0792-SustainabilityChemicalBiologicalAttacks","","","","","",1);
	hmItemValues[24] =  tech(hmGlobals,item,"05PC0781-dLThickness","","","","","",1);
	hmItemValues[25] =  tech(hmGlobals,item,"05PC0784-CreepCompression","","","","","",1);
	hmItemValues[26] =  tech(hmGlobals,item,"05PC0807-IT249","","","","","",1);
	hmItemValues[27] =  tech(hmGlobals,item,"05PC0780-DynamicStiffness","","","","","",1);
	hmItemValues[28] =  tech(hmGlobals,item,"05PC0785-LongTermThicknessReduction","","","","","",1);
	hmItemValues[29] =  tech(hmGlobals,item,"05PC0786-EffortResistanceCyclicCompression","","","","","",1);
	hmItemValues[30] =  tech(hmGlobals,item,"05PC0793-ThresholdFlexuralStrength","","","","","",1);
	hmItemValues[31] =  tech(hmGlobals,item,"05PC0782-ThicknessTolerancesClass","","","","","",1);
	hmItemValues[32] =  tech(hmGlobals,item,"05PC0254-IndicativeSurfaceMass","","","","","",1);
	hmItemValues[33] =  tech(hmGlobals,item,"05PC0255-SpecifiedSurfaceMass","","","","","",1);
	hmItemValues[34] =  tech(hmGlobals,item,"05PC0256-SpecSurfaceMassTolerance","","","","","",1);
	hmItemValues[35] =  tech(hmGlobals,item,"05PC0257-HardnessInShoreC","","","","","",1);
	hmItemValues[36] =  tech(hmGlobals,item,"05PC0258-SurfaceHardness","","","","","",1);
	hmItemValues[37] =  tech(hmGlobals,item,"05PC0259-WorkingLoad","","","","","",1);
	hmItemValues[38] =  tech(hmGlobals,item,"05PC0260-InertiaFlat","","","","","",1);
	hmItemValues[39] =  tech(hmGlobals,item,"05PC0261-InertiaSection","","","","","",1);
	hmItemValues[40] =  tech(hmGlobals,item,"05PC0262-Squaring","","","","","",1);
	hmItemValues[41] =  tech(hmGlobals,item,"05PC0264-ISOLE","","","","","",1);
	hmItemValues[42] =  tech(hmGlobals,item,"05PC0265-Incompressibility","","","","","",1);
	hmItemValues[43] =  tech(hmGlobals,item,"05PC0266-CompressibilityClass","","","","","",1);
	hmItemValues[44] =  tech(hmGlobals,item,"05PC0267-ServiceabilityCompressionStrength","","","","","",1);
	hmItemValues[45] =  tech(hmGlobals,item,"05PC0268-ServiceabilityDeformation","","","","","",1);
	hmItemValues[46] =  tech(hmGlobals,item,"05PC0651-ServiceabilityDeformationMaxi","","","","","",1);
	hmItemValues[47] =  tech(hmGlobals,item,"05PC0269-CompressiveStress","","","","","",1);
	hmItemValues[48] =  tech(hmGlobals,item,"05PC0565-SCClassification","","","","","",1);
	hmItemValues[49] =  tech(hmGlobals,item,"05PC0270-MechanicalResistanceToCompression","","","","","",1);
	hmItemValues[50] =  tech(hmGlobals,item,"05PC0271-DeformationUnderSpecifiedConditions","","","","","",1);
	hmItemValues[51] =  tech(hmGlobals,item,"05PC0272-TearStrength","","","","","",1);
	hmItemValues[52] =  tech(hmGlobals,item,"05PC0575-ImpactResistance","","","","","",1);
	hmItemValues[53] =  tech(hmGlobals,item,"05PC0273-DimensionalStability","","","","","",1);
	hmItemValues[54] =  tech(hmGlobals,item,"05PC0274-DimensionalStabilityUnderSpecifiedConditions","","","","","",1);
	hmItemValues[55] =  tech(hmGlobals,item,"05PC0275-BehaviorWithWater","","","","","",1);
	hmItemValues[56] =  tech(hmGlobals,item,"05PC0276-WaterUptakeImmersion","","","","","",1);
	hmItemValues[57] =  tech(hmGlobals,item,"05PC0277-WaterAbsorptionSurfaceBoard","","","","","",1);
	hmItemValues[58] =  tech(hmGlobals,item,"05PC0278-WaterAbsorptionBoardByImmersion","","","","","",1);
	hmItemValues[59] =  tech(hmGlobals,item,"05PC0279-LongTermWaterAbsoptionByImmersion","","","","","",1);
	hmItemValues[60] =  tech(hmGlobals,item,"05PC0280-WaterClassOfBehavior","","","","","",1);
	hmItemValues[61] =  tech(hmGlobals,item,"05PC0281-WaterClassOfBehaviorOfBoard","","","","","",1);
	hmItemValues[62] =  tech(hmGlobals,item,"05PC0282-ResistanceToFrost","","","","","",1);
	hmItemValues[63] =  tech(hmGlobals,item,"05PC0283-WaterAbsorptionCoefficient","","","","","",1);
	hmItemValues[64] =  tech(hmGlobals,item,"05PC0284-CohesionAndInflexion","","","","","",1);
	hmItemValues[65] =  tech(hmGlobals,item,"05PC0564-ResistanceToInflection","","","","","",1);
	hmItemValues[66] =  tech(hmGlobals,item,"05PC0580-Adhesion","","","","","",1);
	hmItemValues[67] =  tech(hmGlobals,item,"05PC0285-MechanicalResistanceToInflection","","","","","",1);
	hmItemValues[68] =  tech(hmGlobals,item,"05PC0286-TensileStrengthPerpendicularToInsulation","","","","","",1);
	hmItemValues[69] =  tech(hmGlobals,item,"05PC0287-FlexuralStrengthMd","","","","","",1);
	hmItemValues[70] =  tech(hmGlobals,item,"05PC0288-FlexuralStrengthCd","","","","","",1);
	hmItemValues[71] =  tech(hmGlobals,item,"05PC0289-DeformationUnderloadMd","","","","","",1);
	hmItemValues[72] =  tech(hmGlobals,item,"05PC0290-DeformationUnderloadCd","","","","","",1);
	hmItemValues[73] =  tech(hmGlobals,item,"05PC0291-ResidualDeformationMd","","","","","",1);
	hmItemValues[74] =  tech(hmGlobals,item,"05PC0292-ResidualDeformationCd","","","","","",1);
	hmItemValues[75] =  tech(hmGlobals,item,"05PC0293-ResistanceToPunching","","","","","",1);
	hmItemValues[76] =  tech(hmGlobals,item,"05PC0294-UnderloadDeformation","","","","","",1);
	hmItemValues[77] =  tech(hmGlobals,item,"05PC0295-ShearStrength","","","","","",1);
	hmItemValues[78] =  tech(hmGlobals,item,"05PC0296-PermeabilityToVapour","","","","","",1);
	hmItemValues[79] =  tech(hmGlobals,item,"05PC0297-PermeabilityClass","","","","","",1);
	hmItemValues[80] =  tech(hmGlobals,item,"05PC0298-WaterVapourTransmission","","","","","",1);
	hmItemValues[81] =  tech(hmGlobals,item,"05PC0299-FactorOfResistanceToWaterVapour","","","","","",1);
	hmItemValues[82] =  tech(hmGlobals,item,"05PC0576-MouldResistance","","","","","",1);
	hmItemValues[83] =  tech(hmGlobals,item,"05PC0300-ThermalResistance","","","","","",1);
	hmItemValues[84] =  tech(hmGlobals,item,"05PC0302-IndicativeCoefUp","","","","","",1);
	hmItemValues[85] =  tech(hmGlobals,item,"05PC0303-NormalizesUpCalculation","","","","","",1);
	hmItemValues[86] =  tech(hmGlobals,item,"05PC0304-ResistanceOfAssemblyRp","","","","","",1);
	hmItemValues[87] =  tech(hmGlobals,item,"05PC0574-ThermalExpansion","","","","","",1);
	hmItemValues[88] =  tech(hmGlobals,item,"05PC0305-EuroclasseClassification","","","","","",1);
	hmItemValues[89] =  tech(hmGlobals,item,"05PC0306-ClassificationM","","","","","",1);
	hmItemValues[90] =  tech(hmGlobals,item,"05PC0579-EuroclasseClassificationOfBoard","","","","","",1);
	hmItemValues[91] =  tech(hmGlobals,item,"05PC0307-ClassificationMOfBoard","","","","","",1);
	hmItemValues[92] =  tech(hmGlobals,item,"05PC0308-ORReactionFire","","","","","",1);
	hmItemValues[93] =  tech(hmGlobals,item,"05PC0309-FireInsulation","","","","","",1);
	hmItemValues[94] =  tech(hmGlobals,item,"05PC0310-FireResistance","","","","","",1);
	hmItemValues[95] =  tech(hmGlobals,item,"05PC0311-ORFireResistance","","","","","",1);
	hmItemValues[96] =  tech(hmGlobals,item,"05PC0312-AcousticAbsorptionCoef","","","","","",1);
	hmItemValues[97] =  tech(hmGlobals,item,"05PC0313-ORSoundAbsorption","","","","","",1);
	hmItemValues[98] =  tech(hmGlobals,item,"05PC0314-IndexAttenuationOfNoise","","","","","",1);
	hmItemValues[99] =  tech(hmGlobals,item,"05PC0582-DirectAirborneNoiseInsulation","","","","","",1);
	hmItemValues[100] =  tech(hmGlobals,item,"05PC0573-AirPermeability","","","","","",1);
	hmItemValues[101] =  tech(hmGlobals,item,"05PC0315-MaxiLoading","","","","","",1);
	hmItemValues[102] =  tech(hmGlobals,item,"05PC0316-HeightOfMaxiInstallation","","","","","",1);
	hmItemValues[103] =  tech(hmGlobals,item,"05PC0317-LengthOfCut","","","","","",1);
	hmItemValues[104] =  tech(hmGlobals,item,"05PC0318-MaxiCapacityOfCut","","","","","",1);
	if (type != "Prod") {
		hmItemValues[105] =  tech(hmGlobals,item,"05PC0319-RCT","","","","","",2);
		hmItemValues[106] =  tech(hmGlobals,item,"05PC0320-TensileStrengthMd","","","","","",2);
		hmItemValues[107] =  tech(hmGlobals,item,"05PC0321-TensileStrengthCd","","","","","",2);
		hmItemValues[108] =  tech(hmGlobals,item,"05PC0322-AbsorbtionCobb","","","","","",2);
		hmItemValues[109] =  tech(hmGlobals,item,"05PC0323-Porosity","","","","","",2);
		hmItemValues[110] =  tech(hmGlobals,item,"05PC0324-Joining","","","","","",2);
		hmItemValues[111] =  tech(hmGlobals,item,"05PC0325-LowerCalorificValueNCV","","","","","",2);
		hmItemValues[112] =  tech(hmGlobals,item,"05PC0326-DensityWith20C","","","","","",2);
		hmItemValues[113] =  tech(hmGlobals,item,"05PC0327-ViscosityWith20C","","","","","",2);
		hmItemValues[114] =  tech(hmGlobals,item,"05PC0328-MaximumSulphurContent","","","","","",2);
		hmItemValues[115] =  tech(hmGlobals,item,"05PC0329-MaximumWaterContent","","","","","",2);
		hmItemValues[116] =  tech(hmGlobals,item,"05PC0330-Pressure","","","","","",2);
		hmItemValues[117] =  tech(hmGlobals,item,"05PC0331-FlashPointInC","","","","","",2);
		hmItemValues[118] =  tech(hmGlobals,item,"05PC0332-DispersionInBoard)","","","","","",2);
		hmItemValues[119] =  tech(hmGlobals,item,"05PC0334-Sealing","","","","","",2);
		hmItemValues[120] =  tech(hmGlobals,item,"05PC0335-SafetyCoefficientCS","","","","","",2);
	}
	hmItemValues[121] =  tech(hmGlobals,item,"05PC0822-SpecificHeat","","","","","",1);
	hmItemValues[122] =  tech(hmGlobals,item,"05PC0823-LightReflection","","","","","",1);
	hmItemValues[123] =  tech(hmGlobals,item,"05PC0824-ThermalResistanceDeclared","","","","","",1);
	hmItemValues[124] =  tech(hmGlobals,item,"05PC0825-ThermalConductivityDeclaredLambda","","","","","",1);
	hmItemValues[125] =  tech(hmGlobals,item,"05PC0826-ChlorideAmount","","","","","",1);
	hmItemValues[126] =  tech(hmGlobals,item,"05PC0827-Formaldehyde","","","","","",1);
	hmItemValues[127] =  tech(hmGlobals,item,"05PC0828-LengthToleranceClass","","","","","",1);
	hmItemValues[128] =  tech(hmGlobals,item,"05PC0829-WidthToleranceClass","","","","","",1);
	hmItemValues[129] =  tech(hmGlobals,item,"05PC0830-Friability","","","","","",1);
	hmItemValues[130] =  tech(hmGlobals,item,"05PC0831-ProliferationHazardousMicroOrganismSusceptibility","","","","","",1);
	hmItemValues[131] =  tech(hmGlobals,item,"05PC0253-IndicativeWeightPerLinearMeter","","","","","",1);
	hmItemValues[132] =  tech(hmGlobals,item,"05PC0313-ElasticModulusEsMpa","","","","","",1);
	
//--------------------------------------------------------------------------------------------------------------------------
	return(hmItemValues);
	
//------------------------------------------------------------------------------------------------------------------------------

}


var hmGlobals = initGlobals();//Initialisation du tableau de variables globales
var ctgs = getCatalogNamesList();//La variable ctgs contient la liste des catalogues disponibles

var hmEntete = [];
hmEntete.add("");
hmEntete.add("ctgCode");
hmEntete.add("status");
hmEntete.add("erpcode");
hmEntete.add("MaterialNumber");
hmEntete.add("OldMaterialNumber");
hmEntete.add("invoiceName");
hmEntete.add("LongName");
hmEntete.add("MaterialType;");
hmEntete.add("PublishedIntoSAP");
hmEntete.add("XPlantMatlStatus");
hmEntete.add("type");

//A REMPLIR 
hmEntete.add("InflammableMaterial");
hmEntete.add("ApparentBulkDensity");
hmEntete.add("ThermalConductivityLambda");
hmEntete.add("ClassFlexuralStrength ");
hmEntete.add("MechanicalStressClass");
hmEntete.add("CombustionContinuousIncandescence");
hmEntete.add("CompressiveStress2%Strain");
hmEntete.add("CompressiveStress5%Strain");
hmEntete.add("DurabilityOfReactionToFire");
hmEntete.add("DurabilityOfThermalResistance");
hmEntete.add("DurabilityThermalResistance");
hmEntete.add("SustainabilityChemicalBiologicalAttacks");
hmEntete.add("dLThickness");
hmEntete.add("CreepCompression");
hmEntete.add("IT249");
hmEntete.add("DynamicStiffness");
hmEntete.add("LongTermThicknessReduction");
hmEntete.add("EffortResistanceCyclicCompression");
hmEntete.add("ThresholdFlexuralStrength");
hmEntete.add("ThicknessTolerancesClass");
hmEntete.add("IndicativeSurfaceMass");
hmEntete.add("SpecifiedSurfaceMass");
hmEntete.add("SpecSurfaceMassTolerance");
hmEntete.add("HardnessInShoreC");
hmEntete.add("SurfaceHardness");
hmEntete.add("WorkingLoad");
hmEntete.add("InertiaFlat");
hmEntete.add("InertiaSection");
hmEntete.add("Squaring");
hmEntete.add("ISOLE");
hmEntete.add("Incompressibility");
hmEntete.add("CompressibilityClass");
hmEntete.add("ServiceabilityCompressionStrength");
hmEntete.add("ServiceabilityDeformation ");
hmEntete.add("ServiceabilityDeformationMaxi");
hmEntete.add("CompressiveStress");
hmEntete.add("SCClassification");
hmEntete.add("MechanicalResistanceToCompression");
hmEntete.add("DeformationUnderSpecifiedConditions");
hmEntete.add("TearStrength");
hmEntete.add("ImpactResistance");
hmEntete.add("DimensionalStability");
hmEntete.add("DimensionalStabilityUnderSpecifiedConditions");
hmEntete.add("BehaviorWithWater");
hmEntete.add("WaterUptakeImmersion");
hmEntete.add("WaterAbsorptionSurfaceBoard");
hmEntete.add("WaterAbsorptionBoardByImmersion");
hmEntete.add("LongTermWaterAbsoptionByImmersion");
hmEntete.add("WaterClassOfBehavior");
hmEntete.add("WaterClassOfBehaviorOfBoard");
hmEntete.add("ResistanceToFrost");
hmEntete.add("WaterAbsorptionCoefficient");
hmEntete.add("CohesionAndInflexion");
hmEntete.add("ResistanceToInflection");
hmEntete.add("Adhesion");
hmEntete.add("MechanicalResistanceToInflection");
hmEntete.add("TensileStrengthPerpendicularToInsulation");
hmEntete.add("FlexuralStrengthMd");
hmEntete.add("FlexuralStrengthCd");
hmEntete.add("DeformationUnderloadMd");
hmEntete.add("DeformationUnderloadCd");
hmEntete.add("ResidualDeformationMd");
hmEntete.add("ResidualDeformationCd");
hmEntete.add("ResistanceToPunching");
hmEntete.add("UnderloadDeformation");
hmEntete.add("ShearStrength");
hmEntete.add("PermeabilityToVapour");
hmEntete.add("PermeabilityClass");
hmEntete.add("WaterVapourTransmission");
hmEntete.add("FactorOfResistanceToWaterVapour");
hmEntete.add("MouldResistance");
hmEntete.add("ThermalResistance");
hmEntete.add("IndicativeCoefUp");
hmEntete.add("NormalizesUpCalculation");
hmEntete.add("ResistanceOfAssemblyRp");
hmEntete.add("ThermalExpansion");
hmEntete.add("EuroclasseClassification");
hmEntete.add("ClassificationM");
hmEntete.add("EuroclasseClassificationOfBoard");
hmEntete.add("ClassificationMOfBoard");
hmEntete.add("ORReactionFire");
hmEntete.add("FireInsulation");
hmEntete.add("FireResistance");
hmEntete.add("ORFireResistance");
hmEntete.add("AcousticAbsorptionCoef");
hmEntete.add("ORSoundAbsorption");
hmEntete.add("IndexAttenuationOfNoise");
hmEntete.add("DirectAirborneNoiseInsulation");
hmEntete.add("AirPermeability");
hmEntete.add("MaxiLoading");
hmEntete.add("HeightOfMaxiInstallation");
hmEntete.add("LengthOfCut");
hmEntete.add("MaxiCapacityOfCut");
hmEntete.add("RCT");
hmEntete.add("TensileStrengthMd");
hmEntete.add("TensileStrengthCd");
hmEntete.add("AbsorbtionCobb");
hmEntete.add("Porosity");
hmEntete.add("Joining");
hmEntete.add("LowerCalorificValueNCV");
hmEntete.add("DensityWith20C");
hmEntete.add("ViscosityWith20C");
hmEntete.add("MaximumSulphurContent");
hmEntete.add("MaximumWaterContent");
hmEntete.add("Pressure");
hmEntete.add("FlashPointInC");
hmEntete.add("DispersionInBoard)");
hmEntete.add("Sealing");
hmEntete.add("SafetyCoefficientCS");

hmEntete.add("SpecificHeat");
hmEntete.add("LightReflection");
hmEntete.add("ThermalResistanceDeclared");
hmEntete.add("ThermalConductivityDeclaredLambda");
hmEntete.add("ChlorideAmount");
hmEntete.add("Formaldehyde");
hmEntete.add("LengthToleranceClass");
hmEntete.add("WidthToleranceClass");
hmEntete.add("Friability");
hmEntete.add("ProliferationHazardousMicroOrganismSusceptibility");
hmEntete.add("IndicativeWeightPerLinearMeter");
hmEntete.add("ElasticModulusEsMpa");

var filename="report_05PC_PerformancesConfidentielles_" + today().formatDate("yyyyMMdd_HHmmss")+".csv";
var writer=createOtherOut(filename,"UTF_8");
var intWrite=createJavaMethod("java.io.PrintWriter","write" ,"int");
writer.runJavaMethod(intWrite,65279); // put UTF8 BOM, allows excel to open the file directly !

writer.writeln(buildSAPCSV(hmGlobals,hmEntete));

var oKey;//Clef de la hash map
var ctg;//Catalogue utilisé


forEachHmElement(ctgs,oKey,ctg) {//Pour chaque element d'un catalogue de la liste de catalogues
	if (ctg.startsWith("C")){ // Exclude other catalogs
		logDebug("CTG : "+ctg);	
		forEachCtgItem(ctg,item) {//Pour chaque item du catalogue
			var hmEntry = getHmItemBatidataValues(hmGlobals,item,i);//On copie les attributs de l'item dans hmEntry
			if(hmEntry.size()>0) {//Si hmEntry n'est pas vide
				writer.writeln(buildSAPCSV(hmGlobals,hmEntry));//On appelle la fonction de création de fichier csv et on rajoute l'item et ses attributs
			}
		}
	}
}

logDebug("Traitement termine");
