//
// Export Données Onglet Appellation Commerciale
//
// Création : Mélanie Vandersteen 
// Date création : 26/11/2014
//

//	FONCTION QUI INITIALISE LA HASH MAP DE VARIABLES GLOBALES
function initGlobals(){
	//On déclare la hash map
    var hmGlobals = [];
	//On récupère des fonctions qui sont stockées dans des librairies de fonctions,
	//Elles seront utiles plus tard dans le programme
	//On les stocke dans une hash map de variables globales
    hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"] = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath");
    hmGlobals["FN_GET_ITEM_TYPE"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getItemType");
    hmGlobals["FN_GET_CHILD_ITEMS"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getChildItems");
    hmGlobals["FN_GET_PARENT_ITEM"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getParentItem");
    hmGlobals["FN_GET_CONST"]=getScriptByPath("/scripts/triggers/LG.Library.Const").getFunctionByName("getConst");
    hmGlobals["FN_GET_ENTRY_NODE_AT_LEVEL"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodeAtLevel");
    hmGlobals["FN_GET_PARENT_AT_LEVEL"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getParentAtLevel");
    hmGlobals["FN_GET_STATUS"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getStatus");
	//Recupere la constant kheops "QUOT" de la table L902-KheopsConstants et la stocke dans la variable globale
    hmGlobals["QUOT"] = lookupValues(getLkpByName("L902-KheopsConstants"),"QUOT")[0];
    return hmGlobals;
}

//	FONCTION QUI RETOURNE LE PARENT D'UN ITEM	
function getParentItem(hmGlobals,item){
	//On retourne l'objet item situé à l'adresse contenue dans la varible globale "PARENT_RELATIONSHIP_FIELD"
	return item.getItemUsingEntryRelationshipAttrib(hmGlobals["PARENT_RELATIONSHIP_FIELD"]);
}

//	FONCTION QUI RETOURNE LES PARENTS-GRANDS PARENTS D'UN ITEM	(tous les ancètres de l'item)
function getParentsItem(hmGlobals,item,hmParents){
	//Ajoute l'item/parent/grandparent à la hashmap de Parents (selon l'étape de récursivité sur la fonction)
	hmParents.add(item);
	//On appelle la fonction getParentItem décrite ci dessus et qui retourne le parent d'un item 
	//on stocke le résultat dans parent
	var parent = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);
	if(parent!=null) {//Si il y a un parent on effectue une récursivité avec comme argument parent (pour trouver les grand-parents)
		return(getParentsItem(hmGlobals,parent,hmParents));
	}
	else {//sinon on retourne hmParents
		return(hmParents);
	}
}

//	FONCTION QUI RETOURNE LE TYPE D'UN ITEM	
//La méthode associée à la variable hmGlobals["FN_GET_ITEM_TYPE"] (ici il s'agit de getItemType())
//est exécutée sur l'objet item passé en parametres via la fonction invoke()
function getType(hmGlobals,item){
	return hmGlobals["FN_GET_ITEM_TYPE"].invoke(item);
}

//	FONCTION QUI RETOURNE LES PARENTS DE L'ITEM A UN NIVEAU DONNE (PROD, BUNIT, PITEM...)
function getParentAtLevel(hmGlobals,item,iLevel) {
	if(iLevel==0) {//Si le niveau pour récupérere la valeur de l'attribut est au niveau courant on retourne l'item
		return(item);
	}
	else {//On appelle la fonction getParentItem décrite ci dessus et qui retourne le parent d'un item 
		//on stocke le résultat dans parentItem
		var parentItem = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);
		if(parentItem==null) {//si l'item n'a pas de parent
			return(null);//on retourne null
		}
		else {//sinon on recherche les parents au niveau supérieur (PROD, BUNIT, PITEM...) par recursivite
			return(getParentAtLevel(hmGlobals,parentItem,iLevel+1));
		}
	}
}

//	FONCTION QUI RETOURNE LE NOEUD (attribut de l'item) EN FONCTION DU CHEMIN 
//la méthode associée à la variable hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"] (ici il s'agit de getEntryNodesFromAttrPath())
//est exécutée sur item et sNodeName via la fonction invoke()
function getEn(hmGlobals, item, sNodeName){
	return hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"].invoke(item,sNodeName);
}

//	FONCTION QUI RETOURNE LA VALEUR DU NOEUD (valeur attribut de l'item) EN FONCTION DU CHEMIN 
//Idem fonction précédente sauf que l'on récupère la valeur correspondand au noeud spécifié
function getValue(hmGlobals, item, sNodeName){
	return hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"].invoke(item,sNodeName)[0].getEntryNodeValue();
}

//	FONCTION QUI RETOURNE LE PARENT DE PLUS HAUT NIVEAU		
function getHigherParent(hmGlobals , hmParents, sAttrPath){
	var i;
	for(i=0;i<hmParents.size();i++) {//On boucle sur la hashmap de parents
		if(getEn(hmGlobals,hmParents[i],sAttrPath)!=null) {//Si la valeur de l'attribut du noeud parent n'est pas nul
			return(hmParents[i]);//On retourne le noeud parent
		}
	}
	return(null);
}

//	FONCTION QUI RECUPERE L'ITEM A UN NIVEAU DONNE
function getItemAtLevel(hmGlobals,item,sLevel){
	if (item==null) {//Si l'item n'existe pas, on retourne la valeur null
		return null;
	}
	else
	{
		if (getType(hmGlobals,item)==sLevel) //Si le type de l'item correspond au niveau demandé, on retourne l'item
		{
			return item;
		}
		
		var oParent = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);//Sinon on récupère le parent de l'item
		return getItemAtLevel(hmGlobals,oParent,sLevel);//Et on regarde si il correspond au niveau demandé par recursivité
	}
}

//	FONCTION QUI RECUPERE LA PLUS GRANDE CLEF DE LA HASH MAP (= taille max de la hashmap pour pouvoir boucler dessus)
function getMaxHm(hm) {
	var oKey;
	var oValue;
	var max = 0;
	forEachHmElement(hm,oKey,oValue) {//Pour chaque couple (Okey, oValue) de la hash map
		if(toInteger(oKey)>max) {//Si la conversion en int de oKey est supérieure a max
			max = toInteger(oKey);//On place la valeur de oKey dans max
		}	
	}	
	return(max);//On retourne la clef la plus grande de la hashmap
}

//	FONCTION QUI CONSTRUIT LE FICHIER CSV
function buildSAPCSV(hmGlobals,hm) {
	var i;
	var csv = "";
	var val ="";
	for(i=1;i<getMaxHm(hm);i++) {//Pour chaque valeur inférieure à la valeur max de la hashmap
		if(hm[i]==null) {//Si la valeur contenue dans la hashmap est a NULL
			val = "";//La variable val prend pour valeur ""(vide)
		}
		else {//Sinon on copie la valeur de la hashmap dans val
			val = toString(hm[i]);
			if(val.contains("null")==true) {//Si val contient la chaine de caractères null
				val = "";//La variable val pren pour valeur ""(vide)
			}
		}
		//csv = csv  + escapeForCSV(val) + ",";
		//On remplit la variable csv avec les différentes valeurs en respectant la syntaxe du format
		//Exemple : "val1","val2","val3"...
		csv = csv  + hmGlobals["QUOT"] + val + hmGlobals["QUOT"] + ";";
	}
	//On réitère l'opération pour la dernière valeur de la hashmap (valeur max) car non prise en compe dans la boucle for (i<MaxHm(hm))
	if(hm[i]==null) {
			val = "";
		}
		else {
			val = toString(hm[i]);
			if(val.contains("null")==true) {
				val = "";
			}
		}
	//csv = csv + escapeForCSV(val);
	csv = csv  + hmGlobals["QUOT"] + val + hmGlobals["QUOT"];
	return(csv);//On renvoie la variable csv qui respecte le format du meme nom
}

function getPublishingItemAtLevel(oitem,sLevel){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getPublishingItemAtLevel").invoke(oitem, sLevel);
}

// FONCTION QUI RECUPERE LA OU LES VALEURS D'UN ATTRIBUT (champr de la matrice Kheops) POUR UN ITEM DONNE 
function tech(hmGlobals,item,sAttrName,sGroupingName,sLkpName,iLkpRow,sAttrNameGroupingKey,sAttrValGroupingKey,iLevel) {
//- hmGlobals : tableau de variables globales
//- item : item
//- sAttrName : nom de l'attribut (ex : "06DN0346-IsInCatalog")
//- sGroupingName : nom du grouping (ex : "ChannelOfDistributionGroup")
//- sLkpName : nom de la lookup table (ex : "L103-Marque ciale Detenteur - Brand name")
//- iLkpRow : numéro de la colonne de la lookup table (ex : 2)
//- sAttrNameGroupingKey : nom de l’attribut clé du grouping 
//- sAttrValGroupingKey : valeur de l’attribut clé du grouping 
//- iLevel : niveau où récupérer la valeur de l'attribut (de -2 à 4)
	
	var val = [];//tableau des valeurs de sAttrName si c'est un grouping ou un multivalué
	var en;
	var sKey;
	
	//Si on veut la valeur de sAttrName à un niveau différent de celui sur lequel on est
	//On remplace l'item item par celui du niveau désiré  
	if(iLevel!=null) {
		//0 ou null = valeur de l'attribut de l'item au niveau courant,
		//1 = valeur de l'attribut de l'item au niveau Prod,
		//2 = valeur de l'attribut de l'item au niveau BUnit,
		//3 = valeur de l'attribut de l'item au niveau Pitem1,
		//4 = valeur de l'attribut de l'item au niveau Pitem2,
		//-1 = valeur de l'attribut de l'item au niveau du parent,
		//-2 = valeur de l'attribut de l'item au niveau du grand parent
		var sLevel = "";
		if(iLevel ==1 ){//Si le niveau est a 1, sLevel prend la valeur "Prod"
			sLevel = "Prod";
		}
		else if (iLevel == 2) {//Si le niveau est a 2, sLevel prend la valeur "BUnit"
			sLevel = "BUnit";
		}
		else if (iLevel == 3) {//Si le niveau est a 3, sLevel prend la valeur "PItem"
			sLevel = "PItem";
		}
		else if (iLevel < 0) {//Si le niveau est inférieur a 0, on récupère l'attribut chez le parent, grand-parent de l'item
			//item = hmGlobals["FN_GET_PARENT_AT_LEVEL"].invoke(hmGlobals,item,iLevel);
			item = getParentAtLevel(hmGlobals,item,iLevel);
		}
		if(sLevel!="") {//Si la variable sLevel n'est pas vide, on récupère l'item au niveau demandé
			item = getItemAtLevel(hmGlobals,item,sLevel);
		}
	}
	
	//---------------------------------------------------------------------------------------------------------------------
	
	//Si on est dans un grouping
	if(checkString(sGroupingName,"")!=""){
		var myGroup = getEn(hmGlobals,item,sGroupingName);
		if(myGroup!=null) {
			var i;
			//On parcourt le grouping sGroupingName
			for(i=0;i<myGroup.size();i++) {
				//Si on veut récupérer les valeurs de sAttrName sur une occcurrence spéciale
				if(checkString(sAttrNameGroupingKey,"")!="" && checkString(sAttrValGroupingKey,"") != "") {
					//Recherche de l'occurrence tel que sAttrNameGroupingKey = sAttrValGroupingKey
					if(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrNameGroupingKey)==sAttrValGroupingKey) {						
						en = getEn(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
						if(en!=null) {
							//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
							if(iLkpRow!=null && checkString(sLkpName,"")!="") {
								var j;
								for(j=0;j<en.size();j++) {
									//sKey = getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
									sKey = en[j].getEntryNodeValue();
									if(sKey!=null) {
										val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
									}
								}
							}
							//Si on veut simplement la valeur de l'attribut de sAttrName
							else {
								var j;
								for(j=0;j<en.size();j++) {
									//val.add(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName));
									val.add(en[j].getEntryNodeValue());
								}		
							}
						}
					}
				}
				//Si on veut récupérer les valeurs de sAttrName sur toutes les occurrences
				else {
					en = getEn(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
					if(en!=null) {
						//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
						if(iLkpRow!=null && checkString(sLkpName,"")!="") {
							var j;
							for(j=0;j<en.size();j++) {
								//sKey = getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
								sKey = en[j].getEntryNodeValue();
								if(sKey!=null) {
									val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
								}
							}	
						}
						//Si on veut simplement la valeur de l'attribut de sAttrName
						else {
							var j;
							for(j=0;j<en.size();j++) {
								//val.add(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName));
								val.add(en[j].getEntryNodeValue());
							}	
						}
					}
				}
			}
		}
	}
	//Si on n'est pas dans un grouping
	else {
		en = getEn(hmGlobals,item,sAttrName);
		if(en!=null) {
			//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
			if(iLkpRow!=null && checkString(sLkpName,"")!="") {
				var j;
				for(j=0;j<en.size();j++) {
					sKey = en[j].getEntryNodeValue();
					if(sKey!=null) {
						val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
					}
				}	
			}
			//Si on veut simplement la valeur de l'attribut de sAttrName
			else {
				var j;
				for(j=0;j<en.size();j++) {
					val.add(en[j].getEntryNodeValue());
				}	
			}	
		}
	}
	
	//out.writeln(en);
	//out.writeln(val);
	
	//-----------------------------------------------------------------------------------------------------------------------
	
	//CHAINE FINALE DE L'ATTRIBUT
	var myStr = ""; 
	if(val.size()==0) {//Si val est vide myStr prend ma valeur null
		myStr = "null";
	}
	if(val.size()==1) {//Si val contient 1 valeur on convertit la valeur en string et on la place dans myStr
		myStr = toString(val[0]);
	}
	if(val.size()>1) {//Si val contient plus d'une valeur
		var i;
		for(i=0;i<val.size()-1;i++) {//On boucle sur les valeurs contenues dans val[]
			myStr = myStr + toString(val[i]) + "@#@";//On les copie dans myStr en les separant par @#@
		}
		myStr = myStr + toString(val[i]);//on copie la derniere valeur (val.size()) dans myStr car elle n'est pas prise en compte dans la boucle (i<val.size())
	}
	return(myStr);
}

//FONCTION QUI RECUPERE L'ENSEMBLE DES CHAMPS QUI DECRIVENT UN ITEM 
//De nombreuses conditions ternaires sont mises en oeuvre afin de respecter les regles de gestions 
//associees aux differents champs 
function getHmItemBatidataValues(hmGlobals,item){
	var hmParents = [];
	hmParents = getParentsItem(hmGlobals,item,hmParents);//Remplissage de la hashmap avec les parents de l'item 
	var hmItemValues = [];
	var type = getType(hmGlobals,item);//Recuperation du type de l'item
	var status = hmGlobals["FN_GET_STATUS"].invoke(item);//Recuperation du statut de l'item
    // Récupération du parent
	var parentItem = item.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
	// Récupération du nom du catalogue de l'item
	var ctgName = item.getCatalog().getCtgName();
	var ctgCode = substring(ctgName,1,4);
	var validToDate = getValue(hmGlobals,item,"06DN0427-ValidToDate");
	var effectiveDate = getValue(hmGlobals,item,"06DN0425-effectiveDate");
	var effectiveDateReformat = effectiveDate.formatDate("dd/MM/yyyy");
	var validToDateReformat = validToDate.formatDate("dd/MM/yyyy");
	var MaterialType = "";
	var BaseUnitOfMeasure = "";	
	
	hmItemValues[1] = ctgCode;
	hmItemValues[2] = status;
	var erpcode = tech(hmGlobals,item,"01AC0044-ERPCode");
	hmItemValues[3] = erpcode;
	hmItemValues[4] = tech(hmGlobals,item,"01AC0664-MaterialNumber");
	hmItemValues[4] = replaceString(hmItemValues[4],"0000000000000","");
	hmItemValues[4] = replaceString(hmItemValues[4],"000000000000","");
	hmItemValues[4] = replaceString(hmItemValues[4],"00000000000","");	
	hmItemValues[5] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
	hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	
	hmItemValues[7] = tech(hmGlobals,item,"01AC0012-LongName");		
	if (type == "BUnit" || type == "Prod") {
		MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
	} else {
		MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType","","","","","",2);
	}				
	hmItemValues[8] = MaterialType;	
	hmItemValues[9] = tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
	hmItemValues[10] = tech(hmGlobals,item,"01AC0670-XPlantMatlStatus");
	hmItemValues[11] = type;		
	
//A REMPLIR 
	var SecurityBasicData = "";
	var CertificateQualityAnalysis = "";
	if (type == "PItem") {
		SecurityBasicData =  tech(hmGlobals,item,"07MO0484-SecurityBasicData","","","","","",2);
		CertificateQualityAnalysis = tech(hmGlobals,item,"07MO0485-CertificateQualityAnalysis","","","","","",2);
	} else {
		SecurityBasicData =  tech(hmGlobals,item,"07MO0484-SecurityBasicData");
		CertificateQualityAnalysis = tech(hmGlobals,item,"07MO0485-CertificateQualityAnalysis");
	}
	hmItemValues[12] =  SecurityBasicData;
	hmItemValues[13] =  CertificateQualityAnalysis;
	
	hmItemValues[14] =  tech(hmGlobals,item,"07MO0441-ProductMarket","","","","","",1);
	hmItemValues[15] =  tech(hmGlobals,item,"07MO0442-ProductUse","","","","","",1);
	hmItemValues[16] =  tech(hmGlobals,item,"07MO0443-CompatibleWetBuilding","","","","","",1);
	hmItemValues[17] =  tech(hmGlobals,item,"07MO0336-MaxiThicknessSupport","","","","","",1);
	hmItemValues[18] =  tech(hmGlobals,item,"07MO0470-GypsumBlocksPerSqM","","","","","",1);
	hmItemValues[19] =  tech(hmGlobals,item,"07MO0471-WeightInKgPerSqM","","","","","",1);
	hmItemValues[20] =  tech(hmGlobals,item,"07MO0446-AspectType","","","","","",1);
	hmItemValues[21] =  tech(hmGlobals,item,"07MO0447-PowderWaterRatio","","","","","",1);
	hmItemValues[22] =  tech(hmGlobals,item,"07MO0448-Shinkage","","","","","",1);
	hmItemValues[23] =  tech(hmGlobals,item,"07MO0472-ConsumptionOfFacing","","","","","",1);
	hmItemValues[24] =  tech(hmGlobals,item,"07MO0473-ConsumptionCMOfThickness","","","","","",1);
	hmItemValues[25] =  tech(hmGlobals,item,"07MO0449-MiniDescent","","","","","",1);
	hmItemValues[26] =  tech(hmGlobals,item,"07MO0450-MaxiDescent","","","","","",1);
	hmItemValues[27] =  tech(hmGlobals,item,"07MO0451-ModeOfApplication","","","","","",1);
	hmItemValues[28] =  tech(hmGlobals,item,"07MO0452-ModeOfMixing","","","","","",1);
	hmItemValues[29] =  tech(hmGlobals,item,"07MO0453-Latency","","","","","",1);
	hmItemValues[30] =  tech(hmGlobals,item,"07MO0454-TimeOfUse","","","","","",1);
	hmItemValues[31] =  tech(hmGlobals,item,"07MO0455-TimeOfRaising","","","","","",1);
	hmItemValues[32] =  tech(hmGlobals,item,"07MO0462-ApplicationTemperature","","","","","",1);
	hmItemValues[33] =  tech(hmGlobals,item,"07MO0463-TimeOfHardening","","","","","",1);
	hmItemValues[34] =  tech(hmGlobals,item,"07MO0456-LastAdjustment","","","","","",1);
	hmItemValues[35] =  tech(hmGlobals,item,"07MO0457-StartOfSmoothing","","","","","",1);
	hmItemValues[36] =  tech(hmGlobals,item,"07MO0458-FirstSmoothingByRubbing","","","","","",1);
	hmItemValues[37] =  tech(hmGlobals,item,"07MO0459-SecondSmoothingWithSeivedPPM","","","","","",1);
	hmItemValues[38] =  tech(hmGlobals,item,"07MO0460-LatencyFor2ndMasterKey","","","","","",1);
	hmItemValues[39] =  tech(hmGlobals,item,"07MO0461-TotalTime","","","","","",1);
	hmItemValues[40] =  tech(hmGlobals,item,"07MO0481-CompatibleSupports","","","","","",1);
	hmItemValues[41] =  tech(hmGlobals,item,"07MO0482-ManifestlyIncompatibleSupports","","","","","",1);
	hmItemValues[42] =  tech(hmGlobals,item,"07MO0475-Consumption","","","","","",1);
	hmItemValues[43] =  tech(hmGlobals,item,"07MO0476-RatioSimpleProfile40","","","","","",1);
	hmItemValues[44] =  tech(hmGlobals,item,"07MO0477-RatioSimpleProfile60","","","","","",1);
	hmItemValues[45] =  tech(hmGlobals,item,"07MO0478-RatiojoinedProfile40","","","","","",1);
	hmItemValues[46] =  tech(hmGlobals,item,"07MO0479-RatiojoinedProfile60","","","","","",1);
	hmItemValues[47] =  tech(hmGlobals,item,"07MO0480-AverageConsumption","","","","","",1);
	hmItemValues[48] =  tech(hmGlobals,item,"07MO0464-MaxiHeightOfUse","","","","","",1);
	hmItemValues[49] =  tech(hmGlobals,item,"07MO0469-VideoOfImplementation","","","","","",1);
	hmItemValues[50] =  tech(hmGlobals,item,"07MO0465-ImplementationAdvice","","","","","",1);

	hmItemValues[51] =  tech(hmGlobals,item,"07MO0444-AdherenceToConcrete","","","","","",1);
	hmItemValues[52] =  tech(hmGlobals,item,"07MO0445-AdherenceToEPS","","","","","",1);
	hmItemValues[53] =  tech(hmGlobals,item,"07MO0466-UsageAdvice","","","","","",1);
	hmItemValues[54] =  tech(hmGlobals,item,"07MO0467-Application","","","","","",1);
	hmItemValues[55] =  tech(hmGlobals,item,"07MO0483-EmissionDangerousSubstances","","","","","",1);
	hmItemValues[56] =  tech(hmGlobals,item,"07MO0486-ShelfLife","","","","","",1);
	hmItemValues[57] =  tech(hmGlobals,item,"07MO0487-ShelfLifeUnit","","","","","",1);
	if (type == "PItem" || type == "BUnit") {
		hmItemValues[58] =  tech(hmGlobals,item,"07MO0337-CompatibilitySupport","","","","","",2);
		hmItemValues[59] =  tech(hmGlobals,item,"07MO0474-UsageSqMBagThickness","","","","","",2);
		hmItemValues[60] =  tech(hmGlobals,item,"07MO0486-ShelfLife","","","","","",2);
		hmItemValues[61] =  tech(hmGlobals,item,"07MO0487-ShelfLifeUnit","","","","","",2);
	}
			
//--------------------------------------------------------------------------------------------------------------------------
	return(hmItemValues);
	
//------------------------------------------------------------------------------------------------------------------------------

}


var hmGlobals = initGlobals();//Initialisation du tableau de variables globales
var ctgs = getCatalogNamesList();//La variable ctgs contient la liste des catalogues disponibles

var hmEntete = [];
hmEntete.add("");
hmEntete.add("ctgCode");
hmEntete.add("status");
hmEntete.add("erpcode");
hmEntete.add("MaterialNumber");
hmEntete.add("OldMaterialNumber");
hmEntete.add("invoiceName");
hmEntete.add("LongName");
hmEntete.add("MaterialType;");
hmEntete.add("PublishedIntoSAP");
hmEntete.add("XPlantMatlStatus");
hmEntete.add("type");

//A REMPLIR 
hmEntete.add("SecurityBasicData");
hmEntete.add("CertificateQualityAnalysis");
hmEntete.add("ProductMarket");
hmEntete.add("ProductUse");
hmEntete.add("CompatibleWetBuilding");
hmEntete.add("MaxiThicknessSupport");
hmEntete.add("GypsumBlocksPerSqM");
hmEntete.add("WeightInKgPerSqM");
hmEntete.add("AspectType");
hmEntete.add("PowderWaterRatio");
hmEntete.add("Shinkage");
hmEntete.add("ConsumptionOfFacing");
hmEntete.add("ConsumptionCMOfThickness");
hmEntete.add("MiniDescent");
hmEntete.add("MaxiDescent");
hmEntete.add("ModeOfApplication");
hmEntete.add("ModeOfMixing");
hmEntete.add("Latency");
hmEntete.add("TimeOfUse");
hmEntete.add("TimeOfRaising");
hmEntete.add("ApplicationTemperature");
hmEntete.add("TimeOfHardening");
hmEntete.add("LastAdjustment");
hmEntete.add("StartOfSmoothing");
hmEntete.add("FirstSmoothingByRubbing");
hmEntete.add("SecondSmoothingWithSeivedPPM");
hmEntete.add("LatencyFor2ndMasterKey");
hmEntete.add("TotalTime");
hmEntete.add("CompatibleSupports");
hmEntete.add("ManifestlyIncompatibleSupports");
hmEntete.add("Consumption");
hmEntete.add("RatioSimpleProfile40");
hmEntete.add("RatioSimpleProfile60");
hmEntete.add("RatiojoinedProfile40");
hmEntete.add("RatiojoinedProfile60");
hmEntete.add("AverageConsumption");
hmEntete.add("MaxiHeightOfUse");
hmEntete.add("VideoOfImplementation");
hmEntete.add("ImplementationAdvice");

hmEntete.add("AdherenceToConcrete");
hmEntete.add("AdherenceToEPS");
hmEntete.add("UsageAdvice");
hmEntete.add("Application");
hmEntete.add("EmissionDangerousSubstances");
hmEntete.add("ShelfLife");
hmEntete.add("ShelfLifeUnit");
hmEntete.add("CompatibilitySupport");
hmEntete.add("UsageSqMBagThickness");
hmEntete.add("ShelfLife");
hmEntete.add("ShelfLifeUnit");


out.writeln(buildSAPCSV(hmGlobals,hmEntete));

var oKey;//Clef de la hash map
var ctg;//Catalogue utilisé


forEachHmElement(ctgs,oKey,ctg) {//Pour chaque element d'un catalogue de la liste de catalogues
	logDebug("CTG : "+ctg);	
	forEachCtgItem(ctg,item) {//Pour chaque item du catalogue
		var hmEntry = getHmItemBatidataValues(hmGlobals,item,i);//On copie les attributs de l'item dans hmEntry
		if(hmEntry.size()>0) {//Si hmEntry n'est pas vide
			out.writeln(buildSAPCSV(hmGlobals,hmEntry));//On appelle la fonction de création de fichier csv et on rajoute l'item et ses attributs
		}
	}
}



logDebug("Traitement termine");
