/// @brief Logs messages according to the given log level into different logging facilities.
/// @param sLevel - logging level: "DEBUG", "INFO", "WARN", "ERROR", "FATAL"
/// @param logContext - log context
/// @param sMsg - logging message
//:PRFUNCTION void log(String sLevel, LogContext logContext, String sMsg)
function log(sLevel, logContext, sMsg) {
	if (logContext != null && logContext.log != null) {
		logContext.log.invoke(sLevel, logContext, sMsg);
	} else {
    	getLogger(checkString(getCurrentUserName(), "default")).loggerDebug(sMsg);
	}
	if (logContext != null && logContext.out != null) { logContext.out.writeln(sLevel + " " + sMsg); }
	getLogger("Lafarge.DataEntry").loggerInfo(sMsg);

}

//EntryNode getEn(hmGlobals,item,String)
//Return the entry node 
//Parameters
//-hmGlobals : global variable to call the function getEntryNodeForAttributePath
//-item : item (generic)
//-String : name of the attribute
//Returns EntryNode
function getEn(hmGlobals, item, sNodeName){
    return hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"].invoke(item,sNodeName);
}

/// @brief Saves the item and throws an exception if there are validation errors.
/// @brief Helper function for saving items and throwing possible validation errors
/// @param itm - catalog item
/// @return void -
//:PRFUNCTION void saveItem(Item itm)
function saveItem(itm) {
	var errors = itm.saveCtgItem();
	if (errors != null) {
		var sKey = checkString(itm.getPrimaryKey(), "NULL");
		var globalErrors = errors.getGlobalErrors();
		if (globalErrors != null && globalErrors.size() > 0) {
			log("ERROR", [], "Global errors on save of item '" + sKey + "': " + checkString(globalErrors, ""));
			throwError("Global errors on save of item '" + sKey + "': " + checkString(globalErrors, ""));
		}
		var locationErrors = errors.getLocationErrors();
		if (locationErrors != null && locationErrors.size() > 0) {
			log("ERROR", [], "Location errors on save of item '" + sKey + "': " + checkString(locationErrors, ""));
			throwError("Location errors on save of item '" + sKey + "': " + checkString(locationErrors, ""));
		}
	}
}

function getItemType(item,hmGlobals) {
	var itemPK=item.getPrimaryKey();
	var itemType="";
	if (itemPK.contains("P")) {
		itemType="Prod";
	}
	else if (itemPK.contains("B")) {
		itemType="Bunit";
	}
	else if (itemPK.contains("I")) {
		var itemParentPK=getEn(hmGlobals,item,"99CTL100-ParentItem")[0].getEntryNodeValue();
		var relatedEntryId=checkInt(itemParentPK,0);
		var relatedItemArray=item.getEntryRelatedItemInfo(relatedEntryId);
		var relatedItemPk=checkString(relatedItemArray[1],"");
		if(relatedItemPk!=null && relatedItemPk!="") {
			if (relatedItemPk.contains("B")) {
				itemType="Pitem1";
			}
			else if (relatedItemPk.contains("I")) {
				itemType="Pitem2";
			}
		}
	}
	return(itemType);
}

// (1) deactivate ctg rules
var optionstodesactivate=[];
optionstodesactivate[0]="ALL";
var scriptnameTemp=[];

var oKey;
var ctgName;
var ctgs = getCatalogNamesList();

forEachHmElement(ctgs,oKey,ctgName) {
    // out.writeln("----------------------"+ctgName);
    var ctg = getCtgByName(ctgName);
	
	ctg.disableContainerProcessingOptions(optionstodesactivate);
	
	scriptnameTemp[0]="";
	ctg.setContainerAttribute("PRE_SCRIPT_NAME",scriptnameTemp);
	ctg.saveCatalog();
}

var hmGlobals = getScriptByPath("/scripts/triggers/LG.Library.Const").getFunctionByName("getConst").invoke();
hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"] = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath");

var oKey;
var strCatName;
var ctgs = getCatalogNamesList();

forEachHmElement(ctgs,oKey,strCatName) {
	logDebug("strCatName : "+strCatName);
	if(strCatName!="C185-Outillage général - Other Tools") {
		var catCataglog = getCtgByName(strCatName);
		var lkpPOSG = getLkpByName("L098-Lieux - Places");
		var isItemSet = catCataglog.getItemSetForCatalog();
		forEachItemSetElement(isItemSet, itmProcessingItem){
			var itemPK = itmProcessingItem.getPrimaryKey();
			// out.writeln("itemPK : "+itemPK);
			var strItemType = getItemType(itmProcessingItem, hmGlobals);
			if(strItemType != "Prod"){
				if(!itmProcessingItem.isEntryCheckedOut()){		
					//See if the plant is already in the list
					var strPlantNumber = null;
					var intCount = null;

					var strSecSpecName = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodeFromAttrPath").invoke(itmProcessingItem,"01AC0014-invoiceName").getEntryNodeExactPath();
					if(strSecSpecName!=null && strSecSpecName!="") {
						strSecSpecName = substring(strSecSpecName,1);
						strSecSpecName = checkString(substring(strSecSpecName,0,strSecSpecName.indexOf("/")), "");
						if(strSecSpecName != ""){
							var enRoot = itmProcessingItem.getRootEntryNode();
							var enPOSG = enRoot.getEntryNode(strSecSpecName + "/PlaceOfStorageGroup");
							var hmenChildren = enPOSG.getEntryNodeChildren();
							var testdel=false;
							forEachHmElement(hmenChildren, intCount, enChild){
								var enPOS = enChild.getEntryNode("/06DN0358-PlaceOfStorage");
								if(enPOS != null){
									var strPOS = checkString(enPOS.getEntryNodeValue(), "");
									// out.writeln(strPOS + "  " + itemPK);
									var strNewPlantCode = checkString(lookup(lkpPOSG, strPOS, "C04-SAP Plant of storage"), "empty");
									if(strNewPlantCode == "empty"){
										out.writeln("Delete : " + strPOS + " From  :  " + itemPK);
										enChild.deleteEntryNode();
										testdel=true;
									}
								}
							}
							if(testdel==true) {
								saveItem(itmProcessingItem);
								out.writeln("Save DONE for:" + itemPK);
							}
						}
					}
				}
			}
		}
	}
}
out.writeln("DONE");
logDebug("DONE");

// (3) reactivate ctg rules
var scriptnameTemp2=[];

forEachHmElement(ctgs,oKey,ctgName) {
    // out.writeln("----------------------"+ctgName);
    var ctg = getCtgByName(ctgName);
	scriptnameTemp2[0]="LG.Catalog.PreProc";
	ctg.setContainerAttribute("PRE_SCRIPT_NAME",scriptnameTemp2);
	ctg.saveCatalog();
}
