//
// Export Données Onglet Appellation Commerciale
//
// Création : Mélanie Vandersteen 
// Date création : 26/11/2014
//

//	FONCTION QUI INITIALISE LA HASH MAP DE VARIABLES GLOBALES
function initGlobals(){
	//On déclare la hash map
    var hmGlobals = [];
	//On récupère des fonctions qui sont stockées dans des librairies de fonctions,
	//Elles seront utiles plus tard dans le programme
	//On les stocke dans une hash map de variables globales
    hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"] = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath");
    hmGlobals["FN_GET_ITEM_TYPE"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getItemType");
    hmGlobals["FN_GET_CHILD_ITEMS"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getChildItems");
    hmGlobals["FN_GET_PARENT_ITEM"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getParentItem");
    hmGlobals["FN_GET_CONST"]=getScriptByPath("/scripts/triggers/LG.Library.Const").getFunctionByName("getConst");
    hmGlobals["FN_GET_ENTRY_NODE_AT_LEVEL"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodeAtLevel");
    hmGlobals["FN_GET_PARENT_AT_LEVEL"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getParentAtLevel");
    hmGlobals["FN_GET_STATUS"]=getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getStatus");
	//Recupere la constant kheops "QUOT" de la table L902-KheopsConstants et la stocke dans la variable globale
    hmGlobals["QUOT"] = lookupValues(getLkpByName("L902-KheopsConstants"),"QUOT")[0];
    return hmGlobals;
}

//	FONCTION QUI RETOURNE LE PARENT D'UN ITEM	
function getParentItem(hmGlobals,item){
	//On retourne l'objet item situé à l'adresse contenue dans la varible globale "PARENT_RELATIONSHIP_FIELD"
	return item.getItemUsingEntryRelationshipAttrib(hmGlobals["PARENT_RELATIONSHIP_FIELD"]);
}

//	FONCTION QUI RETOURNE LES PARENTS-GRANDS PARENTS D'UN ITEM	(tous les ancètres de l'item)
function getParentsItem(hmGlobals,item,hmParents){
	//Ajoute l'item/parent/grandparent à la hashmap de Parents (selon l'étape de récursivité sur la fonction)
	hmParents.add(item);
	//On appelle la fonction getParentItem décrite ci dessus et qui retourne le parent d'un item 
	//on stocke le résultat dans parent
	var parent = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);
	if(parent!=null) {//Si il y a un parent on effectue une récursivité avec comme argument parent (pour trouver les grand-parents)
		return(getParentsItem(hmGlobals,parent,hmParents));
	}
	else {//sinon on retourne hmParents
		return(hmParents);
	}
}

//	FONCTION QUI RETOURNE LE TYPE D'UN ITEM	
//La méthode associée à la variable hmGlobals["FN_GET_ITEM_TYPE"] (ici il s'agit de getItemType())
//est exécutée sur l'objet item passé en parametres via la fonction invoke()
function getType(hmGlobals,item){
	return hmGlobals["FN_GET_ITEM_TYPE"].invoke(item);
}

//	FONCTION QUI RETOURNE LES PARENTS DE L'ITEM A UN NIVEAU DONNE (PROD, BUNIT, PITEM...)
function getParentAtLevel(hmGlobals,item,iLevel) {
	if(iLevel==0) {//Si le niveau pour récupérere la valeur de l'attribut est au niveau courant on retourne l'item
		return(item);
	}
	else {//On appelle la fonction getParentItem décrite ci dessus et qui retourne le parent d'un item 
		//on stocke le résultat dans parentItem
		var parentItem = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);
		if(parentItem==null) {//si l'item n'a pas de parent
			return(null);//on retourne null
		}
		else {//sinon on recherche les parents au niveau supérieur (PROD, BUNIT, PITEM...) par recursivite
			return(getParentAtLevel(hmGlobals,parentItem,iLevel+1));
		}
	}
}

//	FONCTION QUI RETOURNE LE NOEUD (attribut de l'item) EN FONCTION DU CHEMIN 
//la méthode associée à la variable hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"] (ici il s'agit de getEntryNodesFromAttrPath())
//est exécutée sur item et sNodeName via la fonction invoke()
function getEn(hmGlobals, item, sNodeName){
	return hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"].invoke(item,sNodeName);
}

//	FONCTION QUI RETOURNE LA VALEUR DU NOEUD (valeur attribut de l'item) EN FONCTION DU CHEMIN 
//Idem fonction précédente sauf que l'on récupère la valeur correspondand au noeud spécifié
function getValue(hmGlobals, item, sNodeName){
	return hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"].invoke(item,sNodeName)[0].getEntryNodeValue();
}

//	FONCTION QUI RETOURNE LE PARENT DE PLUS HAUT NIVEAU		
function getHigherParent(hmGlobals , hmParents, sAttrPath){
	var i;
	for(i=0;i<hmParents.size();i++) {//On boucle sur la hashmap de parents
		if(getEn(hmGlobals,hmParents[i],sAttrPath)!=null) {//Si la valeur de l'attribut du noeud parent n'est pas nul
			return(hmParents[i]);//On retourne le noeud parent
		}
	}
	return(null);
}

//	FONCTION QUI RECUPERE L'ITEM A UN NIVEAU DONNE
function getItemAtLevel(hmGlobals,item,sLevel){
	if (item==null) {//Si l'item n'existe pas, on retourne la valeur null
		return null;
	}
	else
	{
		if (getType(hmGlobals,item)==sLevel) //Si le type de l'item correspond au niveau demandé, on retourne l'item
		{
			return item;
		}
		
		var oParent = getParentItem(hmGlobals["FN_GET_CONST"].invoke(),item);//Sinon on récupère le parent de l'item
		return getItemAtLevel(hmGlobals,oParent,sLevel);//Et on regarde si il correspond au niveau demandé par recursivité
	}
}

//	FONCTION QUI RECUPERE LA PLUS GRANDE CLEF DE LA HASH MAP (= taille max de la hashmap pour pouvoir boucler dessus)
function getMaxHm(hm) {
	var oKey;
	var oValue;
	var max = 0;
	forEachHmElement(hm,oKey,oValue) {//Pour chaque couple (Okey, oValue) de la hash map
		if(toInteger(oKey)>max) {//Si la conversion en int de oKey est supérieure a max
			max = toInteger(oKey);//On place la valeur de oKey dans max
		}	
	}	
	return(max);//On retourne la clef la plus grande de la hashmap
}
//	FONCTION QUI CONSTRUIT LE FICHIER CSV
function buildSAPCSV(hmGlobals,hm) {
	var i;
	var csv = "";
	for(i=1;i<=getMaxHm(hm);i++) {//Pour chaque valeur inférieure à la valeur max de la hashmap
		var val = toString(hm[i]);
		if (val=="null"){val="";}
		csv = csv  + escapeForCSV(val) + ";";
	}
	return(csv);
}


function getPublishingItemAtLevel(oitem,sLevel){
    return getScriptByPath("/scripts/triggers/LG.Library.LGUtils")
              .getFunctionByName("getPublishingItemAtLevel").invoke(oitem, sLevel);
}

// FONCTION QUI RECUPERE LA OU LES VALEURS D'UN ATTRIBUT (champr de la matrice Kheops) POUR UN ITEM DONNE 
function tech(hmGlobals,item,sAttrName,sGroupingName,sLkpName,iLkpRow,sAttrNameGroupingKey,sAttrValGroupingKey,iLevel) {
//- hmGlobals : tableau de variables globales
//- item : item
//- sAttrName : nom de l'attribut (ex : "06DN0346-IsInCatalog")
//- sGroupingName : nom du grouping (ex : "ChannelOfDistributionGroup")
//- sLkpName : nom de la lookup table (ex : "L103-Marque ciale Detenteur - Brand name")
//- iLkpRow : numéro de la colonne de la lookup table (ex : 2)
//- sAttrNameGroupingKey : nom de l’attribut clé du grouping 
//- sAttrValGroupingKey : valeur de l’attribut clé du grouping 
//- iLevel : niveau où récupérer la valeur de l'attribut (de -2 à 4)
	
	var val = [];//tableau des valeurs de sAttrName si c'est un grouping ou un multivalué
	var en;
	var sKey;
	
	//Si on veut la valeur de sAttrName à un niveau différent de celui sur lequel on est
	//On remplace l'item item par celui du niveau désiré  
	if(iLevel!=null) {
		//0 ou null = valeur de l'attribut de l'item au niveau courant,
		//1 = valeur de l'attribut de l'item au niveau Prod,
		//2 = valeur de l'attribut de l'item au niveau BUnit,
		//3 = valeur de l'attribut de l'item au niveau Pitem1,
		//4 = valeur de l'attribut de l'item au niveau Pitem2,
		//-1 = valeur de l'attribut de l'item au niveau du parent,
		//-2 = valeur de l'attribut de l'item au niveau du grand parent
		var sLevel = "";
		if(iLevel ==1 ){//Si le niveau est a 1, sLevel prend la valeur "Prod"
			sLevel = "Prod";
		}
		else if (iLevel == 2) {//Si le niveau est a 2, sLevel prend la valeur "BUnit"
			sLevel = "BUnit";
		}
		else if (iLevel == 3) {//Si le niveau est a 3, sLevel prend la valeur "PItem"
			sLevel = "PItem";
		}
		else if (iLevel < 0) {//Si le niveau est inférieur a 0, on récupère l'attribut chez le parent, grand-parent de l'item
			//item = hmGlobals["FN_GET_PARENT_AT_LEVEL"].invoke(hmGlobals,item,iLevel);
			item = getParentAtLevel(hmGlobals,item,iLevel);
		}
		if(sLevel!="") {//Si la variable sLevel n'est pas vide, on récupère l'item au niveau demandé
			item = getItemAtLevel(hmGlobals,item,sLevel);
		}
	}
	
	//---------------------------------------------------------------------------------------------------------------------
	
	//Si on est dans un grouping
	if(checkString(sGroupingName,"")!=""){
		var myGroup = getEn(hmGlobals,item,sGroupingName);
		if(myGroup!=null) {
			var i;
			//On parcourt le grouping sGroupingName
			for(i=0;i<myGroup.size();i++) {
				//Si on veut récupérer les valeurs de sAttrName sur une occcurrence spéciale
				if(checkString(sAttrNameGroupingKey,"")!="" && checkString(sAttrValGroupingKey,"") != "") {
					//Recherche de l'occurrence tel que sAttrNameGroupingKey = sAttrValGroupingKey
					if(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrNameGroupingKey)==sAttrValGroupingKey) {						
						en = getEn(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
						if(en!=null) {
							//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
							if(iLkpRow!=null && checkString(sLkpName,"")!="") {
								var j;
								for(j=0;j<en.size();j++) {
									//sKey = getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
									sKey = en[j].getEntryNodeValue();
									if(sKey!=null) {
										val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
									}
								}
							}
							//Si on veut simplement la valeur de l'attribut de sAttrName
							else {
								var j;
								for(j=0;j<en.size();j++) {
									//val.add(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName));
									val.add(en[j].getEntryNodeValue());
								}		
							}
						}
					}
				}
				//Si on veut récupérer les valeurs de sAttrName sur toutes les occurrences
				else {
					en = getEn(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
					if(en!=null) {
						//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
						if(iLkpRow!=null && checkString(sLkpName,"")!="") {
							var j;
							for(j=0;j<en.size();j++) {
								//sKey = getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName);
								sKey = en[j].getEntryNodeValue();
								if(sKey!=null) {
									val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
								}
							}	
						}
						//Si on veut simplement la valeur de l'attribut de sAttrName
						else {
							var j;
							for(j=0;j<en.size();j++) {
								//val.add(getValue(hmGlobals,item,sGroupingName + "#" + i + "/" + sAttrName));
								val.add(en[j].getEntryNodeValue());
							}	
						}
					}
				}
			}
		}
	}
	//Si on n'est pas dans un grouping
	else {
		en = getEn(hmGlobals,item,sAttrName);
		if(en!=null) {
			//Si on veut la valeur d'une colonne particulière de la lkp attachée à sAttrName
			if(iLkpRow!=null && checkString(sLkpName,"")!="") {
				var j;
				for(j=0;j<en.size();j++) {
					sKey = en[j].getEntryNodeValue();
					if(sKey!=null) {
						val.add(lookupValues(getLkpByName(sLkpName),sKey)[iLkpRow]);
					}
				}	
			}
			//Si on veut simplement la valeur de l'attribut de sAttrName
			else {
				var j;
				for(j=0;j<en.size();j++) {
					val.add(en[j].getEntryNodeValue());
				}	
			}	
		}
	}
	
	//out.writeln(en);
	//out.writeln(val);
	
	//-----------------------------------------------------------------------------------------------------------------------
	
	//CHAINE FINALE DE L'ATTRIBUT
	var myStr = ""; 
	if(val.size()==0) {//Si val est vide myStr prend ma valeur null
		myStr = "null";
	}
	if(val.size()==1) {//Si val contient 1 valeur on convertit la valeur en string et on la place dans myStr
		myStr = toString(val[0]);
	}
	if(val.size()>1) {//Si val contient plus d'une valeur
		var i;
		for(i=0;i<val.size()-1;i++) {//On boucle sur les valeurs contenues dans val[]
			myStr = myStr + toString(val[i]) + "@#@";//On les copie dans myStr en les separant par @#@
		}
		myStr = myStr + toString(val[i]);//on copie la derniere valeur (val.size()) dans myStr car elle n'est pas prise en compte dans la boucle (i<val.size())
	}
	return(myStr);
}

//FONCTION QUI RECUPERE L'ENSEMBLE DES CHAMPS QUI DECRIVENT UN ITEM 
//De nombreuses conditions ternaires sont mises en oeuvre afin de respecter les regles de gestions 
//associees aux differents champs 
function getHmItemBatidataValues(hmGlobals,item){
	var hmParents = [];
	hmParents = getParentsItem(hmGlobals,item,hmParents);//Remplissage de la hashmap avec les parents de l'item 
	var hmItemValues = [];
	var type = getType(hmGlobals,item);//Recuperation du type de l'item
	var status = hmGlobals["FN_GET_STATUS"].invoke(item);//Recuperation du statut de l'item
    // Récupération du parent
	var parentItem = item.getItemUsingEntryRelationshipAttrib("SC000-GlobPrim/99CTL100-ParentItem");
	// Récupération du nom du catalogue de l'item
	var ctgName = item.getCatalog().getCtgName();
	var ctgCode = substring(ctgName,1,4);
	var validToDate = getValue(hmGlobals,item,"06DN0427-ValidToDate");
	var effectiveDate = getValue(hmGlobals,item,"06DN0425-effectiveDate");
	var effectiveDateReformat = effectiveDate.formatDate("dd/MM/yyyy");
	var validToDateReformat = validToDate.formatDate("dd/MM/yyyy");
	var MaterialType = "";
	var BaseUnitOfMeasure = "";	
	
	hmItemValues[1] = ctgCode;
	hmItemValues[2] = status;
	var erpcode = tech(hmGlobals,item,"01AC0044-ERPCode");
	hmItemValues[3] = erpcode;
	hmItemValues[4] = tech(hmGlobals,item,"01AC0664-MaterialNumber");
	hmItemValues[4] = replaceString(hmItemValues[4],"0000000000000","");
	hmItemValues[4] = replaceString(hmItemValues[4],"000000000000","");
	hmItemValues[4] = replaceString(hmItemValues[4],"00000000000","");	
	hmItemValues[5] = tech(hmGlobals,item,"01AC0740-OldMaterialNumber");
	hmItemValues[6] = tech(hmGlobals,item,"01AC0014-invoiceName");	
	hmItemValues[7] = tech(hmGlobals,item,"01AC0012-LongName");		
	if (type == "BUnit" || type == "Prod") {
		MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType");
	} else {
		MaterialType = tech(hmGlobals,item,"01AC0659-MaterialType","","","","","",2);
	}				
	hmItemValues[8] = MaterialType;	
	hmItemValues[9] = tech(hmGlobals,item,"01AC0775-PublishedIntoSAP");
	hmItemValues[10] = tech(hmGlobals,item,"01AC0670-XPlantMatlStatus");
	hmItemValues[11] = type;		
	hmItemValues[12] = tech(hmGlobals,item,"01AC0809-StatusPublishingDBLabelling");
	var CreationDate = getValue(hmGlobals,item,"01AC0006-CreationDate");
	var CreationDateReformat = CreationDate.formatDate("dd/MM/yyyy");	
	hmItemValues[13] = CreationDateReformat;
	hmItemValues[14] = tech(hmGlobals,item,"01AC0005-CreationUser");
	var LastUpdate = getValue(hmGlobals,item,"01AC0004-LastUpdate");
	var LastUpdateReformat = LastUpdate.formatDate("dd/MM/yyyy");	
	hmItemValues[15] = LastUpdateReformat;
	hmItemValues[16] = tech(hmGlobals,item,"01AC0003-LastUpdateUser");
	var BlockedDate = getValue(hmGlobals,item,"01AC0007-BlockedDate");
	var BlockedDateReformat = BlockedDate.formatDate("dd/MM/yyyy");	
	hmItemValues[17] = BlockedDateReformat;
	hmItemValues[18] = tech(hmGlobals,item,"01AC0008-BlockedUser");
	var UnblockedDate = getValue(hmGlobals,item,"01AC0009-UnblockedDate");
	var UnblockedDateReformat = UnblockedDate.formatDate("dd/MM/yyyy");	
	hmItemValues[19] = UnblockedDateReformat;
	hmItemValues[20] = tech(hmGlobals,item,"01AC0010-UnblockedUser");

	hmItemValues[23] = tech(hmGlobals,item,"01AC0042-GTIN");
	hmItemValues[24] = tech(hmGlobals,item,"01AC0668-EANCategory");
	hmItemValues[25] = tech(hmGlobals,item,"01AC0041-barCodeType"); 
	hmItemValues[26] = tech(hmGlobals,item,"01AC0020-UnitDescriptor"); 
	hmItemValues[27] = tech(hmGlobals,item,"01AC0652-Innovation");
	hmItemValues[28] = tech(hmGlobals,item,"01AC0001-IsInPDM");
	hmItemValues[29] = tech(hmGlobals,item,"01AC0667-AuthorisationGroup");
	hmItemValues[30] = tech(hmGlobals,item,"01AC0671-XPlantMatlStatusValidFrom");
	hmItemValues[31] = tech(hmGlobals,item,"01AC0557-ReplacementItem","","","","","",1);
	hmItemValues[32] = tech(hmGlobals,item,"01AC0017-LabelName1","","","","","",1);
	hmItemValues[33] = tech(hmGlobals,item,"01AC0018-LabelName2","","","","","",1);
	hmItemValues[34] = tech(hmGlobals,item,"01AC0011-replacementGtin","","","","","",1);
	hmItemValues[35] = tech(hmGlobals,item,"01AC0016-associationType","","","","","",1);
	hmItemValues[36] = tech(hmGlobals,item,"01AC0036-brandName","","L103-Marque ciale Detenteur - Brand name",1, "", "", 1); 
	hmItemValues[37] = tech(hmGlobals,item,"01AC0038-brandOwner","","","","","",1);
	hmItemValues[38] = tech(hmGlobals,item,"01AC0037-nameOfBrandOwner","","","","","",1);
	hmItemValues[39] = tech(hmGlobals,item,"01AC0039-GLNProvider","","","","","",1);
	hmItemValues[40] = tech(hmGlobals,item,"01AC0040-nameOfProvider","","","","","",1);
	
	hmItemValues[41] = tech(hmGlobals,item,"01AC0024-Model","","","","","",1);
	hmItemValues[42] = tech(hmGlobals,item,"01AC0019-SdcNatureCode","","","","","",1);
	
	hmItemValues[43] = tech(hmGlobals,item,"01AC0043-hasBatchNumber");
	hmItemValues[44] = tech(hmGlobals,item,"01AC0022-ConsumerUnit");
	hmItemValues[45] = tech(hmGlobals,item,"01AC0025-StandardMixedPackage");
	hmItemValues[46] = tech(hmGlobals,item,"01AC0026-ConsumerPack");
	hmItemValues[47] = tech(hmGlobals,item,"01AC0027-FullDisplayStand");
	hmItemValues[48] = tech(hmGlobals,item,"01AC0035-ReturnableItem");
	hmItemValues[49] = tech(hmGlobals,item,"01AC0028-Service");
	hmItemValues[50] = tech(hmGlobals,item,"01AC0029-BulkItem");
	hmItemValues[51] = tech(hmGlobals,item,"01AC0030-CutToOrderItem");
	hmItemValues[52] = tech(hmGlobals,item,"01AC0032-ReOrdable");
	hmItemValues[53] = tech(hmGlobals,item,"01AC0033-SeasonalItem");
	hmItemValues[54] = tech(hmGlobals,item,"01AC0034-PromotionalItem");
	if (type == "PItem") {
		hmItemValues[55] = tech(hmGlobals,item,"01AC0021-BaseUnit","","","","","",2);
	} else {
		hmItemValues[55] = tech(hmGlobals,item,"01AC0021-BaseUnit");
	}
	hmItemValues[56] = tech(hmGlobals,item,"01AC0741-PackagingItemDescription");
	hmItemValues[57] = tech(hmGlobals,item,"01AC0023-DespatchUnit");
	hmItemValues[58] = tech(hmGlobals,item,"01AC0031-DivisibleItem");
	hmItemValues[59] = tech(hmGlobals,item,"01AC0044-ERPCode","","","","","",1);
	hmItemValues[60] = tech(hmGlobals,item,"01AC0810-LabelFormat");
	hmItemValues[61] = tech(hmGlobals,item,"01AC0050-WebSiteCategory");
	hmItemValues[62] = tech(hmGlobals,item,"01AC0050-WebSiteCategory",1,"","","","",1);
	hmItemValues[63] = tech(hmGlobals,item,"01AC0051-TagLine");
	
				
//--------------------------------------------------------------------------------------------------------------------------
	return(hmItemValues);	
//------------------------------------------------------------------------------------------------------------------------------

}


var hmGlobals = initGlobals();//Initialisation du tableau de variables globales
var ctgs = getCatalogNamesList();//La variable ctgs contient la liste des catalogues disponibles

var hmEntete = [];
hmEntete.add("");
hmEntete.add("ctgCode");
hmEntete.add("status");
hmEntete.add("erpcode");
hmEntete.add("MaterialNumber");
hmEntete.add("OldMaterialNumber");
hmEntete.add("invoiceName");
hmEntete.add("LongName");
hmEntete.add("MaterialType;");
hmEntete.add("PublishedIntoSAP");
hmEntete.add("XPlantMatlStatus");
hmEntete.add("type");
hmEntete.add("StatusPublishingDBLabelling");
hmEntete.add("CreationDate");
hmEntete.add("CreationUser");
hmEntete.add("LastUpdate");
hmEntete.add("LastUpdateUser");
hmEntete.add("BlockedDate");
hmEntete.add("BlockedUser");
hmEntete.add("UnblockedDate");
hmEntete.add("UnblockedUser");
hmEntete.add("");
hmEntete.add("");

hmEntete.add("GTIN");
hmEntete.add("EANCategory");
hmEntete.add("barCodeType");
hmEntete.add("UnitDescriptor");
hmEntete.add("Innovation");
hmEntete.add("IsInPDM");
hmEntete.add("AuthorisationGroup");
hmEntete.add("XPlantMatlStatusValidFrom");
hmEntete.add("ReplacementItem");
hmEntete.add("LabelName1");
hmEntete.add("LabelName2");
hmEntete.add("replacementGtin");
hmEntete.add("associationType");
hmEntete.add("brandName");
hmEntete.add("brandOwner");
hmEntete.add("nameOfBrandOwner");
hmEntete.add("GLNProvider");
hmEntete.add("nameOfProvider");
hmEntete.add("Model");
hmEntete.add("SdcNatureCode");
hmEntete.add("hasBatchNumber");
hmEntete.add("ConsumerUnit");

hmEntete.add("StandardMixedPackage");
hmEntete.add("ConsumerPack");
hmEntete.add("FullDisplayStand");
hmEntete.add("ReturnableItem");
hmEntete.add("Service");
hmEntete.add("BulkItem");
hmEntete.add("CutToOrderItem");
hmEntete.add("ReOrdable");
hmEntete.add("SeasonalItem");
hmEntete.add("PromotionalItem");
hmEntete.add("BaseUnit");
hmEntete.add("PackagingItemDescription");
hmEntete.add("DespatchUnit");
hmEntete.add("DivisibleItem");
hmEntete.add("ERPCode Prod");
hmEntete.add("LabelFormat");
hmEntete.add("WebSiteCategory");
hmEntete.add("WebSiteCategory-C01");
hmEntete.add("TagLine");

var filename="report_01AC_AppellationCommerciale_" + today().formatDate("yyyyMMdd_HHmmss")+".csv";
var writer=createOtherOut(filename,"UTF_8");
var intWrite=createJavaMethod("java.io.PrintWriter","write" ,"int");
writer.runJavaMethod(intWrite,65279); // put UTF8 BOM, allows excel to open the file directly !

writer.writeln(buildSAPCSV(hmGlobals,hmEntete));

var oKey;//Clef de la hash map
var ctg;//Catalogue utilisé

forEachHmElement(ctgs,oKey,ctg) {//Pour chaque element d'un catalogue de la liste de catalogues
	if (ctg.startsWith("C")){ // Exclude other catalogs
		logDebug("CTG : "+ctg);	
		forEachCtgItem(ctg,item) {//Pour chaque item du catalogue
			var hmEntry = getHmItemBatidataValues(hmGlobals,item,i);//On copie les attributs de l'item dans hmEntry
			if(hmEntry.size()>0 ) {//Si hmEntry n'est pas vide
				writer.writeln(buildSAPCSV(hmGlobals,hmEntry));//On appelle la fonction de création de fichier csv et on rajoute l'item et ses attributs			
			}
		}
	}
}

logDebug("Traitement termine");
