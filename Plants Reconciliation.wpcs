function getSAPItemEXP(hmGlobals, item, log){
    return getScriptByPath("/scripts/triggers/Siniat.SAP.Utils").getFunctionByName("getSAPItem").invoke(hmGlobals, item, log);
}

function fillHeaderHashmap(hmHeader){
	hmHeader[0] = "Catalog";
	hmHeader[1] = "01AC0044-ERPCode";
	hmHeader[2] = "01AC0664-MaterialNumber";
	hmHeader[3] = "WERKS";
	hmHeader[4] = "06DN0679-Plant";
	hmHeader[5] = "EKGRP";
	hmHeader[6] = "02FR0703-PurchasingGroup";
	hmHeader[7] = "KAUTB";
	hmHeader[8] = "02FR0704-AutoPurchAllowed";
	hmHeader[9] = "BSTRF";
	hmHeader[10] = "06DN0407-TotalQuantityOfNextLowerLevel";
	hmHeader[11] = "STAWN";
	hmHeader[12] = "06DN0774-IntrastatCode";
	hmHeader[13] = "AUSME";
	hmHeader[14] = "06DN0702-UnitOfIssue";
	hmHeader[15] = "LADGR";
	hmHeader[16] = "06DN0706-LoadingGroup";
	hmHeader[17] = "PRCTR";
	hmHeader[18] = "06DN0680-ProfitCentre";
	hmHeader[19] = "HERKL";
	hmHeader[20] = "06DN0646-ManufacturerCountry";
	hmHeader[21] = "HERKR";
	hmHeader[22] = "06DN0683-RegionOfOrigin";
	hmHeader[23] = "SOBSK";
	hmHeader[24] = "06DN0681-SpecProcTypeCosting";
	hmHeader[25] = "NCOST";
	hmHeader[26] = "06DN0682-NoCosting";
	hmHeader[27] = "BESKZ";
	hmHeader[28] = "06DN0684-ProcurementType";
	hmHeader[29] = "DISMM";
	hmHeader[30] = "06DN0685-MrpType";
	hmHeader[31] = "DISPO";
	hmHeader[32] = "06DN0686-MrpController";
	hmHeader[33] = "FHORI";
	hmHeader[34] = "06DN0689-SchedMarginKey";
	hmHeader[35] = "STRGR";
	hmHeader[36] = "06DN0690-StrategyGroup";
	hmHeader[37] = "VRMOD";
	hmHeader[38] = "06DN0691-ConsumptionMode";
	hmHeader[39] = "VINT1";
	hmHeader[40] = "06DN0692-ConsumptionPeriodBackward";
	hmHeader[41] = "VINT2";
	hmHeader[42] = "06DN0693-ConsumptionPeriodForward";
	hmHeader[43] = "MTVFP";
	hmHeader[44] = "06DN0694-AvailabilityCheck";
	hmHeader[45] = "DISGR";
	hmHeader[46] = "06DN0695-MRPGroup";
	hmHeader[47] = "SOBSL";
	hmHeader[48] = "06DN0696-SpecProcurementType";
	hmHeader[49] = "SBDKZ";
	hmHeader[50] = "06DN0697-IndividualOrCollectiveRequir";
	hmHeader[51] = "PERKZ";
	hmHeader[52] = "06DN0698-PeriodIndicator";
	hmHeader[53] = "RGEKM";
	hmHeader[54] = "06DN0699-BackFlushIndicator";
	hmHeader[55] = "ALTSL";
	hmHeader[56] = "06DN0700-SelectionMethod";
	hmHeader[57] = "XCHPF";
	hmHeader[58] = "06DN0701-BatchManagementIndicator";
	hmHeader[59] = "UEETK";
	hmHeader[60] = "06DN0705-UnlimiedOverdelivery";
	hmHeader[61] = "FEVOR";
	hmHeader[62] = "06DN0709-ProductionSupervisor";
	hmHeader[63] = "MMSTA";
	hmHeader[64] = "06DN0707-PlantMaterialStatus";
	hmHeader[65] = "MMSTD";
	hmHeader[66] = "06DN0708-PlantMaterialStatusValidFrom";
	hmHeader[67] = "LGPRO";
	hmHeader[68] = "06DN0687-ProdStorageLocation";
	hmHeader[69] = "LGFSB";
	hmHeader[70] = "06DN0688-ExtProcStorageLocation";
	hmHeader[71] = "WZEIT";
	hmHeader[72] = "10GC0747-TotalReplenishmentLeadTime";
	hmHeader[73] = "LGORT";
	hmHeader[74] = "06DN0711-StorageLocation";
	hmHeader[75] = "LWMKB";
	hmHeader[76] = "06DN0776-PickingArea";
	hmHeader[77] = "VPRSV";
	hmHeader[78] = "06DN0720-PriceControl";
	hmHeader[79] = "BKLAS";
	hmHeader[80] = "06DN0721-ValuationClass";
	hmHeader[81] = "HKMAT";
	hmHeader[82] = "06DN0722-MaterialRelatedOrigin";
	hmHeader[83] = "HRKFT";
	hmHeader[84] = "06DN0723-OrigGroupAsSubdivCost";
	hmHeader[85] = "EKALR";
	hmHeader[86] = "06DN0724-MateriaIsCostedWithQuantity";
}

/// @brief Logs messages according to the given log level into different logging facilities.
/// @param hmGlobals - log context
/// @param xlsExcelBook - new Excelfile
/// @param strExcelSheetName - Naam van de sheet
/// @param hmColumns - HashMap with all the columnnames
//:PRFUNCTION void createHeadersInExcelFile(HashMap hmGlobal, String strXLSName, String strExcelSheetName, HashMaphmColumns)
function createHeadersInExcelFile(hmGlobals, xlsExcelBook, strExcelSheetName, hmColumns){
	var sProcessName = "PIM.Export.createHeadersInExcelFile";

	//Imports from other scriptlibraries
	var log = hmGlobals["LOGGER"];
	var sErrMsg = null;
	catchError(sErrMsg) {
		var xlsSheet = xlsExcelBook.createExcelSheet(strExcelSheetName);
		var xlsRow = xlsSheet.createRow(0); 
		var intKey = null;
		var strColumnName = "";
		forEachHmElement(hmColumns, intKey, strColumnName){
			var xlsCell = xlsRow.createExcelCell(toInteger(intKey));
			xlsCell.setCellType("STRING");
			xlsCell.setStringCellValue(strColumnName);
		}
		return xlsSheet;
	}
	if (sErrMsg != null) {
		throwError(sProcessName
			+ ", sErrMsg: " + sErrMsg);
	}
	log.loggerDebug("*** Finished process " + sProcessName + " ***");
	return null;
}

/// @brief Logs messages according to the given log level into different logging facilities.
/// @param hmGlobals - log context
/// @param excelSheet - Naam van de sheet
/// @param hmColumns - HashMap with all the columnnames
//:PRFUNCTION void addRowToExcelFile(HashMap hmGlobals, Sheet excellSheet, HashMaphmColumns)
function addRowToExcelFile(hmGlobals, excelSheet, hmColumns){
	var sProcessName = "PIM.Export.addRowToExcelFile";
	
	//Imports from other scriptlibraries
	var log = hmGlobals["LOGGER"];
	//log.loggerDebug("hmColumns  :  " + hmColumns);
	var sErrMsg = null;
	catchError(sErrMsg) {
		
		var intRowCount = excelSheet.getNbRows();
		var xlsRow = excelSheet.createRow(intRowCount);
		var intKey = null;
		var strColumnValue = "";
		
		forEachHmElement(hmColumns, intKey, strColumnValue){
			
			var xlsCell = xlsRow.createExcelCell(toInteger(intKey));
			xlsCell.setCellType("STRING");
			xlsCell.setStringCellValue(checkString(strColumnValue, ""));
		}
		
		return excelSheet;
	}
	if (sErrMsg != null) {
		throwError(sProcessName
			+ ", sErrMsg: " + sErrMsg);
	}
	log.loggerDebug("*** Finished process " + sProcessName + " ***");
	return excelSheet;
}

//EntryNode getEn(hmGlobals,item,String)
//Return the entry node 
//Parameters
//-hmGlobals : global variable to call the function getEntryNodeForAttributePath
//-item : item (generic)
//-String : name of the attribute
//Returns EntryNode
function getEn(hmGlobals, item, sNodeName){
    return hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"].invoke(item,sNodeName);
}

function getProductItem(item, strItemType){
	var itmProdItem = item;
	var sAttribPath = "SC000-GlobPrim/99CTL100-ParentItem";
    if(strItemType == "Pitem2"){
    	itmProdItem = item.getItemUsingEntryRelationshipAttrib(sAttribPath).getItemUsingEntryRelationshipAttrib(sAttribPath).getItemUsingEntryRelationshipAttrib(sAttribPath);
    }
    if (strItemType == "Pitem1") {
    	itmProdItem = item.getItemUsingEntryRelationshipAttrib(sAttribPath).getItemUsingEntryRelationshipAttrib(sAttribPath);
    }
    if (strItemType == "Bunit") {
		itmProdItem = item.getItemUsingEntryRelationshipAttrib(sAttribPath);
    }
    return itmProdItem;
}

function getItemType(item,hmGlobals) {
	var itemPK=item.getPrimaryKey();
	var itemType="";
	if (itemPK.contains("P")) {
		itemType="Prod";
	}
	else if (itemPK.contains("B")) {
		itemType="Bunit";
	}
	else if (itemPK.contains("I")) {
		var itemParentPK=getEn(hmGlobals,item,"99CTL100-ParentItem")[0].getEntryNodeValue();
		var relatedEntryId=checkInt(itemParentPK,0);
		var relatedItemArray=item.getEntryRelatedItemInfo(relatedEntryId);
		var relatedItemPk=checkString(relatedItemArray[1],"");
		if(relatedItemPk!=null && relatedItemPk!="") {
			if (relatedItemPk.contains("B")) {
				itemType="Pitem1";
			}
			else if (relatedItemPk.contains("I")) {
				itemType="Pitem2";
			}
		}
	}
	return(itemType);
}

function getPlantAttribs(itmProcessingItem, hmGlobals, intOccurrence, itemAttrs, specName, strItemType, strProdSecSpecName, itmProd, hmExcelValues){

	hmExcelValues[4] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0679-Plant"), "");
	hmExcelValues[6] = checkString(itmProcessingItem.getEntryAttrib(specName + "/02FR0703-PurchasingGroup"), "");
	hmExcelValues[8] = checkString(itmProcessingItem.getEntryAttrib(specName + "/02FR0704-AutoPurchAllowed"), "");
	
	// TODO hmExcelValues[10] = checkString(06DN0407-TotalQuantityOfNextLowerLevel). "");

	hmExcelValues[12] = checkString(itmProcessingItem.getEntryAttrib(specName + "/06DN0774-IntrastatCode"), "");
	hmExcelValues[14] = checkString(itmProcessingItem.getEntryAttrib(specName + "/06DN0702-UnitOfIssue"), "");
	hmExcelValues[16] = checkString(itmProcessingItem.getEntryAttrib(specName + "/06DN0706-LoadingGroup"), "");
	hmExcelValues[18] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0680-ProfitCentre"), "");

	//TODO hmExcelValues[20] = checkString(06DN0646-ManufacturerCountry), "");

	hmExcelValues[22] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0683-RegionOfOrigin"), "");
	hmExcelValues[24] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0681-SpecProcTypeCosting"), "");
	hmExcelValues[26] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0682-NoCosting"), "");
	hmExcelValues[28] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0684-ProcurementType"), "");
	hmExcelValues[30] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0685-MrpType"), "");
	hmExcelValues[32] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0686-MrpController"), "");
	hmExcelValues[34] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0689-SchedMarginKey"), "");
	hmExcelValues[36] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0690-StrategyGroup"), "");
	hmExcelValues[38] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0691-ConsumptionMode"), "");
	hmExcelValues[40] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0692-ConsumptionPeriodBackward"), "");
	hmExcelValues[42] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0693-ConsumptionPeriodForward"), "");
	hmExcelValues[44] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0694-AvailabilityCheck"), "");
	hmExcelValues[46] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0695-MRPGroup"), "");
	hmExcelValues[48] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0696-SpecProcurementType"), "");
	hmExcelValues[50] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0697-IndividualOrCollectiveRequir"), "");
	hmExcelValues[52] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0698-PeriodIndicator"), "");
	hmExcelValues[54] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0699-BackFlushIndicator"), "");
	hmExcelValues[56] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0700-SelectionMethod"), "");
	hmExcelValues[58] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0701-BatchManagementIndicator"), "");
	hmExcelValues[60] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0705-UnlimiedOverdelivery"), "");
	hmExcelValues[62] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0709-ProductionSupervisor"), "");
	hmExcelValues[64] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0707-PlantMaterialStatus"), "");
	var datePMSV = itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0708-PlantMaterialStatusValidFrom");
	if(datePMSV != null){
		hmExcelValues[66] = datePMSV.formatDate("yyyyMMdd"); 
	}
	hmExcelValues[68] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0687-ProdStorageLocation"), "");
	hmExcelValues[70] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0688-ExtProcStorageLocation"), "");
	hmExcelValues[72] = checkString(itmProcessingItem.getEntryAttrib(specName + "/10GC0747-TotalReplenishmentLeadTime"), "");
	
	//itemAttrs["LGORT"]
	var strLGORTKey = itemAttrs["WERKS"] + "-" + itemAttrs["LGORT"];
	var hmStorageLocation = itmProcessingItem.getEntryAttribValues(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0711-StorageLocation");
	var intSLCount = hmStorageLocation.size();
	var boolSLFound = false;
	forEachHmElement(hmStorageLocation, intCount, strStorageNumber){
		var strStorageLocation = itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0711-StorageLocation#" + intCount);
		if(strStorageLocation == strLGORTKey){
			hmExcelValues[74] = strStorageLocation;
			boolSLFound = true;
		}
	}
	if(!boolSLFound){
		hmExcelValues[74] = "";
	}
	
	hmExcelValues[76] = checkString(itmProcessingItem.getEntryAttrib(specName + "/06DN0776-PickingArea"), "");
	hmExcelValues[78] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0720-PriceControl"), "");
	hmExcelValues[80] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0721-ValuationClass"), "");
	hmExcelValues[82] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0722-MaterialRelatedOrigin"), "");
	hmExcelValues[84] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0723-OrigGroupAsSubdivCost"), "");
	hmExcelValues[86] = checkString(itmProcessingItem.getEntryAttrib(specName + "/PlaceOfStorageGroup#" + intOccurrence +"/06DN0724-MateriaIsCostedWithQuantity"), "");	
	
	
	return null;
}

var hmCatalog = [];
hmCatalog["010"] = "C010-Plaques de plâtre - Gypsum plasterBoards";
hmCatalog["015"] = "C015-Cloisons - Honeycomb Partitions";
hmCatalog["020"] = "C020-Doublages - Composite panels";
hmCatalog["025"] = "C025-Profilés - Metal profiles";
hmCatalog["030"] = "C030-Acc plafonds - Ceiling accessories";
hmCatalog["035"] = "C035-Acc ouvrages verticaux - Partition accessories";
hmCatalog["040"] = "C040-Acc finition - Finishing accessories";
hmCatalog["045"] = "C045-Vis - Fasteners";
hmCatalog["050"] = "C050-Salsi acc cloisons - Honeycomb partitions accessories";
hmCatalog["055"] = "C055-Salsi acc finition - Finishing accessories";
hmCatalog["060"] = "C060-Salsi vis - Fasteners";
hmCatalog["065"] = "C065-Enduits - Jointing compounds";
hmCatalog["070"] = "C070-Liants - Adhesives";
hmCatalog["075"] = "C075-Colles - Adhesives";
hmCatalog["080"] = "C080-Salsi enduits poudres - Powder compounds";
hmCatalog["085"] = "C085-Salsi enduits pâtes - Ready-mix compounds";
hmCatalog["090"] = "C090-Salsi liants - Adhesives";
hmCatalog["095"] = "C095-Salsi colles - Adhesives";
hmCatalog["100"] = "C100-Salsi enduits préparation support - Pre-painting compounds";
hmCatalog["105"] = "C105-Salsi enduits techniques - Technical compounds";
hmCatalog["110"] = "C110-Panneaux isolant - Insulating panels";
hmCatalog["115"] = "C115-Styrodur";
hmCatalog["120"] = "C120-Entrevous -";
hmCatalog["130"] = "C130-Rehausses -";
hmCatalog["135"] = "C135-Plâtres - Gypsum plasters";
hmCatalog["140"] = "C140-Salsi plâtres - Gypsum plasters";
hmCatalog["145"] = "C145-Carreaux de plâtre - Gypsum blocks";
hmCatalog["150"] = "C150-Gypse - Gypsum rock";
hmCatalog["155"] = "C155-Outils mesure&traçage - Measurement tools";
hmCatalog["160"] = "C160-Outils manutention - Handling Tools";
hmCatalog["165"] = "C165-Outils façonnage - Shaping tools";
hmCatalog["170"] = "C170-Outils travail du métal - Tools for metal";
hmCatalog["175"] = "C175-Outillage électroportatif - Electrical tools";
hmCatalog["180"] = "C180-Outils finition - Finishing tools";
hmCatalog["185"] = "C185-Outillage général - Other Tools";
hmCatalog["190"] = "C190-Pièces détachées machines à projeter - Spare parts for spraying machines";
hmCatalog["195"] = "C195-Services";
hmCatalog["200"] = "C200-Produits financiers - Financial products";
hmCatalog["205"] = "C205-Services industriels - Industrial services";
hmCatalog["210"] = "C210-Produits&consommables industriels - Industrial products";
hmCatalog["215"] = "C215-Services&produits généraux - Other services&products";
hmCatalog["300"] = "C300-Primitifs doublages - Insulating panels for Composite panels";
hmCatalog["305"] = "C305-Panneaux isolants - Insulating panels";
hmCatalog["310"] = "C310-Blocs - Polystyrene blocks";
hmCatalog["315"] = "C315-Colles&Enduits internes - Internal adhesives&compounds";
hmCatalog["320"] = "C320-Plâtres internes - Internal Gypsum plasters";
hmCatalog["400"] = "C400-Artifices&Explosifs - Explosives";
hmCatalog["405"] = "C405-Energies";
hmCatalog["410"] = "C410-Polyethylene";
hmCatalog["415"] = "C415-Fournitures pour fabrication -";
hmCatalog["420"] = "C420-Marquage - Ink and solvents";
hmCatalog["425"] = "C425-Ajouts - Additives";
hmCatalog["430"] = "C430-Billes - Polystyrene beads";
hmCatalog["435"] = "C435-Parements plaques de plâtre -";
hmCatalog["440"] = "C440-Papiers - Paper";
hmCatalog["441"] = "C441-Papiers Essais - Paper test";
hmCatalog["442"] = "C442-Papiers Réseaux - Honeycomb Paper";
hmCatalog["445"] = "C445-Acc papiers - Paper accessories";
hmCatalog["450"] = "C450-Papiers recyclés - Recycled paper";
hmCatalog["455"] = "C455-Produits nettoyant&chaufferie - Cleaning products";
hmCatalog["460"] = "C460-Solutions mères&premix - Premixes";
hmCatalog["465"] = "C465-Carreaux internes - Internal gypsum blocks";
hmCatalog["470"] = "C470-Gypse mat 1ère - Gypsum rock raw material";
hmCatalog["475"] = "C475-Papiers internes - Internal paper";
hmCatalog["480"] = "C480-Colles mat 1ère - Glues";
hmCatalog["485"] = "C485-Acier - Steel";
hmCatalog["500"] = "C500-Etiquettes - Labels";
hmCatalog["505"] = "C505-Bandes gommées - End tapes";
hmCatalog["510"] = "C510-Cartons d emballage - Packaging cardboard";
hmCatalog["515"] = "C515-Cales - Bearers";
hmCatalog["520"] = "C520-Cerclage -";
hmCatalog["525"] = "C525-Sacherie - Bags";
hmCatalog["530"] = "C530-Big bags";
hmCatalog["535"] = "C535-Palets";
hmCatalog["540"] = "C540-Récipients - Small containers";
hmCatalog["600"] = "C600-Prestia Plâtre formulé automatique - Auto formulated gypsum";
hmCatalog["605"] = "C605-Prestia Plâtre formulé manuel - Manual formulated gypsum";
hmCatalog["610"] = "C610-Prestia Plâtre non formulé - Non formulated gypsum";
hmCatalog["650"] = "C650-LCL Liants - Adhesives";
hmCatalog["655"] = "C655-LCL Adjuvants - Additives";
hmCatalog["660"] = "C660-LCL Billes PSE - Polystyrene beads";
hmCatalog["665"] = "C665-LCL Outillage - Tools";
hmCatalog["670"] = "C670-LCL Accessoires marketing - Marketing accessories";
hmCatalog["690"] = "C690-Noble Perlite";
hmCatalog["700"] = "C700-Platec Acc finition - Finishing accessories";
hmCatalog["705"] = "C705-Platec Acc ouvr verticaux - Partition accessories";
hmCatalog["710"] = "C710-Platec Enduits - Jointing compounds";
hmCatalog["715"] = "C715-Platec Outillage - Tools";
hmCatalog["730"] = "C730-Platec Prestations - Services";
hmCatalog["999"] = "C999-Produits génériques - Generic products";

var hmGlobals = getScriptByPath("/scripts/triggers/LG.Library.Const").getFunctionByName("getConst").invoke();
hmGlobals["FN_GET_ENTRY_NODES_FROM_ATTR_PATH"] = getScriptByPath("/scripts/triggers/LG.Library.LGUtils").getFunctionByName("getEntryNodesFromAttrPath");
var log = getLogger("JmsLog");
hmGlobals["LOGGER"]=getLogger("JmsLog");

//Create the header information for the Excel
var hmHeader = [];
fillHeaderHashmap(hmHeader);
var xlsMaterial = new ExcelBook();
var sheetMaterial = createHeadersInExcelFile(hmGlobals, xlsMaterial, "ZMDM_PLANT", hmHeader);

//Get the information from the item and put it in the
var hmExcelValues = [];
var rdrMaterials = new Reader("public_html/XFER/Reconciliation/ZMDM_PLANT.csv");
var parser = newDelimParser(rdrMaterials, ";");

//Get the inputvalue
var catalogName = inputs["Catalog_Name"];
var strSelectedCatalogCode = substring(catalogName, 1, 4);

//skip two lines
var attrs = parser.splitLine();
attrs = parser.splitLine();
log.loggerDebug("Skipped two lines in the import  :  " + attrs[0]);
var bDone = false;
var lkpPlacesLookup = getLkpByName("L098-Lieux - Places");

while(!bDone)
{
    attrs = parser.splitLine();
    bDone = (null == attrs);
    if (!bDone)
    {
        var itemAttrs = [];
        itemAttrs["COMB_KEY"] = checkString(attrs[0], "");
		itemAttrs["ZZERPCODE"] = checkString(attrs[1], "");
		itemAttrs["MATNR"] = checkString(attrs[2], ""); //01AC0664-MaterialNumber
		itemAttrs["WERKS"] = checkString(attrs[3], ""); //"PlaceOfStorageGroup#"+k+"/06DN0679-Plant"*
		itemAttrs["LGORT"] = checkString(attrs[4], ""); //06DN0711-StorageLocation
		
		var strLGPRO = checkString(attrs[5], "");
		var strLGPRO2 = "";
		if(strLGPRO != ""){
			if(strLGPRO.length() < 4){
				strLGPRO2 = "0" + strLGPRO;
			}
			else{
				strLGPRO2 = strLGPRO;
			}
		}
		
		if(checkString(strLGPRO2, "") != ""){
			itemAttrs["LGPRO"] = itemAttrs["WERKS"] + "-" + strLGPRO2;//"PlaceOfStorageGroup#"+k+"/06DN0687-ProdStorageLocation"*
		}
		itemAttrs["MMSTA"] = checkString(attrs[6], ""); //"PlaceOfStorageGroup#"+k+"/06DN0707-PlantMaterialStatus"*
		itemAttrs["MMSTD"] = checkString(attrs[7], ""); //"PlaceOfStorageGroup#"+k+"/06DN0708-PlantMaterialStatusValidFrom", "yyyyMMDD"*
		itemAttrs["DISMM"] = checkString(attrs[8], ""); //"PlaceOfStorageGroup#"+k+"/06DN0685-MrpType"*
		
		if(checkString(attrs[9], "") != ""){
			itemAttrs["DISPO"] = itemAttrs["WERKS"] + "-" + checkString(attrs[9], ""); //"PlaceOfStorageGroup#"+k+"/06DN0686-MrpController"*
		}
		else{
			itemAttrs["DISPO"] = "";
		}	
		
		itemAttrs["PERKZ"] = checkString(attrs[10], ""); //"PlaceOfStorageGroup#"+k+"/06DN0698-PeriodIndicator"*
		itemAttrs["BESKZ"] = checkString(attrs[11], ""); //"PlaceOfStorageGroup#"+k+"/06DN0684-ProcurementType"*
		if(itemAttrs["BESKZ"]=="X") {
			itemAttrs["BESKZ"] = "F";
		}
		if(checkString(attrs[12], "") != ""){
			itemAttrs["SOBSL"] = itemAttrs["WERKS"] + "-" + checkString(attrs[12], ""); //"PlaceOfStorageGroup#"+k+"/06DN0696-SpecProcurementKey"*
		}
		else{
			itemAttrs["SOBSL"] = "";
		}
		itemAttrs["SBDKZ"] = checkString(attrs[13], ""); //"PlaceOfStorageGroup#"+k+"/06DN0697-IndividualOrCollectiveRequir"*
		itemAttrs["ALTSL"] = checkString(attrs[14], ""); //"PlaceOfStorageGroup#"+k+"/06DN0700-SelectionMethod"*
		
		if(checkString(attrs[15], "") != ""){
			itemAttrs["FHORI"] = itemAttrs["WERKS"] + "-" + checkString(attrs[15], ""); //"PlaceOfStorageGroup#"+k+"/06DN0689-SchedMarginKey"*
		}
		else{
			itemAttrs["FHORI"] = "";
		}
		
		if(checkString(attrs[16], "") != ""){
			itemAttrs["FEVOR"] = itemAttrs["WERKS"] + "-" + checkString(attrs[16], ""); //"PlaceOfStorageGroup#"+k+"/06DN0709-ProductionSupervisor"*
		}
		else{
			itemAttrs["FEVOR"] = "";
		}		
		
		var strUEETK = checkString(attrs[17], "");//"PlaceOfStorageGroup#"+k+"/06DN0705-UnlimiedOverdelivery", "X", " ", " "*
		if(strUEETK == "X"){
			itemAttrs["UEETK"] = true;
		}
		else{
			itemAttrs["UEETK"] = false;
		}
		
		var strWZEIT = checkString(attrs[18], "");//"10GC0747-TotalReplenishmentLeadTime"*
		if(strWZEIT == "2" || strWZEIT == "3" || strWZEIT == "4" || strWZEIT == "5" || strWZEIT == "6" || strWZEIT == "7" || strWZEIT == "8" || strWZEIT == "9"){
			itemAttrs["WZEIT"] = "[" + strWZEIT + "] - J+" + strWZEIT;
		}
		else if(strWZEIT == "50"){
			itemAttrs["WZEIT"] = "[R] - J+R";
		}
		else if(strWZEIT == "98"){
			itemAttrs["WZEIT"] = "[X] - J+X";
		}
		else if(strWZEIT == "99"){
			itemAttrs["WZEIT"] = "[Y] - J+Y";
		}
		else{
			itemAttrs["WZEIT"] = "";
		}
		
		
		var strPRCTR = checkString(attrs[19], "");
		if(strPRCTR != null && strPRCTR != ""){
			if(strPRCTR.length() < 9){
				strPRCTR = "000000" + strPRCTR;
			}
		}
		itemAttrs["PRCTR"] =  strPRCTR;//"PlaceOfStorageGroup#"+k+"/06DN0680-ProfitCentre"  0000009500*
		if(checkString(attrs[20], "") != ""){
			itemAttrs["SOBSK"] = itemAttrs["WERKS"] + "-" + checkString(attrs[20], ""); //"PlaceOfStorageGroup#"+k+"/06DN0681-SpecProcTypeCosting"*
		}
		else{
			itemAttrs["SOBSK"] = "";
		}
		if(checkString(attrs[21], "") != ""){
			itemAttrs["DISGR"] = itemAttrs["WERKS"] + "-" + checkString(attrs[21], ""); //"PlaceOfStorageGroup#"+k+"/06DN0695-MRPGroup"*
		}
		else{
			itemAttrs["DISGR"] = "";
		}
		itemAttrs["STRGR"] = checkString(attrs[22], ""); //"PlaceOfStorageGroup#"+k+"/06DN0690-StrategyGroup"*
		
		var strLGFSB = checkString(attrs[23], "");
		if(strLGFSB != ""){
			if(strLGFSB.length() < 4){
				strLGFSB = "0" + strLGFSB;
			}
			itemAttrs["LGFSB"] = itemAttrs["WERKS"] + "-" + strLGFSB; //"PlaceOfStorageGroup#"+k+"/06DN0688-ExtProcStorageLocation"*
		}
		else{
			itemAttrs["LGFSB"] = "";
		}
		
		var strNCOST = checkString(attrs[24], "");//"PlaceOfStorageGroup#"+k+"/06DN0682-NoCosting", "X", " ", " "*
		if(strNCOST == "X"){
			itemAttrs["NCOST"] = true;
		}
		else{
			itemAttrs["NCOST"] = false;
		}
		
		itemAttrs["AUSME"] = checkString(attrs[25], ""); //"06DN0702-UnitOfIssue"*
		itemAttrs["EKGRP"] = checkString(attrs[26], ""); //"02FR0703-PurchasingGroup"*
		//itemAttrs["HERKL"] = checkString(attrs[27], ""); //"PlaceOfStorageGroup#"+k+"/06DN0646-ManufacturerCountry"
		
		var strKAUTB = checkString(attrs[28], "");///"02FR0704-AutoPurchAllowed", "X", " ", " "*
		if(strKAUTB == "X"){
			itemAttrs["KAUTB"] = true;
		}
		else{
			itemAttrs["KAUTB"] = false;
		}
		
		itemAttrs["LADGR"] = checkString(attrs[29], ""); //"06DN0706-LoadingGroup"*
		
		itemAttrs["MTVFP"] = checkString(attrs[30], ""); //"PlaceOfStorageGroup#"+k+"/06DN0694-AvailabilityCheck"*
		
		itemAttrs["RGEKZ"] = checkString(attrs[31], ""); //"PlaceOfStorageGroup#"+k+"/06DN0699-BackFlushIndicator" boolean??? 1 = X*

		itemAttrs["STAWN"] = checkString(attrs[32], ""); //"06DN0774-IntrastatCode"*
		itemAttrs["VINT1"] = checkInt(attrs[33], 0); //"PlaceOfStorageGroup#"+k+"/06DN0692-ConsumptionPeriodBackward"*
		itemAttrs["VINT2"] = checkInt(attrs[34], 0); //"PlaceOfStorageGroup#"+k+"/06DN0693-ConsumptionPeriodForward"*
		itemAttrs["VRMOD"] = checkString(attrs[35], ""); //"PlaceOfStorageGroup#"+k+"/06DN0691-ConsumptionMode"*
		
		var strXCHPF = checkString(attrs[36], "");
		if(strXCHPF == "X"){
			itemAttrs["XCHPF"] = true; //"PlaceOfStorageGroup#"+k+"/06DN0701-BatchManagementIndicator", "X", " ", " "*
		}
		else{
			itemAttrs["XCHPF"] = false; //"PlaceOfStorageGroup#"+k+"/06DN0701-BatchManagementIndicator", "X", " ", " "*
		}
		
		itemAttrs["LWMKB"] = checkString(attrs[37], ""); //06DN0776-PickingArea
		
		itemAttrs["BKLAS"] = checkString(attrs[38], ""); //"PlaceOfStorageGroup#"+k+"/06DN0721-ValuationClass"*
		
		var strEKALR = checkString(attrs[39], "");///"PlaceOfStorageGroup#"+k+"/06DN0724-MateriaIsCostedWithQuantity", "X", " ", " "*
		if(strEKALR == "X"){
			itemAttrs["EKALR"] = true;
		}
		else{
			itemAttrs["EKALR"] = false;
		}
		
		var strHKMAT = checkString(attrs[40], "");//"PlaceOfStorageGroup#"+k+"/06DN0722-MaterialRelatedOrigin", "X", " ", " "*
		if(strHKMAT == "X"){
			itemAttrs["HKMAT"] = true;
		}
		else{
			itemAttrs["HKMAT"] = false;
		}
		
		itemAttrs["HRKFT"] = checkString(attrs[41], "");//"PlaceOfStorageGroup#"+k+"/06DN0723-OrigGroupAsSubdivCost"  met een 0 ervoor*
		
		itemAttrs["VPRSV"] = checkString(attrs[42], ""); //"PlaceOfStorageGroup#"+k+"/06DN0720-PriceControl"*
		
		itemAttrs["HERKR"] = checkString(attrs[43], ""); //"PlaceOfStorageGroup#"+k+"/06DN0683-RegionOfOrigin"*
		
		if(itemAttrs["ZZERPCODE"] != ""){
			
			var strCatalogCode = substring(itemAttrs["ZZERPCODE"], 1, 4);
			if(strCatalogCode == strSelectedCatalogCode){
				log.loggerDebug("Item : " + itemAttrs["ZZERPCODE"]);
				var ctgProcessingCatalog = getCtgByName(hmCatalog[strCatalogCode]);
				log.loggerDebug("strCatalogCode : " + hmCatalog[strCatalogCode]);
				hmExcelValues[0] = "C" + strCatalogCode;
				log.loggerDebug("strCatalogCode : " + hmExcelValues[0]);
				hmExcelValues[1] = itemAttrs["ZZERPCODE"];
				log.loggerDebug("strCatalogCode : " + hmExcelValues[1]);
				hmExcelValues[2] = itemAttrs["MATNR"];
				log.loggerDebug("MATNR : " + hmExcelValues[2]);
				hmExcelValues[3] = checkString(itemAttrs["WERKS"], "");
				hmExcelValues[5] = itemAttrs["EKGRP"];
				hmExcelValues[7] = itemAttrs["KAUTB"];
				//hmExcelValues[9] = itemAttrs["BSTRF"];//TODO
				hmExcelValues[11] = itemAttrs["STAWN"];
				hmExcelValues[13] = itemAttrs["AUSME"];
				hmExcelValues[15] = itemAttrs["LADGR"];
				hmExcelValues[17] = itemAttrs["PRCTR"];
				//hmExcelValues[19] = itemAttrs["HERKL"];//TODO
				hmExcelValues[21] = itemAttrs["HERKR"];
				hmExcelValues[23] = itemAttrs["SOBSK"];
				hmExcelValues[25] = itemAttrs["NCOST"];
				hmExcelValues[27] = itemAttrs["BESKZ"];
				hmExcelValues[29] = itemAttrs["DISMM"];
				hmExcelValues[31] = itemAttrs["DISPO"];
				hmExcelValues[33] = itemAttrs["FHORI"];
				hmExcelValues[35] = itemAttrs["STRGR"];
				hmExcelValues[37] = itemAttrs["VRMOD"];
				hmExcelValues[39] = itemAttrs["VINT1"];
				hmExcelValues[41] = itemAttrs["VINT2"];
				hmExcelValues[43] = itemAttrs["MTVFP"];
				hmExcelValues[45] = itemAttrs["DISGR"];
				hmExcelValues[47] = itemAttrs["SOBSL"];
				hmExcelValues[49] = itemAttrs["SBDKZ"];
				hmExcelValues[51] = itemAttrs["PERKZ"];
				//hmExcelValues[53] = itemAttrs["RGEKM"];//TODO
				hmExcelValues[55] = itemAttrs["ALTSL"];
				hmExcelValues[57] = itemAttrs["XCHPF"];
				hmExcelValues[59] = itemAttrs["UEETK"];
				hmExcelValues[61] = itemAttrs["FEVOR"];
				hmExcelValues[63] = itemAttrs["MMSTA"];
				hmExcelValues[65] = itemAttrs["MMSTD"];
				hmExcelValues[67] = itemAttrs["LGPRO"];
				hmExcelValues[69] = itemAttrs["LGFSB"];
				hmExcelValues[71] = itemAttrs["WZEIT"];
				hmExcelValues[73] = itemAttrs["WERKS"] + "-" + itemAttrs["LGORT"];
				hmExcelValues[75] = itemAttrs["LWMKB"];
				hmExcelValues[77] = itemAttrs["VPRSV"];
				hmExcelValues[79] = itemAttrs["BKLAS"];
				hmExcelValues[81] = itemAttrs["HKMAT"];
				hmExcelValues[83] = itemAttrs["HRKFT"];
				hmExcelValues[85] = itemAttrs["EKALR"];
	
				
				//Get item by ERP code 
				//get attached secondary specname
				//update attributes  
				var itmProcessingItem = ctgProcessingCatalog.getEntryByPrimaryKey(itemAttrs["ZZERPCODE"]);
				if(itmProcessingItem != null){
					var strItemType= getItemType(itmProcessingItem, hmGlobals);
					var catProcessingItem = itmProcessingItem.getCtgItemCategories("H000-Typology")[0];
					var strSecSpecName = catProcessingItem.getItemSecondarySpecsForCategory(ctgProcessingCatalog)[0].getSpecName();
					//var specItemSpec = getSpecByName(strSecSpecName);
					var itmProd = getProductItem(itmProcessingItem, strItemType);
					var catProdItem = itmProd.getCtgItemCategories("H000-Typology")[0];
					var strProdSecSpecName = catProdItem.getItemSecondarySpecsForCategory(ctgProcessingCatalog)[0].getSpecName();
					
					//get all places of storagegroups
					var hmPlants = itmProcessingItem.getEntryAttribValues(strSecSpecName + "/PlaceOfStorageGroup/06DN0679-Plant");
					//See if the plant is already in the list
					var intCount = null;
					
					forEachHmElement(hmPlants, intCount, strPlantNumber){
						var strPlant = checkString(itmProcessingItem.getEntryAttrib(strSecSpecName + "/PlaceOfStorageGroup#" + intCount + "/06DN0679-Plant"), "");
						if(strPlant == itemAttrs["WERKS"]){
							getPlantAttribs(itmProcessingItem, hmGlobals, intCount, itemAttrs, strSecSpecName, strItemType, strProdSecSpecName, itmProd, hmExcelValues);
						}
					}
				}
				sheetMaterial = addRowToExcelFile(hmGlobals, sheetMaterial, hmExcelValues);
			}
    	}
	}
}
xlsMaterial.saveToDocStore("public_html/reconciliation/plant/zmdmplants_" + strSelectedCatalogCode + ".xls", true);
