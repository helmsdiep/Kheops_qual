// ------------------------------------------------------------------------------------------------------------------------------------------------------

// Date:        Nov 09 2005
// Description: The login script with sample scripts for following types of authentication
//                a. InfoSphere MDM Collaboration Server only authentication
//                b. LDAP authenticated user. Single LDAP server 
//                c. LDAP authenticated user. SASL Bind
//                d. LDAP authenticated user. SSL Bind
//                e. LDAP authenticated user. Multiple Servers

// Usage:       Use these sample scripts to invoke the appropriate type of authentication
// Audit:       Nov 09 2005 .
//                Template for the login script
//                Nov 12 2005 .
//                Added functionality to save the login String, naming attribute , ldapurl to the user object
//              Nov 15 2005 .
//                Modified the functionality to set the entryDN attribute instead of the naming attribute and have the login string as
//                entered in the login page and the user name field blank in the scu user object
//              Nov 22 2005 .
//                Removed setting of loginString, instead the username field to hold the value entered in the login screen
//                Included logic to fetch entry DN for given entry from the naming attribute
//              Dec 02 2005 .
//                Modified the name of the logger to LdapLibraryLogger and its reference in this script
//                Modified the logic in the fail-over mechanism when the user could not be bound with info from cache in the SSL setup
//              Dec 02 2005 .
//                Initialized all the constants to a global variable and passed it to all the functions
//                Modified the logic in the fail-over mechanism when the user could not be bound with info from cache in the SSL setup
//              Dec 23 2005 .
//                Added the function changes that are specific to Novell and Tivoli
//                Added a new variable called group_parent_DNs where user can configure the Parent DN's where the groups exist in the LDAP server
//              Dec 27 2005 .
//                Added the changes to close the root context when search for roles or when the entry DN is fetched for the user
//              Jan 06 2006 .
//                Modified the init function to read the constants from Lookup table
//              Jan 31 2006 .
//                Removed special treatment of Root Ldap Context Invocation
//                
// -----------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------
// Name            : init()
// Description     : Initialize all the variables and return a hashmap, to be passed on to all the functions
// Input Param     : 
// Return Values   : Hashmap of the global variables
//-------------------------------------------------------------
function init()
{
    var globals                        = [];
    // initialize the trigger script functions
    var ldapUtil                       = getScriptByPath("scripts/triggers/LDAPLibrary.wpcs");
    var libraryLogger                  = getScriptByPath("scripts/triggers/LdapLibraryLogger.wpcs");

    // Logger functions
    globals["log"]                     = libraryLogger.getFunctionByName("log");
    globals["logger_name"]             = "ldap";  // Log file will be created under logs folder (ldap.log). Needs configuration in etc/default/log.xml
    globals["wpcOnlyAuthentication"]   = true;

    // LDAP Library  functions
    globals["saslBind"]                = ldapUtil.getFunctionByName("saslBind");
    globals["simpleBind"]              = ldapUtil.getFunctionByName("simpleBind");
    globals["sslBind"]                 = ldapUtil.getFunctionByName("sslBind");

    globals["getEntryDn"]              = ldapUtil.getFunctionByName("getEntryDn");
    globals["getSearchControlObject"]  = ldapUtil.getFunctionByName("getSearchControlObject");
    globals["searchRoles"]             = ldapUtil.getFunctionByName("searchRoles");
    globals["getSearchControlObject"]  = ldapUtil.getFunctionByName("getSearchControlObject");
    globals["search"]                  = ldapUtil.getFunctionByName("search");
    globals["closeLdapContext"]        = ldapUtil.getFunctionByName("closeLdapContext");

    var log       					   = globals["log"];
	
	// Initialize the constants specific to each LDAP Url
    var lookupTableName =  getSystemMessageByName(getStringValueForClassMember("com.ibm.ccd.common.util.Const", "LDAP_PROPERTIES_LOOKUP_TABLE_NAME_INDEX"),getDefaultLocale());

    var lookupTable = getLkpByName(lookupTableName);
    var keys = lookupTable.getLkpKeys();
    if(keys != null)
    {
        for( var i = 0;i<keys.size();i++)
        {
            var ldapConstants					 = [];
            var sLookupValues       			 = lookupValues(lookupTable,keys[i]);

            var ldapUrl             			 = keys[i];

            ldapConstants["ldap_name_attribute"] = sLookupValues[0]; 
            ldapConstants["ldap_grp_attribute"]  = sLookupValues[1]; 
            var pipedUserParentDNs  			 = checkString(sLookupValues[2] , " ");  
            var pipedGrpParentDns   			 = checkString(sLookupValues[3] , " ");  
            ldapConstants["rootUser"]            = sLookupValues[4];  
            ldapConstants["rootPassword"]        = sLookupValues[5];  
            ldapConstants["bindType"]            = sLookupValues[6];           
            ldapConstants["sslBindType"]         = sLookupValues[7];  
            ldapConstants["personClassName"]     = sLookupValues[8]; 
            ldapConstants["groupClassName"]  	 = sLookupValues[9]; 
            ldapConstants["keystore"]            = sLookupValues[10];
            ldapConstants["supportedSASLMechs"]  = sLookupValues[11];

            log.invoke ("INFO" , " ldapUrl = " + ldapUrl + " ldap_name_attribute = "+ ldapConstants["ldap_name_attribute"] + " ldap_grp_attribute = "+ ldapConstants["ldap_grp_attribute"], globals["logger_name"]);
            log.invoke ("INFO" , " bindType = " + ldapConstants["bindType"] + "sslBindType = " +  ldapConstants["sslBindType"] + " keystore = " + ldapConstants["keystore"], globals["logger_name"] );

            // Pipe delimited attributes
            ldapConstants["userParentDNs"]       = pipedUserParentDNs.parseDelim("|");
            ldapConstants["groupParentDNs"]      = pipedGrpParentDns.parseDelim("|");

            log.invoke ("INFO" , " userParentDNs = " + ldapConstants["userParentDNs"].size() + " groupParentDNs = " + ldapConstants["groupParentDNs"].size() + " personClassName = " + ldapConstants["personClassName"] + " groupClassName = " + ldapConstants["groupClassName"], globals["logger_name"]);
            globals[ldapUrl]					 = ldapConstants;
        }	
    }
    return globals;
}


// ------------------------------------------------------------
// Name            : doWpcOnlyAuthentication()
// Description     : perform a InfoSphere MDM Collaboration Server only authentication
// Input Param     : The login details of username,password,companycode,passwordencoded
// Return Values: none. set the various implicit variables to the respective values
//-------------------------------------------------------------
function doWpcOnlyAuthentication(loginDetails,scuUser,globals)
{
    var username        = loginDetails["username"];
    var password        = loginDetails["password"];
    var companyCode     = loginDetails["companycode"];
    var passwordEncoded = loginDetails["passwordencoded"];
    var authenticated   = authenticateWPCUser(username, password, companyCode, passwordEncoded);
    var wpcuserctx      = null;
    if( authenticated )
    {
        wpcuserctx      = populateSecurityContext (scuUser);
        login_validated = true;
    }
    else
    {
        // authentication failed throw error , do some logging
        login_validated = false;
    }
    return wpcuserctx;
}

function getRootLdapContext(rootUser,rootPassword,ldap_url,globals)
{
    var log = globals["log"];
    var bindType	 = globals[ldap_url]["bindType"];
    var m_ldapCtx    = null;
    log.invoke("INFO","[Login.script - getRootLdapContext()] rootUser = " + rootUser +  " bindType = "+ bindType,globals["logger_name"]); 
    if ( bindType == "simple" )
    {
        //principal = username; // if the entire dn is given by the user
        m_ldapCtx   = globals["simpleBind"].invoke(rootUser,rootPassword,ldap_url);
    }

    if ( bindType == "sasl" )
    {
        // The following is the syntax for SASL Bind in NOVELL and Sun One - comment the section for Tivoli if Directory Server is Novell and Sun One
        //m_ldapCtx     = globals["saslBind"].invoke("dn:"+ rootUser,rootPassword,ldap_url, globals[ldap_url]["supportedSASLMechs"]); 
        
        // The following is the syntax for SASL Bind in Tivoli - comment out this section for Novell and Sun One if Directory server is Tivoli
        m_ldapCtx     = globals["saslBind"].invoke(rootUser,rootPassword,ldap_url, globals[ldap_url]["supportedSASLMechs"]); // 
    }
    if ( bindType == "ssl" )
    {
        var sslBindType = globals[ldap_url]["sslBindType"];
        if( sslBindType == "simple")
        {
            log.invoke("INFO", " getRootLdapContext() keystore = " + globals["keystore"] + " sslBindType = " + sslBindType, globals["logger_name"]);
            log.invoke("INFO", " getRootLdapContext() The entry DN for the user "+ rootUser, globals["logger_name"]);
            m_ldapCtx    = globals["sslBind"].invoke(rootUser,rootPassword,ldap_url,globals[ldap_url]["keystore"],sslBindType);
        }
        else if( sslBindType == "sasl")
        {
            
            // The following is the syntax for SASL Bind in NOVELL and Sun One - comment the section for Tivoli if Directory Server is Novell and Sun One
            //m_ldapCtx     = globals["sslBind"].invoke("dn:"+ rootUser,rootPassword,ldap_url,globals[ldap_url]["keystore"], globals[ldap_url]["supportedSASLMechs"]);
            
            // The following is the syntax for SASL Bind in Tivoli - comment out this section for Novell and Sun One if Directory server is Tivoli
            m_ldapCtx     = globals["sslBind"].invoke(rootUser,rootPassword,ldap_url, globals[ldap_url]["keystore"] ,globals[ldap_url]["supportedSASLMechs"]); // assumed that user enters the naming attr's value and that is unique across organisation
        }
    }
    return m_ldapCtx;
}


function locateEntryDnForUser(ldap_url,parent_DN,username,globals)
{
    var log       = globals["log"];
    log.invoke("INFO", " locateEntryDnForUser()The rootContext variabls are [rootUserUrl] = "+ ldap_url + " globals[admin_user] = "+ globals[ldap_url]["rootUser"],globals["logger_name"]);
    var rootContext = getRootLdapContext(globals[ldap_url]["rootUser"],globals[ldap_url]["rootPassword"],ldap_url,globals);
    var entryDN     = null;
    var query       = "(&(objectClass="+ globals[ldap_url]["personClassName"] + ")("+globals[ldap_url]["ldap_name_attribute"] + "="+username+"))";
    log.invoke("INFO","[Login.script] locateEntryDnForUser()   rootContext = " + rootContext + " query = " + query,globals["logger_name"]); 
    parent_DN       = checkString(parent_DN,"");
    entryDN         = globals["getEntryDn"].invoke(rootContext,parent_DN,query);
    entryDN         = (parent_DN != ""?entryDN+","+parent_DN:entryDN);
    log.invoke("INFO","[Login.script]locateEntryDnForUser() entryDN = " + checkString( entryDN, "entryDN is null"),globals["logger_name"]); 
    // clean up the root context
    var closeLdapContext    = globals["closeLdapContext"];
    if( rootContext!= null)
    {
        closeLdapContext.invoke(rootContext);
    }
    return entryDN;
}

// ------------------------------------------------------------
// Name           : locateRoles4User()
// Description    : Locate the ldap roles for a given user
// Input Param    : The entry DN of the user
// Return Values: A hashmap of groups where the user is a member
//-------------------------------------------------------------
function locateRoles4User(ldap_url,entryDn,globals)
{
    var log              = globals["log"];
    var srcControls      = globals["getSearchControlObject"].invoke(null);
    var rootContext      = getRootLdapContext(globals[ldap_url]["rootUser"],globals[ldap_url]["rootPassword"],ldap_url,globals);
    var entryDn          = entryDn.replace("\\","\\\\"); //escape special character
    var filter           = "(&(objectclass=" + globals[ldap_url]["groupClassName"]+ ")(|(uniquemember="+entryDn+")(member="+entryDn+")))";
    log.invoke("INFO","[Login.script] filter = " + filter,globals["logger_name"]); 
    var roles            = [];
    var group_parent_DNs = globals[ldap_url]["groupParentDNs"];
    for ( var i = 0 ; i < group_parent_DNs.size() ; i++ )
    {
        var group_parent_DN = group_parent_DNs[i];
        group_parent_DN     = checkString(group_parent_DN,"");
        var userRoles       = globals["searchRoles"].invoke(rootContext,srcControls,group_parent_DN,filter,globals[ldap_url]["ldap_grp_attribute"]); 
        roles               = mergeValues(roles,userRoles);
        log.invoke("INFO","[Login.script] roles = " + roles,globals["logger_name"]); 
    }
    // clean up the root context
    var closeLdapContext    = globals["closeLdapContext"];
    if( rootContext!= null)
    {
        closeLdapContext.invoke(rootContext);
    }
    return roles;
}

// ------------------------------------------------------------------------------------------------------------------------
// Name            : bindUser()
// Description     : Bind the user under any one of the authentication schemes

// Input Param     : username - Username
//                   password - password
//                   ldap_url - The URL against which this user has to be bound
//                   scuUser  - The User object passed , in which the entry DN , ladp_url etc will be passed , making him a ldap user
// Return Values   : A hashmap of groups where the user is a member
//-------------------------------------------------------------------------------------------------------------------------
function bindUser(username,password,ldap_url,scuUser,globals)
{
    var log      = globals["log"];
    var m_ldapCtx  = null;
    var parent_DNs = globals[ldap_url]["userParentDNs"];
    log.invoke("INFO","[Login.script] parent_DN size = " + parent_DNs.size(),globals["logger_name"]); 
    for ( var i=0; i<parent_DNs.size(); i++ )
    {
        var parent_DN    = parent_DNs[i];
        var bindType	 = globals[ldap_url]["bindType"];
        log.invoke("INFO","[Login.script] parent_DN = " + parent_DN + " bindType = "+ bindType,globals["logger_name"]); 
        if ( bindType == "simple" )
        {
            //principal = username; // if the entire dn is given by the user
            scuUser.setLdapEntryDn(locateEntryDnForUser(ldap_url,parent_DN,username,globals));
            m_ldapCtx   = globals["simpleBind"].invoke(scuUser.getLdapEntryDn(),password,ldap_url);
        }

        if ( bindType == "sasl" )
        {
            scuUser.setLdapEntryDn(locateEntryDnForUser(ldap_url,parent_DN,username,globals));
            
            // The following is the syntax for SASL Bind in NOVELL and Sun One - comment the section for Tivoli if Directory Server is Novell and Sun One
            //m_ldapCtx     = globals["saslBind"].invoke("dn:"+scuUser.getLdapEntryDn(),password,ldap_url, globals[ldap_url]["supportedSASLMechs"]); 
            
            // The following is the syntax for SASL Bind in Tivoli - comment out this section for Novell and Sun One if Directory server is Tivoli
            m_ldapCtx     = globals["saslBind"].invoke(username,password,ldap_url, globals[ldap_url]["supportedSASLMechs"]); 
        }
        if ( bindType == "ssl" )
        {
        	var sslBindType = globals[ldap_url]["sslBindType"];
            if( sslBindType == "simple")
            {
                log.invoke("INFO", " keystore = " + globals["keystore"] + " sslBindType = " + sslBindType, globals["logger_name"]);
                scuUser.setLdapEntryDn(locateEntryDnForUser(ldap_url,parent_DN,username,globals));
                log.invoke("INFO", " The entry DN for the user "+ scuUser.getLdapEntryDn(), globals["logger_name"]);
                m_ldapCtx    = globals["sslBind"].invoke(scuUser.getLdapEntryDn(),password,ldap_url,globals[ldap_url]["keystore"],sslBindType);

            }
            else if( sslBindType == "sasl")
            {
                scuUser.setLdapEntryDn(locateEntryDnForUser(ldap_url,parent_DN,username,globals));

                // The following is the syntax for SASL Bind in NOVELL and Sun One - comment the section for Tivoli if Directory Server is Novell and Sun One
                //m_ldapCtx     = globals["sslBind"].invoke("dn:"+scuUser.getLdapEntryDn(),password,ldap_url, globals[ldap_url]["keystore"],globals[ldap_url]["supportedSASLMechs"]);
                
                // The following is the syntax for SASL Bind in Tivoli - comment out this section for Novell and Sun One if Directory server is Tivoli
                m_ldapCtx     = globals["sslBind"].invoke(username,password,ldap_url, globals[ldap_url]["keystore"], globals[ldap_url]["supportedSASLMechs"]); 
            }
        }
        if (m_ldapCtx != null)
        {
            break;
        }
    }// for loop
    log.invoke("INFO","[Login.script] m_ldapCtx = " + checkString(m_ldapCtx + "", " contxt is null"),globals["logger_name"]); 
    return m_ldapCtx;

}

function doLdapAuthentication(loginDetails,scuUser,globals)
{
    var log     = globals["log"];
    log.invoke("INFO","[Login.script] inside doLdapAuthentication " ,globals["logger_name"]); 
    var ldapuserctx = null;
    var error    = null;
    catchError(error)
    {
        var username     = loginDetails["username"];
        var password     = loginDetails["password"];
        var companycode  = loginDetails["companycode"];
        var passwordencoded = loginDetails["passwordencoded"];

        //script library function variables
        var m_ldapCtx = null;

        // check if the SCU user object is either null or populated with Naming attribute etc
        if (scuUser == null || scuUser.getUserName() == "" )
        {
                    var lookupTableName =  getSystemMessageByName(getStringValueForClassMember("com.ibm.ccd.common.util.Const", "LDAP_PROPERTIES_LOOKUP_TABLE_NAME_INDEX"),getDefaultLocale());
                   var lookupTable = getLkpByName(lookupTableName);
		    var keys = lookupTable.getLkpKeys();
		    for( var i = 0;i<keys.size();i++)
		    {
		        var ldap_url             			 = keys[i];
                log.invoke("INFO","[Login.script] In doLdapAuthentication call Bind User" + ldap_url,globals["logger_name"]); 
                m_ldapCtx         = bindUser(username,password,ldap_url,scuUser,globals);
                if( m_ldapCtx != null)
                {
                    scuUser.setLdapServerUrl(ldap_url);
                    scuUser.setUsername(username);
                    log.invoke("INFO","[Login.script]" + scuUser.getLdapEntryDn() ,globals["logger_name"]);                    

                    var roles        = locateRoles4User(ldap_url,scuUser.getLdapEntryDn(),globals); 
                    log.invoke("INFO", "Roles = "+roles,globals["logger_name"]);                                        
                    ldapuserctx    = populateSecurityContext (scuUser,roles,m_ldapCtx);
                    break;
                } // only when m_ldapCtx is not null
            } // for each of the ldap urls
            if( m_ldapCtx == null)
            {
                // log error
                login_validated = false;
            }
            else
            {
                login_validated = true;
            }

        }
        else
        {
            var user                = getUserByUsername(username, companycode);
            var principal           = user.getLdapEntryDn(); 
            var ldap_url            = user.getLdapServerUrl();
            if(globals[ldap_url] != null)
            {
    			var bindType			= globals[ldap_url]["bindType"];
                log.invoke("INFO", " [Login.script] From the cache principal = "+principal + "ldap_url =  "+ldap_url+ " bindType = " + bindType ,globals["logger_name"]);                                        
                if ( bindType == "simple" )
                {
                    m_ldapCtx = globals["simpleBind"].invoke(principal,password,ldap_url);
                }
                if ( bindType == "sasl" )
                {
                    log.invoke("INFO", " [Login.script] Call the sasl bind function" ,globals["logger_name"]);   
                
                    // The following is the syntax for SASL Bind in NOVELL and Sun One - comment the section for Tivoli if Directory Server is Novell and Sun One
                    //m_ldapCtx     = globals["saslBind"].invoke("dn:"+principal,password,ldap_url, globals[ldap_url]["supportedSASLMechs"]); 
                
                    // The following is the syntax for SASL Bind in Tivoli - comment out this section for Novell and Sun One if Directory server is Tivoli
                    m_ldapCtx     = globals["saslBind"].invoke(username,password,ldap_url, globals[ldap_url]["supportedSASLMechs"]); 
                }
                if ( bindType == "ssl" )
                {
                	var sslBindType = globals[ldap_url]["sslBindType"];
                    log.invoke("INFO", " [Login.script] Call the ssl bind function  globals[sslBindType] = " + sslBindType,globals["logger_name"]);                                        
                    if ( sslBindType == "simple")
                    {
                        m_ldapCtx = globals["sslBind"].invoke(principal,password,ldap_url,globals[ldap_url]["keystore"],sslBindType);

                    }
                    if ( sslBindType == "sasl")
                    {
                        // The following is the syntax for SASL Bind in NOVELL and Sun One - comment the section for Tivoli if Directory Server is Novell and Sun One
                        //m_ldapCtx     = globals["sslBind"].invoke("dn:"+principal,password,ldap_url, globals[ldap_url]["keystore"], globals[ldap_url]["supportedSASLMechs"]); 
                    
                        // The following is the syntax for SASL Bind in Tivoli - comment the section for Novell and Sun One if Directory server is Tivoli
                        m_ldapCtx     = globals["sslBind"].invoke(username,password,ldap_url, globals[ldap_url]["keystore"], globals[ldap_url]["supportedSASLMechs"]); 
                    }
                }
            }
            // if this is null, do a failover mechanism of testing against all the other ldap_servers
            if (m_ldapCtx == null)
            {
                            var lookupTableName =  getSystemMessageByName(getStringValueForClassMember("com.ibm.ccd.common.util.Const", "LDAP_PROPERTIES_LOOKUP_TABLE_NAME_INDEX"),getDefaultLocale());
                            var lookupTable = getLkpByName(lookupTableName); 
			    var keys = lookupTable.getLkpKeys();
			    for( var i = 0;i<keys.size();i++)
			    {
			        var ldap_url = keys[i];
                    log.invoke("INFO","[Login.script] doLdapAuthentication fail-over mechanism" + ldap_url,globals["logger_name"]); 
                    m_ldapCtx    = bindUser(username,password,ldap_url,scuUser,globals);
                    if( m_ldapCtx != null)
                    {
                        scuUser.setLdapServerUrl(ldap_url);
                        scuUser.setUsername(username);
                        log.invoke("INFO","[Login.script] fail-over" + scuUser.getLdapEntryDn() ,globals["logger_name"]);                    

                        var roles        = locateRoles4User(ldap_url,scuUser.getLdapEntryDn(),globals); 
                        log.invoke("INFO", "Roles {fail-over} = "+roles,globals["logger_name"]);                                        
                        ldapuserctx    = populateSecurityContext (scuUser,roles,m_ldapCtx);
                        break;
                    } // only when m_ldapCtx is not null
                } // for each ldap_url 
            }
            if (m_ldapCtx == null)
            {
                //log error
                login_validated = false;
            }
            else
            {
                var roles        = locateRoles4User(ldap_url,scuUser.getLdapEntryDn(),globals);
                ldapuserctx    = populateSecurityContext(scuUser,roles,m_ldapCtx);
                login_validated = true;
            }
        }
    }
    if(error != null)
    {
        log.invoke("ERROR", " Error while processing the LDAP bind "+error,globals["logger_name"]);
    }
    return ldapuserctx;
}

// -----------------------------------------------------------------------------------------------------------------
//    Main Function , branched off to do either 
//    a.InfoSphere MDM Collaboration Server only Authentication    
//    b.InfoSphere MDM Collaboration Server + LDAP Authentication
// -----------------------------------------------------------------------------------------------------------------


var ee;
var globals                 = init();
var log                   = globals["log"];
catchError(ee)
{
    var loginDetails            = [];
    loginDetails["username"]    = loginusername;
    loginDetails["password"]    = loginpassword;
    loginDetails["companycode"] = logincompanycode;
    loginDetails["passwordencoded"] = loginpasswordencoded;
    log.invoke ("INFO" , " The value of globals[wpcOnlyAuthentication] = " + globals["wpcOnlyAuthentication"],globals["logger_name"]);
    if( globals["wpcOnlyAuthentication"] == true )
    {
        loginuserctx        = doWpcOnlyAuthentication(loginDetails,loginuser,globals);
    }
    else
    {
        log.invoke("INFO","[Login.script]loginuser.getUserName() = " + loginuser.getUserName() + " getUserLdapEnabled " +loginuser.getUserLdapEnabled(),globals["logger_name"]); 
        if(loginuser != null && (loginuser.getUserName() != null && loginuser.getUserName() != "" ) && (loginuser.getUserLdapEnabled() == false) )
        {
            log.invoke("INFO","[Login.script]doWpcOnlyAuthentication",globals["logger_name"]); 
            loginuserctx    = doWpcOnlyAuthentication(loginDetails,loginuser,globals);
        }
        else
        {
            log.invoke("INFO","[Login.script]doLdapAuthentication",globals["logger_name"]); 
            loginuserctx    = doLdapAuthentication(loginDetails,loginuser,globals);
        }
    }
}
if ( ee != null )
{
    // log error
    log.invoke("ERROR","[Login.script]ERROR!! " + ee,globals["logger_name"]); 
    login_validated = false;
}
